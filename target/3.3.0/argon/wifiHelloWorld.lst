
/home/maxwell/CTD-IoT/d3/wifiHelloWorld/target/3.3.0/argon/wifiHelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005f00  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9f20  000b9f20  00009f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b9f44  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e554  000b9f48  0001e554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000228  2003e5c8  2003e5c8  0002e5c8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000b9fbc  000b9fbc  00029fbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b9fe4  000b9fe4  00029fe4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0013f3cd  00000000  00000000  00029fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001657a  00000000  00000000  001693b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002ff8  00000000  00000000  0017f92f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  000401e8  00000000  00000000  00182927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0004d6da  00000000  00000000  001c2b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00136561  00000000  00000000  002101e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00040e59  00000000  00000000  0034674a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000ad50  00000000  00000000  003875a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008d5c  00000000  00000000  003922f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 fb99 	bl	b8768 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 fba1 	bl	b8784 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e554 	.word	0x2003e554
   b404c:	000b9f48 	.word	0x000b9f48
   b4050:	2003e5c8 	.word	0x2003e5c8
   b4054:	2003e5c8 	.word	0x2003e5c8
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f003 f991 	bl	b7388 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b9ef8 	.word	0x000b9ef8
   b4080:	000b9f1c 	.word	0x000b9f1c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bb9e 	b.w	b47c4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fdc9 	bl	b4c20 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f003 b931 	b.w	b72f8 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 bb2f 	b.w	b66f8 <malloc>

000b409a <_Znaj>:
   b409a:	f002 bb2d 	b.w	b66f8 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 bb33 	b.w	b6708 <free>
	...

000b40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f002 fa78 	bl	b65a0 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b64d1 	.word	0x000b64d1
   b40b8:	000b8a34 	.word	0x000b8a34

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   b40cc:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b40ce:	f002 fa07 	bl	b64e0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b40d2:	4b03      	ldr	r3, [pc, #12]	; (b40e0 <_ZN10CloudClass7processEv+0x14>)
   b40d4:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   b40d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   b40da:	f002 ba71 	b.w	b65c0 <spark_process>
   b40de:	bf00      	nop
   b40e0:	2003e740 	.word	0x2003e740

000b40e4 <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b40e4:	6803      	ldr	r3, [r0, #0]
   b40e6:	b12b      	cbz	r3, b40f4 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b40e8:	6842      	ldr	r2, [r0, #4]
   b40ea:	4293      	cmp	r3, r2
   b40ec:	d202      	bcs.n	b40f4 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b40ee:	4618      	mov	r0, r3
   b40f0:	f004 bb32 	b.w	b8758 <atoi>
   b40f4:	2000      	movs	r0, #0
   b40f6:	4770      	bx	lr

000b40f8 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b40f8:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b40fa:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b40fc:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b40fe:	b145      	cbz	r5, b4112 <_ZN10BlynkParam8iteratorppEv+0x1a>
   b4100:	6843      	ldr	r3, [r0, #4]
   b4102:	429d      	cmp	r5, r3
   b4104:	d205      	bcs.n	b4112 <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b4106:	4628      	mov	r0, r5
   b4108:	f004 fb7c 	bl	b8804 <strlen>
   b410c:	3001      	adds	r0, #1
   b410e:	4405      	add	r5, r0
   b4110:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b4112:	4620      	mov	r0, r4
   b4114:	bd38      	pop	{r3, r4, r5, pc}

000b4116 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b4116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4118:	4604      	mov	r4, r0
   b411a:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b411c:	460d      	mov	r5, r1
   b411e:	b921      	cbnz	r1, b412a <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4120:	6803      	ldr	r3, [r0, #0]
   b4122:	1c7a      	adds	r2, r7, #1
   b4124:	6042      	str	r2, [r0, #4]
   b4126:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
   b4128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
   b412a:	4608      	mov	r0, r1
   b412c:	f004 fb6a 	bl	b8804 <strlen>
    if (len + l > buff_size)
   b4130:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
   b4132:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b4134:	19f2      	adds	r2, r6, r7
   b4136:	429a      	cmp	r2, r3
   b4138:	d8f6      	bhi.n	b4128 <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b413a:	6820      	ldr	r0, [r4, #0]
   b413c:	4632      	mov	r2, r6
   b413e:	4629      	mov	r1, r5
   b4140:	4438      	add	r0, r7
   b4142:	f004 fb11 	bl	b8768 <memcpy>
    len += l;
   b4146:	6860      	ldr	r0, [r4, #4]
   b4148:	4430      	add	r0, r6
   b414a:	6060      	str	r0, [r4, #4]
   b414c:	e7ec      	b.n	b4128 <_ZN10BlynkParam3addEPKc+0x12>
	...

000b4150 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b4150:	b538      	push	{r3, r4, r5, lr}
   b4152:	4604      	mov	r4, r0
   b4154:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b4156:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b415a:	6825      	ldr	r5, [r4, #0]
   b415c:	4a04      	ldr	r2, [pc, #16]	; (b4170 <_ZN10BlynkParam3addEi+0x20>)
   b415e:	1a09      	subs	r1, r1, r0
   b4160:	4428      	add	r0, r5
   b4162:	f002 fad9 	bl	b6718 <snprintf>
   b4166:	6863      	ldr	r3, [r4, #4]
   b4168:	3001      	adds	r0, #1
   b416a:	4403      	add	r3, r0
   b416c:	6063      	str	r3, [r4, #4]
    }
   b416e:	bd38      	pop	{r3, r4, r5, pc}
   b4170:	000b8a49 	.word	0x000b8a49

000b4174 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b4174:	b538      	push	{r3, r4, r5, lr}
   b4176:	4604      	mov	r4, r0
   b4178:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b417a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b417e:	6825      	ldr	r5, [r4, #0]
   b4180:	4a04      	ldr	r2, [pc, #16]	; (b4194 <_ZN10BlynkParam3addEl+0x20>)
   b4182:	1a09      	subs	r1, r1, r0
   b4184:	4428      	add	r0, r5
   b4186:	f002 fac7 	bl	b6718 <snprintf>
   b418a:	6863      	ldr	r3, [r4, #4]
   b418c:	3001      	adds	r0, #1
   b418e:	4403      	add	r3, r0
   b4190:	6063      	str	r3, [r4, #4]
    }
   b4192:	bd38      	pop	{r3, r4, r5, pc}
   b4194:	000b8a4c 	.word	0x000b8a4c

000b4198 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   b4198:	b508      	push	{r3, lr}
        state = CONNECTING;
   b419a:	2300      	movs	r3, #0
   b419c:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   b419e:	6800      	ldr	r0, [r0, #0]
   b41a0:	f002 fe64 	bl	b6e6c <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b41a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b41a8:	f000 be8e 	b.w	b4ec8 <BlynkNoOpCbk>

000b41ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b41ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b41b0:	eb01 0902 	add.w	r9, r1, r2
   b41b4:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b41b6:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b41b8:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b41bc:	4680      	mov	r8, r0
   b41be:	460d      	mov	r5, r1
   b41c0:	4616      	mov	r6, r2
    if (it >= param.end())
   b41c2:	f080 8092 	bcs.w	b42ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b41c6:	a805      	add	r0, sp, #20
   b41c8:	880f      	ldrh	r7, [r1, #0]
   b41ca:	f7ff ff95 	bl	b40f8 <_ZN10BlynkParam8iteratorppEv>
   b41ce:	6803      	ldr	r3, [r0, #0]
   b41d0:	454b      	cmp	r3, r9
   b41d2:	f080 808a 	bcs.w	b42ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b41d6:	a805      	add	r0, sp, #20
   b41d8:	f7ff ff84 	bl	b40e4 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   b41dc:	f247 2376 	movw	r3, #29302	; 0x7276
   b41e0:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b41e2:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   b41e4:	f000 80a9 	beq.w	b433a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   b41e8:	d827      	bhi.n	b423a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   b41ea:	f247 2361 	movw	r3, #29281	; 0x7261
   b41ee:	429f      	cmp	r7, r3
   b41f0:	d07e      	beq.n	b42f0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   b41f2:	f247 2364 	movw	r3, #29284	; 0x7264
   b41f6:	429f      	cmp	r7, r3
   b41f8:	d042      	beq.n	b4280 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   b41fa:	f646 5370 	movw	r3, #28016	; 0x6d70
   b41fe:	429f      	cmp	r7, r3
   b4200:	d128      	bne.n	b4254 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b4202:	4e63      	ldr	r6, [pc, #396]	; (b4390 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4204:	4f63      	ldr	r7, [pc, #396]	; (b4394 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   b4206:	f8df 81a0 	ldr.w	r8, [pc, #416]	; b43a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   b420a:	9b05      	ldr	r3, [sp, #20]
   b420c:	4599      	cmp	r9, r3
   b420e:	d96c      	bls.n	b42ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4210:	a805      	add	r0, sp, #20
   b4212:	f7ff ff67 	bl	b40e4 <_ZNK10BlynkParam8iterator5asIntEv>
   b4216:	b2c4      	uxtb	r4, r0
            ++it;
   b4218:	a805      	add	r0, sp, #20
   b421a:	f7ff ff6d 	bl	b40f8 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b421e:	9d05      	ldr	r5, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b4220:	4631      	mov	r1, r6
   b4222:	4628      	mov	r0, r5
   b4224:	f004 fae4 	bl	b87f0 <strcmp>
   b4228:	4601      	mov	r1, r0
   b422a:	b9e0      	cbnz	r0, b4266 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   b422c:	4620      	mov	r0, r4
   b422e:	f003 fc4b 	bl	b7ac8 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b4232:	a805      	add	r0, sp, #20
   b4234:	f7ff ff60 	bl	b40f8 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b4238:	e7e7      	b.n	b420a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   b423a:	f247 7364 	movw	r3, #30564	; 0x7764
   b423e:	429f      	cmp	r7, r3
   b4240:	d03f      	beq.n	b42c2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   b4242:	f247 7376 	movw	r3, #30582	; 0x7776
   b4246:	429f      	cmp	r7, r3
   b4248:	f000 8087 	beq.w	b435a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   b424c:	f247 7361 	movw	r3, #30561	; 0x7761
   b4250:	429f      	cmp	r7, r3
   b4252:	d05f      	beq.n	b4314 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b4254:	2300      	movs	r3, #0
   b4256:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b425a:	2202      	movs	r2, #2
   b425c:	9200      	str	r2, [sp, #0]
   b425e:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   b4262:	4619      	mov	r1, r3
   b4264:	e029      	b.n	b42ba <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4266:	4639      	mov	r1, r7
   b4268:	4628      	mov	r0, r5
   b426a:	f004 fac1 	bl	b87f0 <strcmp>
   b426e:	b128      	cbz	r0, b427c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   b4270:	4641      	mov	r1, r8
   b4272:	4628      	mov	r0, r5
   b4274:	f004 fabc 	bl	b87f0 <strcmp>
   b4278:	2800      	cmp	r0, #0
   b427a:	d1da      	bne.n	b4232 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   b427c:	2101      	movs	r1, #1
   b427e:	e7d5      	b.n	b422c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4280:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b4282:	4945      	ldr	r1, [pc, #276]	; (b4398 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   b4284:	9307      	str	r3, [sp, #28]
   b4286:	a807      	add	r0, sp, #28
   b4288:	2310      	movs	r3, #16
   b428a:	2500      	movs	r5, #0
   b428c:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b4290:	f7ff ff41 	bl	b4116 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4294:	a807      	add	r0, sp, #28
   b4296:	4621      	mov	r1, r4
   b4298:	f7ff ff5a 	bl	b4150 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b429c:	4620      	mov	r0, r4
   b429e:	f003 fc3d 	bl	b7b1c <digitalRead>
        rsp.add(analogRead(pin));
   b42a2:	4601      	mov	r1, r0
   b42a4:	a807      	add	r0, sp, #28
   b42a6:	f7ff ff65 	bl	b4174 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b42aa:	9b08      	ldr	r3, [sp, #32]
   b42ac:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b42b0:	3b01      	subs	r3, #1
   b42b2:	9300      	str	r3, [sp, #0]
   b42b4:	9b07      	ldr	r3, [sp, #28]
   b42b6:	462a      	mov	r2, r5
   b42b8:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b42ba:	4640      	mov	r0, r8
   b42bc:	f000 faec 	bl	b4898 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b42c0:	e013      	b.n	b42ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   b42c2:	a805      	add	r0, sp, #20
   b42c4:	f7ff ff18 	bl	b40f8 <_ZN10BlynkParam8iteratorppEv>
   b42c8:	6803      	ldr	r3, [r0, #0]
   b42ca:	4599      	cmp	r9, r3
   b42cc:	d90d      	bls.n	b42ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   b42ce:	b2a4      	uxth	r4, r4
   b42d0:	2101      	movs	r1, #1
   b42d2:	4620      	mov	r0, r4
   b42d4:	f003 fbf8 	bl	b7ac8 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b42d8:	a805      	add	r0, sp, #20
   b42da:	f7ff ff03 	bl	b40e4 <_ZNK10BlynkParam8iterator5asIntEv>
   b42de:	1e01      	subs	r1, r0, #0
   b42e0:	bf18      	it	ne
   b42e2:	2101      	movne	r1, #1
   b42e4:	4620      	mov	r0, r4
   b42e6:	f003 fc00 	bl	b7aea <digitalWrite>
    }
}
   b42ea:	b00f      	add	sp, #60	; 0x3c
   b42ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b42f0:	ab0a      	add	r3, sp, #40	; 0x28
   b42f2:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b42f4:	a807      	add	r0, sp, #28
   b42f6:	2310      	movs	r3, #16
   b42f8:	4928      	ldr	r1, [pc, #160]	; (b439c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   b42fa:	2500      	movs	r5, #0
   b42fc:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b4300:	f7ff ff09 	bl	b4116 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4304:	a807      	add	r0, sp, #28
   b4306:	4621      	mov	r1, r4
   b4308:	f7ff ff22 	bl	b4150 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b430c:	4620      	mov	r0, r4
   b430e:	f003 fc18 	bl	b7b42 <analogRead>
   b4312:	e7c6      	b.n	b42a2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   b4314:	a805      	add	r0, sp, #20
   b4316:	f7ff feef 	bl	b40f8 <_ZN10BlynkParam8iteratorppEv>
   b431a:	6803      	ldr	r3, [r0, #0]
   b431c:	4599      	cmp	r9, r3
   b431e:	d9e4      	bls.n	b42ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   b4320:	b2a4      	uxth	r4, r4
   b4322:	2101      	movs	r1, #1
   b4324:	4620      	mov	r0, r4
   b4326:	f003 fbcf 	bl	b7ac8 <pinMode>
        analogWrite(pin, it.asInt());
   b432a:	a805      	add	r0, sp, #20
   b432c:	f7ff feda 	bl	b40e4 <_ZNK10BlynkParam8iterator5asIntEv>
   b4330:	4601      	mov	r1, r0
   b4332:	4620      	mov	r0, r4
   b4334:	f003 fc1c 	bl	b7b70 <_Z11analogWritetm>
    } break;
   b4338:	e7d7      	b.n	b42ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   b433a:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   b433c:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   b4340:	f000 fdc4 	bl	b4ecc <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b4344:	4603      	mov	r3, r0
            handler(req);
   b4346:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b4348:	b123      	cbz	r3, b4354 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   b434a:	4a15      	ldr	r2, [pc, #84]	; (b43a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   b434c:	4293      	cmp	r3, r2
   b434e:	d001      	beq.n	b4354 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   b4350:	4798      	blx	r3
   b4352:	e7ca      	b.n	b42ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
   b4354:	f000 fdb6 	bl	b4ec4 <BlynkWidgetRead>
        }
    }
   b4358:	e7c7      	b.n	b42ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   b435a:	a805      	add	r0, sp, #20
   b435c:	f7ff fecc 	bl	b40f8 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4360:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   b4362:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b4366:	1b5d      	subs	r5, r3, r5
   b4368:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(pin);
   b436a:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b436c:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   b4370:	950c      	str	r5, [sp, #48]	; 0x30
   b4372:	f000 fdb5 	bl	b4ee0 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b4376:	4603      	mov	r3, r0
            handler(req, param);
   b4378:	a90a      	add	r1, sp, #40	; 0x28
   b437a:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b437c:	b123      	cbz	r3, b4388 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   b437e:	4a09      	ldr	r2, [pc, #36]	; (b43a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   b4380:	4293      	cmp	r3, r2
   b4382:	d001      	beq.n	b4388 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
   b4384:	4798      	blx	r3
   b4386:	e7b0      	b.n	b42ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
   b4388:	f000 fd9d 	bl	b4ec6 <BlynkWidgetWrite>
    } break;
   b438c:	e7ad      	b.n	b42ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   b438e:	bf00      	nop
   b4390:	000b8a50 	.word	0x000b8a50
   b4394:	000b8a53 	.word	0x000b8a53
   b4398:	000b8a5b 	.word	0x000b8a5b
   b439c:	000b8a5e 	.word	0x000b8a5e
   b43a0:	000b4ec5 	.word	0x000b4ec5
   b43a4:	000b4ec7 	.word	0x000b4ec7
   b43a8:	000b8a57 	.word	0x000b8a57

000b43ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b43ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b43b0:	b08c      	sub	sp, #48	; 0x30
   b43b2:	af04      	add	r7, sp, #16
   b43b4:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b43b6:	2205      	movs	r2, #5
   b43b8:	6800      	ldr	r0, [r0, #0]
   b43ba:	1d39      	adds	r1, r7, #4
   b43bc:	f003 f83b 	bl	b7436 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b43c0:	b398      	cbz	r0, b442a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b43c2:	2805      	cmp	r0, #5
   b43c4:	d004      	beq.n	b43d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b43c6:	2000      	movs	r0, #0
}
   b43c8:	3720      	adds	r7, #32
   b43ca:	46bd      	mov	sp, r7
   b43cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
   b43d0:	f8b7 3005 	ldrh.w	r3, [r7, #5]
   b43d4:	ba5b      	rev16	r3, r3
   b43d6:	b29a      	uxth	r2, r3
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b43d8:	f8a7 3005 	strh.w	r3, [r7, #5]
   b43dc:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b43e0:	ba5b      	rev16	r3, r3
   b43e2:	fa1f f883 	uxth.w	r8, r3
    hdr.length = ntohs(hdr.length);
   b43e6:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   b43ea:	2a00      	cmp	r2, #0
   b43ec:	d0eb      	beq.n	b43c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b43ee:	793b      	ldrb	r3, [r7, #4]
   b43f0:	bb23      	cbnz	r3, b443c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
        lastActivityIn = BlynkMillis();
   b43f2:	f000 fd81 	bl	b4ef8 <_Z11BlynkMillisv>
   b43f6:	4602      	mov	r2, r0
   b43f8:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b43fa:	7f60      	ldrb	r0, [r4, #29]
   b43fc:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4400:	b9c0      	cbnz	r0, b4434 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
   b4402:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b4406:	2901      	cmp	r1, #1
   b4408:	d114      	bne.n	b4434 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
            switch (hdr.length) {
   b440a:	2b09      	cmp	r3, #9
   b440c:	d00f      	beq.n	b442e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
   b440e:	2bc8      	cmp	r3, #200	; 0xc8
   b4410:	d001      	beq.n	b4416 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6a>
   b4412:	2b04      	cmp	r3, #4
   b4414:	d1d8      	bne.n	b43c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b4416:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b4418:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   b441a:	4620      	mov	r0, r4
                state = CONNECTED;
   b441c:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   b441e:	f000 fb1d 	bl	b4a5c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b4422:	f7ff fe53 	bl	b40cc <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   b4426:	f000 fd4f 	bl	b4ec8 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b442a:	2001      	movs	r0, #1
   b442c:	e7cc      	b.n	b43c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b442e:	2303      	movs	r3, #3
   b4430:	7763      	strb	r3, [r4, #29]
                break;
   b4432:	e7c9      	b.n	b43c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b4434:	1f58      	subs	r0, r3, #5
   b4436:	bf18      	it	ne
   b4438:	2001      	movne	r0, #1
   b443a:	e7c5      	b.n	b43c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b443c:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   b4440:	d903      	bls.n	b444a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x9e>
        internalReconnect();
   b4442:	4620      	mov	r0, r4
   b4444:	f7ff fea8 	bl	b4198 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b4448:	e7ef      	b.n	b442a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b444a:	f108 0308 	add.w	r3, r8, #8
   b444e:	466e      	mov	r6, sp
   b4450:	08db      	lsrs	r3, r3, #3
   b4452:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
   b4456:	469d      	mov	sp, r3
   b4458:	ad04      	add	r5, sp, #16
   b445a:	6820      	ldr	r0, [r4, #0]
   b445c:	4642      	mov	r2, r8
   b445e:	4629      	mov	r1, r5
   b4460:	f002 ffe9 	bl	b7436 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b4464:	4580      	cmp	r8, r0
   b4466:	f04f 0000 	mov.w	r0, #0
   b446a:	d17f      	bne.n	b456c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
    inputBuffer[hdr.length] = '\0';
   b446c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4470:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b4472:	f000 fd41 	bl	b4ef8 <_Z11BlynkMillisv>
    switch (hdr.type)
   b4476:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b4478:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   b447a:	2b14      	cmp	r3, #20
   b447c:	f000 80a6 	beq.w	b45cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
   b4480:	d848      	bhi.n	b4514 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x168>
   b4482:	2b0f      	cmp	r3, #15
   b4484:	f000 80a2 	beq.w	b45cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
   b4488:	d807      	bhi.n	b449a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
   b448a:	2b02      	cmp	r3, #2
   b448c:	d048      	beq.n	b4520 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
   b448e:	2b06      	cmp	r3, #6
   b4490:	d051      	beq.n	b4536 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18a>
        internalReconnect();
   b4492:	4620      	mov	r0, r4
   b4494:	f7ff fe80 	bl	b4198 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b4498:	e058      	b.n	b454c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
    switch (hdr.type)
   b449a:	2b11      	cmp	r3, #17
   b449c:	d1f9      	bne.n	b4492 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        BlynkReq req = { 0 };
   b449e:	2300      	movs	r3, #0
   b44a0:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b44a2:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b44a6:	442b      	add	r3, r5
        if (it >= param.end())
   b44a8:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b44aa:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b44ae:	d24d      	bcs.n	b454c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
        ++it;
   b44b0:	f107 000c 	add.w	r0, r7, #12
   b44b4:	f8d5 8000 	ldr.w	r8, [r5]
   b44b8:	f7ff fe1e 	bl	b40f8 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b44bc:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b44be:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b44c2:	1b5d      	subs	r5, r3, r5
   b44c4:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b44c6:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b44ca:	687b      	ldr	r3, [r7, #4]
   b44cc:	61fd      	str	r5, [r7, #28]
   b44ce:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b44d2:	8363      	strh	r3, [r4, #26]
   b44d4:	4b64      	ldr	r3, [pc, #400]	; (b4668 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2bc>)
   b44d6:	4598      	cmp	r8, r3
   b44d8:	f000 80bf 	beq.w	b465a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2ae>
   b44dc:	f200 808c 	bhi.w	b45f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24c>
   b44e0:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b44e4:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b44e8:	4413      	add	r3, r2
   b44ea:	4598      	cmp	r8, r3
   b44ec:	f000 809d 	beq.w	b462a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x27e>
   b44f0:	d879      	bhi.n	b45e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23a>
   b44f2:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b44f6:	3b06      	subs	r3, #6
   b44f8:	4598      	cmp	r8, r3
   b44fa:	f000 809c 	beq.w	b4636 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28a>
   b44fe:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b4502:	3303      	adds	r3, #3
   b4504:	4598      	cmp	r8, r3
   b4506:	d16b      	bne.n	b45e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b4508:	f107 0114 	add.w	r1, r7, #20
   b450c:	4638      	mov	r0, r7
   b450e:	f000 fcda 	bl	b4ec6 <BlynkWidgetWrite>
   b4512:	e065      	b.n	b45e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
    switch (hdr.type)
   b4514:	2b29      	cmp	r3, #41	; 0x29
   b4516:	d01b      	beq.n	b4550 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b4518:	2b37      	cmp	r3, #55	; 0x37
   b451a:	d017      	beq.n	b454c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b451c:	2b1d      	cmp	r3, #29
   b451e:	d1b8      	bne.n	b4492 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        if (state == CONNECTING) {
   b4520:	7f63      	ldrb	r3, [r4, #29]
   b4522:	b943      	cbnz	r3, b4536 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18a>
            state = CONNECTED;
   b4524:	2301      	movs	r3, #1
   b4526:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   b4528:	4620      	mov	r0, r4
   b452a:	f000 fa97 	bl	b4a5c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b452e:	f7ff fdcd 	bl	b40cc <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   b4532:	f000 fcc9 	bl	b4ec8 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b4536:	2300      	movs	r3, #0
   b4538:	21c8      	movs	r1, #200	; 0xc8
   b453a:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b453e:	9100      	str	r1, [sp, #0]
   b4540:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4544:	4619      	mov	r1, r3
   b4546:	4620      	mov	r0, r4
   b4548:	f000 f9a6 	bl	b4898 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b454c:	2001      	movs	r0, #1
   b454e:	e00d      	b.n	b456c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        if (!redir_serv) {
   b4550:	68a3      	ldr	r3, [r4, #8]
   b4552:	b91b      	cbnz	r3, b455c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b0>
             redir_serv = (char*)malloc(64);
   b4554:	2040      	movs	r0, #64	; 0x40
   b4556:	f002 f8cf 	bl	b66f8 <malloc>
   b455a:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   b455c:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b4560:	44a8      	add	r8, r5
        if (it >= param.end())
   b4562:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4564:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b4568:	d302      	bcc.n	b4570 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
            return false;
   b456a:	2000      	movs	r0, #0
   b456c:	46b5      	mov	sp, r6
   b456e:	e72b      	b.n	b43c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b4570:	4629      	mov	r1, r5
   b4572:	2240      	movs	r2, #64	; 0x40
   b4574:	68a0      	ldr	r0, [r4, #8]
   b4576:	f004 f94d 	bl	b8814 <strncpy>
        redir_serv[63] = '\0';
   b457a:	68a3      	ldr	r3, [r4, #8]
   b457c:	2500      	movs	r5, #0
   b457e:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b4582:	f107 0014 	add.w	r0, r7, #20
   b4586:	f7ff fdb7 	bl	b40f8 <_ZN10BlynkParam8iteratorppEv>
   b458a:	6803      	ldr	r3, [r0, #0]
   b458c:	4598      	cmp	r8, r3
   b458e:	d91b      	bls.n	b45c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21c>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4590:	6978      	ldr	r0, [r7, #20]
   b4592:	b120      	cbz	r0, b459e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f2>
   b4594:	69bb      	ldr	r3, [r7, #24]
   b4596:	4298      	cmp	r0, r3
   b4598:	d214      	bcs.n	b45c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x218>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b459a:	f004 f8e1 	bl	b8760 <atol>
            redir_port = it.asLong();
   b459e:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b45a0:	6820      	ldr	r0, [r4, #0]
   b45a2:	f002 fc63 	bl	b6e6c <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b45a6:	6823      	ldr	r3, [r4, #0]
   b45a8:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   b45aa:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b45ac:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b45ae:	2300      	movs	r3, #0
   b45b0:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b45b2:	f000 fca1 	bl	b4ef8 <_Z11BlynkMillisv>
   b45b6:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b45ba:	3808      	subs	r0, #8
   b45bc:	e9c4 0003 	strd	r0, r0, [r4, #12]
   b45c0:	6160      	str	r0, [r4, #20]
   b45c2:	e7c3      	b.n	b454c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b45c4:	4628      	mov	r0, r5
   b45c6:	e7ea      	b.n	b459e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f2>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b45c8:	2550      	movs	r5, #80	; 0x50
   b45ca:	e7e9      	b.n	b45a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f4>
        msgIdOutOverride = hdr.msg_id;
   b45cc:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b45ce:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b45d2:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b45d6:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   b45d8:	4629      	mov	r1, r5
   b45da:	4620      	mov	r0, r4
   b45dc:	f7ff fde6 	bl	b41ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b45e0:	2300      	movs	r3, #0
   b45e2:	8363      	strh	r3, [r4, #26]
   b45e4:	e7b2      	b.n	b454c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b45e6:	4b21      	ldr	r3, [pc, #132]	; (b466c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b45e8:	4598      	cmp	r8, r3
   b45ea:	d1f9      	bne.n	b45e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b45ec:	f107 0114 	add.w	r1, r7, #20
   b45f0:	4638      	mov	r0, r7
   b45f2:	f000 fc68 	bl	b4ec6 <BlynkWidgetWrite>
   b45f6:	e7f3      	b.n	b45e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   b45f8:	4b1d      	ldr	r3, [pc, #116]	; (b4670 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   b45fa:	4598      	cmp	r8, r3
   b45fc:	d021      	beq.n	b4642 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x296>
   b45fe:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b4602:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b4606:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b460a:	4598      	cmp	r8, r3
   b460c:	d01f      	beq.n	b464e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a2>
   b460e:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b4612:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b4616:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b461a:	4598      	cmp	r8, r3
   b461c:	d1e0      	bne.n	b45e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b461e:	f107 0114 	add.w	r1, r7, #20
   b4622:	4638      	mov	r0, r7
   b4624:	f000 fc4f 	bl	b4ec6 <BlynkWidgetWrite>
   b4628:	e7da      	b.n	b45e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b462a:	f107 0114 	add.w	r1, r7, #20
   b462e:	4638      	mov	r0, r7
   b4630:	f000 fc49 	bl	b4ec6 <BlynkWidgetWrite>
   b4634:	e7d4      	b.n	b45e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b4636:	f107 0114 	add.w	r1, r7, #20
   b463a:	4638      	mov	r0, r7
   b463c:	f000 fc43 	bl	b4ec6 <BlynkWidgetWrite>
   b4640:	e7ce      	b.n	b45e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b4642:	f107 0114 	add.w	r1, r7, #20
   b4646:	4638      	mov	r0, r7
   b4648:	f000 fc3d 	bl	b4ec6 <BlynkWidgetWrite>
   b464c:	e7c8      	b.n	b45e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b464e:	f107 0114 	add.w	r1, r7, #20
   b4652:	4638      	mov	r0, r7
   b4654:	f000 fc37 	bl	b4ec6 <BlynkWidgetWrite>
   b4658:	e7c2      	b.n	b45e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b465a:	f107 0114 	add.w	r1, r7, #20
   b465e:	4638      	mov	r0, r7
   b4660:	f000 fc31 	bl	b4ec6 <BlynkWidgetWrite>
   b4664:	e7bc      	b.n	b45e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   b4666:	bf00      	nop
   b4668:	00736676 	.word	0x00736676
   b466c:	00676264 	.word	0x00676264
   b4670:	6e6f6361 	.word	0x6e6f6361

000b4674 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b4674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4678:	4604      	mov	r4, r0
   b467a:	b08c      	sub	sp, #48	; 0x30
   b467c:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b467e:	f7ff fd25 	bl	b40cc <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   b4682:	7f63      	ldrb	r3, [r4, #29]
   b4684:	2b02      	cmp	r3, #2
   b4686:	d01e      	beq.n	b46c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x52>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b4688:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   b468a:	8b62      	ldrh	r2, [r4, #26]
   b468c:	3301      	adds	r3, #1
   b468e:	b2db      	uxtb	r3, r3
   b4690:	7723      	strb	r3, [r4, #28]
   b4692:	b9aa      	cbnz	r2, b46c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b4694:	2b02      	cmp	r3, #2
   b4696:	d813      	bhi.n	b46c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b4698:	6820      	ldr	r0, [r4, #0]
   b469a:	f002 faaf 	bl	b6bfc <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b469e:	b1a8      	cbz	r0, b46cc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
        while (avail || conn.available() > 0) {
   b46a0:	b925      	cbnz	r5, b46ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x38>
    int available() { return client.available(); }
   b46a2:	6820      	ldr	r0, [r4, #0]
   b46a4:	f002 fb88 	bl	b6db8 <_ZN9TCPClient9availableEv>
   b46a8:	2800      	cmp	r0, #0
   b46aa:	dd0f      	ble.n	b46cc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
            if (!processInput()) {
   b46ac:	4620      	mov	r0, r4
   b46ae:	f7ff fe7d 	bl	b43ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b46b2:	2800      	cmp	r0, #0
   b46b4:	d1f5      	bne.n	b46a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2e>
    void disconnect() { client.stop(); }
   b46b6:	6820      	ldr	r0, [r4, #0]
   b46b8:	f002 fbd8 	bl	b6e6c <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b46bc:	f000 fc04 	bl	b4ec8 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b46c0:	7f23      	ldrb	r3, [r4, #28]
   b46c2:	3b01      	subs	r3, #1
   b46c4:	7723      	strb	r3, [r4, #28]
}
   b46c6:	b00c      	add	sp, #48	; 0x30
   b46c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   b46cc:	f000 fc14 	bl	b4ef8 <_Z11BlynkMillisv>
   b46d0:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b46d2:	6820      	ldr	r0, [r4, #0]
   b46d4:	f002 fa92 	bl	b6bfc <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b46d8:	7f67      	ldrb	r7, [r4, #29]
   b46da:	2f01      	cmp	r7, #1
   b46dc:	4606      	mov	r6, r0
   b46de:	d124      	bne.n	b472a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb6>
        if (!tconn) {
   b46e0:	b920      	cbnz	r0, b46ec <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x78>
            lastHeartbeat = t;
   b46e2:	6165      	str	r5, [r4, #20]
            internalReconnect();
   b46e4:	4620      	mov	r0, r4
   b46e6:	f7ff fd57 	bl	b4198 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b46ea:	e7e9      	b.n	b46c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b46ec:	68e3      	ldr	r3, [r4, #12]
   b46ee:	f24f 6218 	movw	r2, #63000	; 0xf618
   b46f2:	1aeb      	subs	r3, r5, r3
   b46f4:	4293      	cmp	r3, r2
   b46f6:	d8f5      	bhi.n	b46e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x70>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b46f8:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b46fc:	4293      	cmp	r3, r2
   b46fe:	d803      	bhi.n	b4708 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x94>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4700:	6923      	ldr	r3, [r4, #16]
   b4702:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b4704:	4293      	cmp	r3, r2
   b4706:	d9db      	bls.n	b46c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4708:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b470a:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b470e:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4710:	4293      	cmp	r3, r2
   b4712:	d9d5      	bls.n	b46c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
            sendCmd(BLYNK_CMD_PING);
   b4714:	2300      	movs	r3, #0
   b4716:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b471a:	9300      	str	r3, [sp, #0]
   b471c:	461a      	mov	r2, r3
   b471e:	2106      	movs	r1, #6
   b4720:	4620      	mov	r0, r4
   b4722:	f000 f8b9 	bl	b4898 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b4726:	6165      	str	r5, [r4, #20]
                return false;
   b4728:	e7ca      	b.n	b46c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    } else if (state == CONNECTING) {
   b472a:	2f00      	cmp	r7, #0
   b472c:	d1c8      	bne.n	b46c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b472e:	6963      	ldr	r3, [r4, #20]
   b4730:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b4732:	b140      	cbz	r0, b4746 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xd2>
   b4734:	f241 7270 	movw	r2, #6000	; 0x1770
   b4738:	4293      	cmp	r3, r2
   b473a:	d9c1      	bls.n	b46c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    void disconnect() { client.stop(); }
   b473c:	6820      	ldr	r0, [r4, #0]
   b473e:	f002 fb95 	bl	b6e6c <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b4742:	7767      	strb	r7, [r4, #29]
            return false;
   b4744:	e7bc      	b.n	b46c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b4746:	f241 3288 	movw	r2, #5000	; 0x1388
   b474a:	4293      	cmp	r3, r2
   b474c:	d9b8      	bls.n	b46c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b474e:	6820      	ldr	r0, [r4, #0]
   b4750:	f002 fb8c 	bl	b6e6c <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b4754:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   b4758:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   b475c:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   b4760:	f1be 0f00 	cmp.w	lr, #0
   b4764:	d01b      	beq.n	b479e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12a>
            return (1 == client.connect(domain, port));
   b4766:	4633      	mov	r3, r6
   b4768:	4642      	mov	r2, r8
   b476a:	4671      	mov	r1, lr
   b476c:	4660      	mov	r0, ip
   b476e:	f002 f9c7 	bl	b6b00 <_ZN9TCPClient7connectEPKctm>
   b4772:	2801      	cmp	r0, #1
   b4774:	d1d7      	bne.n	b4726 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb2>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4776:	6863      	ldr	r3, [r4, #4]
   b4778:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b477a:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b477c:	4618      	mov	r0, r3
            msgIdOut = 1;
   b477e:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4780:	f004 f840 	bl	b8804 <strlen>
   b4784:	2200      	movs	r2, #0
   b4786:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b478a:	9b05      	ldr	r3, [sp, #20]
   b478c:	9000      	str	r0, [sp, #0]
   b478e:	462a      	mov	r2, r5
   b4790:	211d      	movs	r1, #29
   b4792:	4620      	mov	r0, r4
   b4794:	f000 f880 	bl	b4898 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b4798:	6923      	ldr	r3, [r4, #16]
   b479a:	6163      	str	r3, [r4, #20]
            return true;
   b479c:	e790      	b.n	b46c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b479e:	4b08      	ldr	r3, [pc, #32]	; (b47c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x14c>)
   b47a0:	9306      	str	r3, [sp, #24]
   b47a2:	f10c 0720 	add.w	r7, ip, #32
   b47a6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b47a8:	ae07      	add	r6, sp, #28
   b47aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b47ac:	683b      	ldr	r3, [r7, #0]
   b47ae:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   b47b0:	4642      	mov	r2, r8
   b47b2:	4673      	mov	r3, lr
   b47b4:	a906      	add	r1, sp, #24
   b47b6:	4660      	mov	r0, ip
   b47b8:	f002 fa82 	bl	b6cc0 <_ZN9TCPClient7connectE9IPAddresstm>
   b47bc:	e7d9      	b.n	b4772 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>
   b47be:	bf00      	nop
   b47c0:	000b9bec 	.word	0x000b9bec

000b47c4 <setup>:
  doDisplayStuff(xpos - (100 * 2), ypos, fahrenheit);
}

// setup() runs once, when the device is first turned on.
void setup()
{
   b47c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b47c8:	b094      	sub	sp, #80	; 0x50
  // Put initialization like pinMode and begin functions here.
  Blynk.begin("QnAwxbXEtUAXJ_pHkObTkMagiLke5zMZ", IPAddress(167, 172, 234, 162), 8080);
   b47ca:	23a2      	movs	r3, #162	; 0xa2
   b47cc:	22ac      	movs	r2, #172	; 0xac
   b47ce:	21a7      	movs	r1, #167	; 0xa7
   b47d0:	9300      	str	r3, [sp, #0]
   b47d2:	a802      	add	r0, sp, #8
   b47d4:	23ea      	movs	r3, #234	; 0xea
   b47d6:	f002 fd4d 	bl	b7274 <_ZN9IPAddressC1Ehhhh>
   b47da:	ac03      	add	r4, sp, #12

    void begin( const char* auth,
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b47dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b47e0:	f000 fb88 	bl	b4ef4 <_Z10BlynkDelaym>
   b47e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b47e6:	af09      	add	r7, sp, #36	; 0x24
   b47e8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
        this->authkey = auth;
   b47ea:	4d28      	ldr	r5, [pc, #160]	; (b488c <setup+0xc8>)
   b47ec:	6823      	ldr	r3, [r4, #0]
   b47ee:	703b      	strb	r3, [r7, #0]
   b47f0:	4b27      	ldr	r3, [pc, #156]	; (b4890 <setup+0xcc>)
   b47f2:	606b      	str	r3, [r5, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b47f4:	f000 fb80 	bl	b4ef8 <_Z11BlynkMillisv>
   b47f8:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b47fc:	3808      	subs	r0, #8
   b47fe:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   b4802:	e9c5 0003 	strd	r0, r0, [r5, #12]
   b4806:	6168      	str	r0, [r5, #20]
   b4808:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b480c:	ae0f      	add	r6, sp, #60	; 0x3c
   b480e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   b4810:	682c      	ldr	r4, [r5, #0]
   b4812:	683b      	ldr	r3, [r7, #0]
   b4814:	7033      	strb	r3, [r6, #0]
   b4816:	af0f      	add	r7, sp, #60	; 0x3c
        port = p;
   b4818:	f641 7390 	movw	r3, #8080	; 0x1f90
   b481c:	8723      	strh	r3, [r4, #56]	; 0x38
   b481e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        domain = NULL;
   b4820:	f04f 0800 	mov.w	r8, #0
   b4824:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   b4828:	3420      	adds	r4, #32
   b482a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b482c:	6833      	ldr	r3, [r6, #0]
   b482e:	7023      	strb	r3, [r4, #0]
        while ((state != CONNECTED) &&
   b4830:	f244 664f 	movw	r6, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b4834:	6828      	ldr	r0, [r5, #0]
   b4836:	f002 fb19 	bl	b6e6c <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b483a:	f885 801d 	strb.w	r8, [r5, #29]
        millis_time_t started = BlynkMillis();
   b483e:	f000 fb5b 	bl	b4ef8 <_Z11BlynkMillisv>
   b4842:	4604      	mov	r4, r0
        while ((state != CONNECTED) &&
   b4844:	7f6b      	ldrb	r3, [r5, #29]
   b4846:	2b01      	cmp	r3, #1
   b4848:	d00c      	beq.n	b4864 <setup+0xa0>
               (BlynkMillis() - started < timeout))
   b484a:	f000 fb55 	bl	b4ef8 <_Z11BlynkMillisv>
   b484e:	1b00      	subs	r0, r0, r4
        while ((state != CONNECTED) &&
   b4850:	42b0      	cmp	r0, r6
   b4852:	d804      	bhi.n	b485e <setup+0x9a>
            run();
   b4854:	2100      	movs	r1, #0
   b4856:	4628      	mov	r0, r5
   b4858:	f7ff ff0c 	bl	b4674 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b485c:	e7f2      	b.n	b4844 <setup+0x80>
        config(auth, addr, port);
        while(this->connect() != true) {}
   b485e:	7f6b      	ldrb	r3, [r5, #29]
   b4860:	2b01      	cmp	r3, #1
   b4862:	d1e7      	bne.n	b4834 <setup+0x70>
  pinMode(A5, INPUT_PULLDOWN);
   b4864:	2103      	movs	r1, #3
   b4866:	200e      	movs	r0, #14
   b4868:	f003 f92e 	bl	b7ac8 <pinMode>
  display.setup();
   b486c:	4809      	ldr	r0, [pc, #36]	; (b4894 <setup+0xd0>)
   b486e:	f001 f899 	bl	b59a4 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   b4872:	4808      	ldr	r0, [pc, #32]	; (b4894 <setup+0xd0>)
   b4874:	f000 fcf4 	bl	b5260 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b4878:	4806      	ldr	r0, [pc, #24]	; (b4894 <setup+0xd0>)
   b487a:	f000 ff5f 	bl	b573c <_ZN16Adafruit_SSD13067displayEv>
  pinMode(TMP36, INPUT);
   b487e:	2100      	movs	r1, #0
   b4880:	2013      	movs	r0, #19
  // Serial.begin(115200);
}
   b4882:	b014      	add	sp, #80	; 0x50
   b4884:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  pinMode(TMP36, INPUT);
   b4888:	f003 b91e 	b.w	b7ac8 <pinMode>
   b488c:	2003e5c8 	.word	0x2003e5c8
   b4890:	000b8a61 	.word	0x000b8a61
   b4894:	2003e634 	.word	0x2003e634

000b4898 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b4898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b489c:	b083      	sub	sp, #12
   b489e:	af00      	add	r7, sp, #0
   b48a0:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b48a2:	6800      	ldr	r0, [r0, #0]
   b48a4:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   b48a6:	4688      	mov	r8, r1
   b48a8:	4616      	mov	r6, r2
   b48aa:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b48ac:	46eb      	mov	fp, sp
   b48ae:	f002 f9a5 	bl	b6bfc <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b48b2:	2800      	cmp	r0, #0
   b48b4:	d07f      	beq.n	b49b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   b48b6:	f1b8 0f1d 	cmp.w	r8, #29
   b48ba:	d804      	bhi.n	b48c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   b48bc:	4b4c      	ldr	r3, [pc, #304]	; (b49f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   b48be:	fa23 f308 	lsr.w	r3, r3, r8
   b48c2:	07db      	lsls	r3, r3, #31
   b48c4:	d402      	bmi.n	b48cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   b48c6:	7f63      	ldrb	r3, [r4, #29]
   b48c8:	2b01      	cmp	r3, #1
   b48ca:	d174      	bne.n	b49b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   b48cc:	b946      	cbnz	r6, b48e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b48ce:	8b66      	ldrh	r6, [r4, #26]
   b48d0:	b936      	cbnz	r6, b48e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b48d2:	8b23      	ldrh	r3, [r4, #24]
   b48d4:	3301      	adds	r3, #1
   b48d6:	b29b      	uxth	r3, r3
   b48d8:	2b00      	cmp	r3, #0
   b48da:	d071      	beq.n	b49c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   b48dc:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   b48de:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   b48e0:	f1a8 030c 	sub.w	r3, r8, #12
   b48e4:	2b08      	cmp	r3, #8
   b48e6:	d816      	bhi.n	b4916 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b48e8:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   b48ec:	4293      	cmp	r3, r2
   b48ee:	bf38      	it	cc
   b48f0:	4613      	movcc	r3, r2
   b48f2:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b48f6:	f000 faff 	bl	b4ef8 <_Z11BlynkMillisv>
   b48fa:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   b48fe:	2800      	cmp	r0, #0
   b4900:	db60      	blt.n	b49c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   b4902:	2100      	movs	r1, #0
   b4904:	4620      	mov	r0, r4
   b4906:	f7ff feb5 	bl	b4674 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b490a:	f000 faf5 	bl	b4ef8 <_Z11BlynkMillisv>
   b490e:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   b4912:	2800      	cmp	r0, #0
   b4914:	daf5      	bge.n	b4902 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4916:	f1b9 0f00 	cmp.w	r9, #0
   b491a:	d05a      	beq.n	b49d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   b491c:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b491e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   b4920:	2a00      	cmp	r2, #0
   b4922:	6bba      	ldr	r2, [r7, #56]	; 0x38
   b4924:	bf08      	it	eq
   b4926:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4928:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   b492c:	f10a 0307 	add.w	r3, sl, #7
   b4930:	f023 0307 	bic.w	r3, r3, #7
   b4934:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   b4938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   b493a:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   b493e:	18ea      	adds	r2, r5, r3
   b4940:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   b4944:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   b4946:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   b494a:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   b494e:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   b4952:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   b4956:	f1b9 0f00 	cmp.w	r9, #0
   b495a:	d03c      	beq.n	b49d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   b495c:	2d00      	cmp	r5, #0
   b495e:	d03a      	beq.n	b49d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   b4960:	462a      	mov	r2, r5
   b4962:	4649      	mov	r1, r9
   b4964:	f10d 0005 	add.w	r0, sp, #5
   b4968:	f003 fefe 	bl	b8768 <memcpy>
        pos += length;
   b496c:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b496e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b4970:	b13b      	cbz	r3, b4982 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   b4972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   b4974:	b12b      	cbz	r3, b4982 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   b4976:	461a      	mov	r2, r3
   b4978:	687b      	ldr	r3, [r7, #4]
   b497a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   b497c:	4418      	add	r0, r3
   b497e:	f003 fef3 	bl	b8768 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b4982:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b4984:	4555      	cmp	r5, sl
   b4986:	d22a      	bcs.n	b49de <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b4988:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   b498c:	687b      	ldr	r3, [r7, #4]
   b498e:	6820      	ldr	r0, [r4, #0]
   b4990:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b4994:	bf28      	it	cs
   b4996:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b499a:	1959      	adds	r1, r3, r5
   b499c:	f001 ffe1 	bl	b6962 <_ZN9TCPClient5writeEPKhj>
   b49a0:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b49a2:	2000      	movs	r0, #0
   b49a4:	f000 faa6 	bl	b4ef4 <_Z10BlynkDelaym>
        if (w == 0) {
   b49a8:	b9be      	cbnz	r6, b49da <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   b49aa:	6820      	ldr	r0, [r4, #0]
   b49ac:	f002 fa5e 	bl	b6e6c <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b49b0:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   b49b2:	f000 fa89 	bl	b4ec8 <BlynkNoOpCbk>
}
   b49b6:	370c      	adds	r7, #12
   b49b8:	46dd      	mov	sp, fp
   b49ba:	46bd      	mov	sp, r7
   b49bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   b49c0:	2301      	movs	r3, #1
   b49c2:	e78b      	b.n	b48dc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   b49c4:	7f21      	ldrb	r1, [r4, #28]
   b49c6:	2900      	cmp	r1, #0
   b49c8:	d1a5      	bne.n	b4916 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   b49ca:	4620      	mov	r0, r4
   b49cc:	f7ff fe52 	bl	b4674 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b49d0:	e7a1      	b.n	b4916 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b49d2:	2305      	movs	r3, #5
   b49d4:	e7a3      	b.n	b491e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   b49d6:	2005      	movs	r0, #5
   b49d8:	e7c9      	b.n	b496e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   b49da:	4435      	add	r5, r6
    while (wlen < full_length) {
   b49dc:	e7d2      	b.n	b4984 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   b49de:	d003      	beq.n	b49e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   b49e0:	4620      	mov	r0, r4
   b49e2:	f7ff fbd9 	bl	b4198 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b49e6:	e7e6      	b.n	b49b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   b49e8:	f000 fa86 	bl	b4ef8 <_Z11BlynkMillisv>
   b49ec:	6120      	str	r0, [r4, #16]
   b49ee:	e7e2      	b.n	b49b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   b49f0:	20000045 	.word	0x20000045

000b49f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA22_cEEvRKT_>:
    }

    // Please use Blynk.logEvent("event", "Description")
    template<typename T>
    BLYNK_DEPRECATED
    void notify(const T& msg) {
   b49f4:	b530      	push	{r4, r5, lr}
   b49f6:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   b49fa:	ab08      	add	r3, sp, #32
   b49fc:	2400      	movs	r4, #0
   b49fe:	4605      	mov	r5, r0
   b4a00:	9305      	str	r3, [sp, #20]
#if defined(BLYNK_TEMPLATE_ID)
        logEvent("notify", msg);
#else
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(msg);
   b4a02:	a805      	add	r0, sp, #20
   b4a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b4a08:	e9cd 4306 	strd	r4, r3, [sp, #24]
   b4a0c:	f7ff fb83 	bl	b4116 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_NOTIFY, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4a10:	9b06      	ldr	r3, [sp, #24]
   b4a12:	3b01      	subs	r3, #1
   b4a14:	9300      	str	r3, [sp, #0]
   b4a16:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4a1a:	9b05      	ldr	r3, [sp, #20]
   b4a1c:	4622      	mov	r2, r4
   b4a1e:	210e      	movs	r1, #14
   b4a20:	4628      	mov	r0, r5
   b4a22:	f7ff ff39 	bl	b4898 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    }
   b4a26:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b4a2a:	bd30      	pop	{r4, r5, pc}

000b4a2c <BlynkWidgetWrite0>:
{
   b4a2c:	b510      	push	{r4, lr}
   b4a2e:	460c      	mov	r4, r1
  Serial.println("Button Tapped");
   b4a30:	f002 fb7c 	bl	b712c <_Z16_fetch_usbserialv>
   b4a34:	4906      	ldr	r1, [pc, #24]	; (b4a50 <BlynkWidgetWrite0+0x24>)
   b4a36:	f002 fd56 	bl	b74e6 <_ZN5Print7printlnEPKc>
    int         asInt() const       { return atoi(buff); }
   b4a3a:	6820      	ldr	r0, [r4, #0]
   b4a3c:	f003 fe8c 	bl	b8758 <atoi>
  if (param.asInt() == 1)
   b4a40:	2801      	cmp	r0, #1
   b4a42:	d103      	bne.n	b4a4c <BlynkWidgetWrite0+0x20>
    Blynk.notify("Hey, Blynk push here!");
   b4a44:	4903      	ldr	r1, [pc, #12]	; (b4a54 <BlynkWidgetWrite0+0x28>)
   b4a46:	4804      	ldr	r0, [pc, #16]	; (b4a58 <BlynkWidgetWrite0+0x2c>)
   b4a48:	f7ff ffd4 	bl	b49f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA22_cEEvRKT_>
}
   b4a4c:	bd10      	pop	{r4, pc}
   b4a4e:	bf00      	nop
   b4a50:	000b8a82 	.word	0x000b8a82
   b4a54:	000b8a90 	.word	0x000b8a90
   b4a58:	2003e5c8 	.word	0x2003e5c8

000b4a5c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b4a5c:	b500      	push	{lr}
   b4a5e:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   b4a60:	ab04      	add	r3, sp, #16
   b4a62:	2200      	movs	r2, #0
   b4a64:	9301      	str	r3, [sp, #4]
   b4a66:	234f      	movs	r3, #79	; 0x4f
   b4a68:	9300      	str	r3, [sp, #0]
   b4a6a:	9202      	str	r2, [sp, #8]
   b4a6c:	4b03      	ldr	r3, [pc, #12]	; (b4a7c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   b4a6e:	2111      	movs	r1, #17
   b4a70:	f7ff ff12 	bl	b4898 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b4a74:	b015      	add	sp, #84	; 0x54
   b4a76:	f85d fb04 	ldr.w	pc, [sp], #4
   b4a7a:	bf00      	nop
   b4a7c:	000b8ad4 	.word	0x000b8ad4

000b4a80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA28_cEEvRKT_>:
    void notify(const T& msg) {
   b4a80:	b530      	push	{r4, r5, lr}
   b4a82:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4a86:	ab08      	add	r3, sp, #32
   b4a88:	2400      	movs	r4, #0
   b4a8a:	4605      	mov	r5, r0
   b4a8c:	9305      	str	r3, [sp, #20]
        cmd.add(msg);
   b4a8e:	a805      	add	r0, sp, #20
   b4a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b4a94:	e9cd 4306 	strd	r4, r3, [sp, #24]
   b4a98:	f7ff fb3d 	bl	b4116 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_NOTIFY, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4a9c:	9b06      	ldr	r3, [sp, #24]
   b4a9e:	3b01      	subs	r3, #1
   b4aa0:	9300      	str	r3, [sp, #0]
   b4aa2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4aa6:	9b05      	ldr	r3, [sp, #20]
   b4aa8:	4622      	mov	r2, r4
   b4aaa:	210e      	movs	r1, #14
   b4aac:	4628      	mov	r0, r5
   b4aae:	f7ff fef3 	bl	b4898 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b4ab2:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b4ab6:	bd30      	pop	{r4, r5, pc}

000b4ab8 <_GLOBAL__sub_I_Blynk>:
  {
    Blynk.notify("THIS IS A PUSH NOTIFICATION");
    displaystate = 1;
    counting = true;
  }
   b4ab8:	b510      	push	{r4, lr}
        : domain(NULL), port(0)
   b4aba:	4c0f      	ldr	r4, [pc, #60]	; (b4af8 <_GLOBAL__sub_I_Blynk+0x40>)
SYSTEM_THREAD(ENABLED);
   b4abc:	2100      	movs	r1, #0
   b4abe:	2001      	movs	r0, #1
   b4ac0:	f001 fdfe 	bl	b66c0 <system_thread_set_state>
   b4ac4:	4620      	mov	r0, r4
   b4ac6:	f002 fa1b 	bl	b6f00 <_ZN9TCPClientC1Ev>
   b4aca:	f104 001c 	add.w	r0, r4, #28
   b4ace:	f002 fb8d 	bl	b71ec <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
   b4ad2:	4a0a      	ldr	r2, [pc, #40]	; (b4afc <_GLOBAL__sub_I_Blynk+0x44>)
OledWingAdafruit display;
   b4ad4:	480a      	ldr	r0, [pc, #40]	; (b4b00 <_GLOBAL__sub_I_Blynk+0x48>)
   b4ad6:	2300      	movs	r3, #0
   b4ad8:	e9c2 4300 	strd	r4, r3, [r2]
   b4adc:	e9c2 3302 	strd	r3, r3, [r2, #8]
   b4ae0:	e9c2 3304 	strd	r3, r3, [r2, #16]
   b4ae4:	6193      	str	r3, [r2, #24]
   b4ae6:	8393      	strh	r3, [r2, #28]
   b4ae8:	6363      	str	r3, [r4, #52]	; 0x34
   b4aea:	8723      	strh	r3, [r4, #56]	; 0x38
   b4aec:	2107      	movs	r1, #7
   b4aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
OledWingAdafruit display;
   b4af2:	f000 bf29 	b.w	b5948 <_ZN16OledWingAdafruitC1Ei>
   b4af6:	bf00      	nop
   b4af8:	2003e5e8 	.word	0x2003e5e8
   b4afc:	2003e5c8 	.word	0x2003e5c8
   b4b00:	2003e634 	.word	0x2003e634

000b4b04 <_Z14doDisplayStuffiid>:
{
   b4b04:	b5f0      	push	{r4, r5, r6, r7, lr}
  display.setCursor(20 + xcounter, 4 + ycounter);
   b4b06:	b286      	uxth	r6, r0
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4b08:	4825      	ldr	r0, [pc, #148]	; (b4ba0 <_Z14doDisplayStuffiid+0x9c>)
   b4b0a:	b28f      	uxth	r7, r1
   b4b0c:	f106 0314 	add.w	r3, r6, #20
   b4b10:	8203      	strh	r3, [r0, #16]
   b4b12:	1d3b      	adds	r3, r7, #4
   b4b14:	8243      	strh	r3, [r0, #18]
  display.drawFastHLine(15 + xcounter, 0 + ycounter, 96, color);
   b4b16:	f106 030f 	add.w	r3, r6, #15
{
   b4b1a:	460c      	mov	r4, r1
  display.drawFastHLine(15 + xcounter, 0 + ycounter, 96, color);
   b4b1c:	b219      	sxth	r1, r3
   b4b1e:	4b21      	ldr	r3, [pc, #132]	; (b4ba4 <_Z14doDisplayStuffiid+0xa0>)
{
   b4b20:	b087      	sub	sp, #28
  display.drawFastHLine(15 + xcounter, 0 + ycounter, 96, color);
   b4b22:	781d      	ldrb	r5, [r3, #0]
   b4b24:	9500      	str	r5, [sp, #0]
   b4b26:	b224      	sxth	r4, r4
   b4b28:	2360      	movs	r3, #96	; 0x60
   b4b2a:	4622      	mov	r2, r4
{
   b4b2c:	ed8d 0b04 	vstr	d0, [sp, #16]
  display.drawFastHLine(15 + xcounter, 0 + ycounter, 96, color);
   b4b30:	9103      	str	r1, [sp, #12]
   b4b32:	f000 fdb5 	bl	b56a0 <_ZN16Adafruit_SSD130613drawFastHLineEssst>
  display.drawFastHLine(15 + xcounter, 30 + ycounter, 96, color);
   b4b36:	f107 021e 	add.w	r2, r7, #30
   b4b3a:	9903      	ldr	r1, [sp, #12]
   b4b3c:	4818      	ldr	r0, [pc, #96]	; (b4ba0 <_Z14doDisplayStuffiid+0x9c>)
   b4b3e:	9500      	str	r5, [sp, #0]
   b4b40:	2360      	movs	r3, #96	; 0x60
   b4b42:	b212      	sxth	r2, r2
   b4b44:	f000 fdac 	bl	b56a0 <_ZN16Adafruit_SSD130613drawFastHLineEssst>
  display.drawFastVLine(15 + xcounter, 0 + ycounter, 31, color);
   b4b48:	9903      	ldr	r1, [sp, #12]
   b4b4a:	4815      	ldr	r0, [pc, #84]	; (b4ba0 <_Z14doDisplayStuffiid+0x9c>)
   b4b4c:	9500      	str	r5, [sp, #0]
   b4b4e:	231f      	movs	r3, #31
   b4b50:	4622      	mov	r2, r4
   b4b52:	f000 fdcc 	bl	b56ee <_ZN16Adafruit_SSD130613drawFastVLineEssst>
  display.drawFastVLine(111 + xcounter, 0 + ycounter, 31, color);
   b4b56:	f106 016f 	add.w	r1, r6, #111	; 0x6f
   b4b5a:	4811      	ldr	r0, [pc, #68]	; (b4ba0 <_Z14doDisplayStuffiid+0x9c>)
   b4b5c:	9500      	str	r5, [sp, #0]
   b4b5e:	231f      	movs	r3, #31
   b4b60:	4622      	mov	r2, r4
   b4b62:	b209      	sxth	r1, r1
   b4b64:	f000 fdc3 	bl	b56ee <_ZN16Adafruit_SSD130613drawFastVLineEssst>
  switch (displaystate)
   b4b68:	4b0f      	ldr	r3, [pc, #60]	; (b4ba8 <_Z14doDisplayStuffiid+0xa4>)
   b4b6a:	480d      	ldr	r0, [pc, #52]	; (b4ba0 <_Z14doDisplayStuffiid+0x9c>)
   b4b6c:	681b      	ldr	r3, [r3, #0]
   b4b6e:	2b02      	cmp	r3, #2
   b4b70:	d011      	beq.n	b4b96 <_Z14doDisplayStuffiid+0x92>
   b4b72:	2b03      	cmp	r3, #3
   b4b74:	ed9d 0b04 	vldr	d0, [sp, #16]
   b4b78:	d007      	beq.n	b4b8a <_Z14doDisplayStuffiid+0x86>
   b4b7a:	2b01      	cmp	r3, #1
   b4b7c:	d10d      	bne.n	b4b9a <_Z14doDisplayStuffiid+0x96>
    display.println("PUSH");
   b4b7e:	490b      	ldr	r1, [pc, #44]	; (b4bac <_Z14doDisplayStuffiid+0xa8>)
}
   b4b80:	b007      	add	sp, #28
   b4b82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    display.println("SENT");
   b4b86:	f002 bcae 	b.w	b74e6 <_ZN5Print7printlnEPKc>
    display.println(fahrenheit);
   b4b8a:	2102      	movs	r1, #2
}
   b4b8c:	b007      	add	sp, #28
   b4b8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    display.println(fahrenheit);
   b4b92:	f002 bd99 	b.w	b76c8 <_ZN5Print7printlnEdi>
    display.println("SENT");
   b4b96:	4906      	ldr	r1, [pc, #24]	; (b4bb0 <_Z14doDisplayStuffiid+0xac>)
   b4b98:	e7f2      	b.n	b4b80 <_Z14doDisplayStuffiid+0x7c>
}
   b4b9a:	b007      	add	sp, #28
   b4b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4b9e:	bf00      	nop
   b4ba0:	2003e634 	.word	0x2003e634
   b4ba4:	2003e6a4 	.word	0x2003e6a4
   b4ba8:	2003e558 	.word	0x2003e558
   b4bac:	000b8aa6 	.word	0x000b8aa6
   b4bb0:	000b8aab 	.word	0x000b8aab

000b4bb4 <_Z18doMoreDisplayStuffiid>:
{
   b4bb4:	b538      	push	{r3, r4, r5, lr}
   b4bb6:	4604      	mov	r4, r0
   b4bb8:	ed2d 8b02 	vpush	{d8}
   b4bbc:	eeb0 8a40 	vmov.f32	s16, s0
   b4bc0:	eef0 8a60 	vmov.f32	s17, s1
   b4bc4:	460d      	mov	r5, r1
  doDisplayStuff(xpos, ypos, fahrenheit);
   b4bc6:	f7ff ff9d 	bl	b4b04 <_Z14doDisplayStuffiid>
  doDisplayStuff(xpos - 100, ypos, fahrenheit);
   b4bca:	eeb0 0a48 	vmov.f32	s0, s16
   b4bce:	eef0 0a68 	vmov.f32	s1, s17
   b4bd2:	4629      	mov	r1, r5
   b4bd4:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
   b4bd8:	f7ff ff94 	bl	b4b04 <_Z14doDisplayStuffiid>
  doDisplayStuff(xpos + 100, ypos, fahrenheit);
   b4bdc:	eeb0 0a48 	vmov.f32	s0, s16
   b4be0:	eef0 0a68 	vmov.f32	s1, s17
   b4be4:	4629      	mov	r1, r5
   b4be6:	f104 0064 	add.w	r0, r4, #100	; 0x64
   b4bea:	f7ff ff8b 	bl	b4b04 <_Z14doDisplayStuffiid>
  doDisplayStuff(xpos + (100 * 2), ypos, fahrenheit);
   b4bee:	eeb0 0a48 	vmov.f32	s0, s16
   b4bf2:	eef0 0a68 	vmov.f32	s1, s17
   b4bf6:	4629      	mov	r1, r5
   b4bf8:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   b4bfc:	f7ff ff82 	bl	b4b04 <_Z14doDisplayStuffiid>
  doDisplayStuff(xpos - (100 * 2), ypos, fahrenheit);
   b4c00:	eeb0 0a48 	vmov.f32	s0, s16
   b4c04:	eef0 0a68 	vmov.f32	s1, s17
}
   b4c08:	ecbd 8b02 	vpop	{d8}
  doDisplayStuff(xpos - (100 * 2), ypos, fahrenheit);
   b4c0c:	4629      	mov	r1, r5
   b4c0e:	f1a4 00c8 	sub.w	r0, r4, #200	; 0xc8
}
   b4c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  doDisplayStuff(xpos - (100 * 2), ypos, fahrenheit);
   b4c16:	f7ff bf75 	b.w	b4b04 <_Z14doDisplayStuffiid>
   b4c1a:	0000      	movs	r0, r0
   b4c1c:	0000      	movs	r0, r0
	...

000b4c20 <loop>:
{
   b4c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4c24:	ed2d 8b02 	vpush	{d8}
  display.loop();
   b4c28:	4891      	ldr	r0, [pc, #580]	; (b4e70 <loop+0x250>)
  reverseColor ? display.clearDisplay() : display.fillScreen(WHITE);
   b4c2a:	f8df 8288 	ldr.w	r8, [pc, #648]	; b4eb4 <loop+0x294>
   b4c2e:	4c90      	ldr	r4, [pc, #576]	; (b4e70 <loop+0x250>)
{
   b4c30:	b083      	sub	sp, #12
  display.loop();
   b4c32:	f000 fee0 	bl	b59f6 <_ZN16OledWingAdafruit4loopEv>
  double reading = analogRead(TMP36);
   b4c36:	2013      	movs	r0, #19
   b4c38:	f002 ff83 	bl	b7b42 <analogRead>
   b4c3c:	f003 fa24 	bl	b8088 <__aeabi_i2d>
  double millivolts = (reading / 4095) * 3300; // I looked up the formula before you shared it with the class lol
   b4c40:	a385      	add	r3, pc, #532	; (adr r3, b4e58 <loop+0x238>)
   b4c42:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c46:	f003 fbb3 	bl	b83b0 <__aeabi_ddiv>
   b4c4a:	a385      	add	r3, pc, #532	; (adr r3, b4e60 <loop+0x240>)
   b4c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c50:	f003 fa84 	bl	b815c <__aeabi_dmul>
  double temp = (millivolts - 500) / 10;
   b4c54:	4b87      	ldr	r3, [pc, #540]	; (b4e74 <loop+0x254>)
   b4c56:	2200      	movs	r2, #0
   b4c58:	f003 f8c8 	bl	b7dec <__aeabi_dsub>
   b4c5c:	4b86      	ldr	r3, [pc, #536]	; (b4e78 <loop+0x258>)
   b4c5e:	2200      	movs	r2, #0
   b4c60:	f003 fba6 	bl	b83b0 <__aeabi_ddiv>
  double fahrenheit = (temp * 1.8) + 32;
   b4c64:	a380      	add	r3, pc, #512	; (adr r3, b4e68 <loop+0x248>)
   b4c66:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c6a:	f003 fa77 	bl	b815c <__aeabi_dmul>
   b4c6e:	4b83      	ldr	r3, [pc, #524]	; (b4e7c <loop+0x25c>)
   b4c70:	2200      	movs	r2, #0
   b4c72:	f003 f8bd 	bl	b7df0 <__adddf3>
  reverseColor ? display.clearDisplay() : display.fillScreen(WHITE);
   b4c76:	f898 3000 	ldrb.w	r3, [r8]
  double fahrenheit = (temp * 1.8) + 32;
   b4c7a:	ec41 0b18 	vmov	d8, r0, r1
  reverseColor ? display.clearDisplay() : display.fillScreen(WHITE);
   b4c7e:	2b00      	cmp	r3, #0
   b4c80:	f000 80c9 	beq.w	b4e16 <loop+0x1f6>
   b4c84:	4620      	mov	r0, r4
   b4c86:	f000 faeb 	bl	b5260 <_ZN16Adafruit_SSD130612clearDisplayEv>
  @brief  Set whether text that is too long for the screen width should
          automatically wrap around to the next line (else clip right).
  @param  w  true for wrapping, false for clipping
  */
  /**********************************************************************/
  void setTextWrap(boolean w) { wrap = w; }
   b4c8a:	2300      	movs	r3, #0
   b4c8c:	76e3      	strb	r3, [r4, #27]
  display.setTextSize(3);
   b4c8e:	4878      	ldr	r0, [pc, #480]	; (b4e70 <loop+0x250>)
   b4c90:	2103      	movs	r1, #3
   b4c92:	f001 faa6 	bl	b61e2 <_ZN12Adafruit_GFX11setTextSizeEh>
  reverseColor ? display.setTextColor(WHITE) : display.setTextColor(BLACK);
   b4c96:	f898 3000 	ldrb.w	r3, [r8]
   b4c9a:	b10b      	cbz	r3, b4ca0 <loop+0x80>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4c9c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  int ytemppos = round(ypos);
   b4ca0:	4d77      	ldr	r5, [pc, #476]	; (b4e80 <loop+0x260>)
   b4ca2:	6163      	str	r3, [r4, #20]
   b4ca4:	e9d5 6700 	ldrd	r6, r7, [r5]
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }

template <typename T>
static inline
T round (T x) { return ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)); }
   b4ca8:	2200      	movs	r2, #0
   b4caa:	2300      	movs	r3, #0
   b4cac:	4630      	mov	r0, r6
   b4cae:	4639      	mov	r1, r7
   b4cb0:	f003 fcda 	bl	b8668 <__aeabi_dcmpge>
   b4cb4:	4b73      	ldr	r3, [pc, #460]	; (b4e84 <loop+0x264>)
   b4cb6:	2200      	movs	r2, #0
   b4cb8:	2800      	cmp	r0, #0
   b4cba:	f000 80b1 	beq.w	b4e20 <loop+0x200>
   b4cbe:	4630      	mov	r0, r6
   b4cc0:	4639      	mov	r1, r7
   b4cc2:	f003 f895 	bl	b7df0 <__adddf3>
   b4cc6:	f003 fcf9 	bl	b86bc <__aeabi_d2iz>
   b4cca:	f003 f9dd 	bl	b8088 <__aeabi_i2d>
   b4cce:	f003 fcf5 	bl	b86bc <__aeabi_d2iz>
  doMoreDisplayStuff(xpos, ytemppos, fahrenheit);
   b4cd2:	eeb0 0a48 	vmov.f32	s0, s16
   b4cd6:	eef0 0a68 	vmov.f32	s1, s17
   b4cda:	4c6b      	ldr	r4, [pc, #428]	; (b4e88 <loop+0x268>)
  if (counting) {
   b4cdc:	f8df a1d8 	ldr.w	sl, [pc, #472]	; b4eb8 <loop+0x298>
  int ytemppos = round(ypos);
   b4ce0:	4606      	mov	r6, r0
  doMoreDisplayStuff(xpos, ytemppos, fahrenheit);
   b4ce2:	4601      	mov	r1, r0
   b4ce4:	6820      	ldr	r0, [r4, #0]
   b4ce6:	f7ff ff65 	bl	b4bb4 <_Z18doMoreDisplayStuffiid>
  doMoreDisplayStuff(xpos, ytemppos + 31, fahrenheit);
   b4cea:	eeb0 0a48 	vmov.f32	s0, s16
   b4cee:	eef0 0a68 	vmov.f32	s1, s17
   b4cf2:	6820      	ldr	r0, [r4, #0]
   b4cf4:	f106 011f 	add.w	r1, r6, #31
   b4cf8:	f7ff ff5c 	bl	b4bb4 <_Z18doMoreDisplayStuffiid>
  doMoreDisplayStuff(xpos, ytemppos - 33, fahrenheit);
   b4cfc:	eeb0 0a48 	vmov.f32	s0, s16
   b4d00:	eef0 0a68 	vmov.f32	s1, s17
   b4d04:	6820      	ldr	r0, [r4, #0]
   b4d06:	f1a6 0121 	sub.w	r1, r6, #33	; 0x21
   b4d0a:	f7ff ff53 	bl	b4bb4 <_Z18doMoreDisplayStuffiid>
  doMoreDisplayStuff(xpos, ytemppos - (33 * 2), fahrenheit);
   b4d0e:	eeb0 0a48 	vmov.f32	s0, s16
   b4d12:	eef0 0a68 	vmov.f32	s1, s17
   b4d16:	6820      	ldr	r0, [r4, #0]
   b4d18:	f1a6 0142 	sub.w	r1, r6, #66	; 0x42
   b4d1c:	f7ff ff4a 	bl	b4bb4 <_Z18doMoreDisplayStuffiid>
  doMoreDisplayStuff(xpos, ytemppos + (31 * 2), fahrenheit);
   b4d20:	eeb0 0a48 	vmov.f32	s0, s16
   b4d24:	eef0 0a68 	vmov.f32	s1, s17
   b4d28:	6820      	ldr	r0, [r4, #0]
   b4d2a:	f106 013e 	add.w	r1, r6, #62	; 0x3e
   b4d2e:	f7ff ff41 	bl	b4bb4 <_Z18doMoreDisplayStuffiid>
  xpos += 2;
   b4d32:	6823      	ldr	r3, [r4, #0]
   b4d34:	3302      	adds	r3, #2
   b4d36:	9301      	str	r3, [sp, #4]
   b4d38:	6023      	str	r3, [r4, #0]
  if (counting) {
   b4d3a:	f89a 3000 	ldrb.w	r3, [sl]
   b4d3e:	b12b      	cbz	r3, b4d4c <loop+0x12c>
    yetanothercounter++;
   b4d40:	4a52      	ldr	r2, [pc, #328]	; (b4e8c <loop+0x26c>)
   b4d42:	6813      	ldr	r3, [r2, #0]
   b4d44:	3301      	adds	r3, #1
    if (yetanothercounter > 50) {
   b4d46:	2b32      	cmp	r3, #50	; 0x32
   b4d48:	dc6f      	bgt.n	b4e2a <loop+0x20a>
    yetanothercounter++;
   b4d4a:	6013      	str	r3, [r2, #0]
  counter += countersubtracting ? -1 : 1;
   b4d4c:	4b50      	ldr	r3, [pc, #320]	; (b4e90 <loop+0x270>)
   b4d4e:	f893 9000 	ldrb.w	r9, [r3]
   b4d52:	2000      	movs	r0, #0
   b4d54:	f1b9 0f00 	cmp.w	r9, #0
   b4d58:	d172      	bne.n	b4e40 <loop+0x220>
   b4d5a:	494e      	ldr	r1, [pc, #312]	; (b4e94 <loop+0x274>)
   b4d5c:	f8df b15c 	ldr.w	fp, [pc, #348]	; b4ebc <loop+0x29c>
   b4d60:	e9db 2300 	ldrd	r2, r3, [fp]
   b4d64:	f003 f844 	bl	b7df0 <__adddf3>
  if (counter > 400 || counter < -400)
   b4d68:	4b4b      	ldr	r3, [pc, #300]	; (b4e98 <loop+0x278>)
  counter += countersubtracting ? -1 : 1;
   b4d6a:	4606      	mov	r6, r0
   b4d6c:	460f      	mov	r7, r1
  if (counter > 400 || counter < -400)
   b4d6e:	2200      	movs	r2, #0
  counter += countersubtracting ? -1 : 1;
   b4d70:	e9cb 6700 	strd	r6, r7, [fp]
  if (counter > 400 || counter < -400)
   b4d74:	f003 fc82 	bl	b867c <__aeabi_dcmpgt>
   b4d78:	b930      	cbnz	r0, b4d88 <loop+0x168>
   b4d7a:	4b48      	ldr	r3, [pc, #288]	; (b4e9c <loop+0x27c>)
   b4d7c:	2200      	movs	r2, #0
   b4d7e:	4630      	mov	r0, r6
   b4d80:	4639      	mov	r1, r7
   b4d82:	f003 fc5d 	bl	b8640 <__aeabi_dcmplt>
   b4d86:	b150      	cbz	r0, b4d9e <loop+0x17e>
    countersubtracting = !countersubtracting;
   b4d88:	4b41      	ldr	r3, [pc, #260]	; (b4e90 <loop+0x270>)
   b4d8a:	f089 0901 	eor.w	r9, r9, #1
   b4d8e:	f883 9000 	strb.w	r9, [r3]
    reverseColor = !reverseColor;
   b4d92:	f898 3000 	ldrb.w	r3, [r8]
   b4d96:	f083 0301 	eor.w	r3, r3, #1
   b4d9a:	f888 3000 	strb.w	r3, [r8]
  ypos -= counter / (double)100;
   b4d9e:	4b40      	ldr	r3, [pc, #256]	; (b4ea0 <loop+0x280>)
  if (ypos >= 31)
   b4da0:	f8df 911c 	ldr.w	r9, [pc, #284]	; b4ec0 <loop+0x2a0>
  ypos -= counter / (double)100;
   b4da4:	2200      	movs	r2, #0
   b4da6:	4630      	mov	r0, r6
   b4da8:	4639      	mov	r1, r7
   b4daa:	f003 fb01 	bl	b83b0 <__aeabi_ddiv>
   b4dae:	4602      	mov	r2, r0
   b4db0:	460b      	mov	r3, r1
   b4db2:	e9d5 0100 	ldrd	r0, r1, [r5]
   b4db6:	f003 f819 	bl	b7dec <__aeabi_dsub>
  if (xpos >= 100)
   b4dba:	9b01      	ldr	r3, [sp, #4]
   b4dbc:	2b63      	cmp	r3, #99	; 0x63
    xpos = 0;
   b4dbe:	bfc8      	it	gt
   b4dc0:	2300      	movgt	r3, #0
  if (ypos >= 31)
   b4dc2:	f04f 0800 	mov.w	r8, #0
  ypos -= counter / (double)100;
   b4dc6:	4606      	mov	r6, r0
   b4dc8:	460f      	mov	r7, r1
    xpos = 0;
   b4dca:	bfc8      	it	gt
   b4dcc:	6023      	strgt	r3, [r4, #0]
  if (ypos >= 31)
   b4dce:	4642      	mov	r2, r8
   b4dd0:	464b      	mov	r3, r9
  ypos -= counter / (double)100;
   b4dd2:	e9c5 6700 	strd	r6, r7, [r5]
  if (ypos >= 31)
   b4dd6:	f003 fc47 	bl	b8668 <__aeabi_dcmpge>
    ypos = 0;
   b4dda:	2200      	movs	r2, #0
   b4ddc:	2300      	movs	r3, #0
  if (ypos >= 31)
   b4dde:	b388      	cbz	r0, b4e44 <loop+0x224>
    ypos = 0;
   b4de0:	e9c5 2300 	strd	r2, r3, [r5]
  display.display();
   b4de4:	4822      	ldr	r0, [pc, #136]	; (b4e70 <loop+0x250>)
   b4de6:	f000 fca9 	bl	b573c <_ZN16Adafruit_SSD13067displayEv>
  Blynk.run();
   b4dea:	482e      	ldr	r0, [pc, #184]	; (b4ea4 <loop+0x284>)
   b4dec:	2100      	movs	r1, #0
   b4dee:	f7ff fc41 	bl	b4674 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
  if (digitalRead(A5))
   b4df2:	200e      	movs	r0, #14
   b4df4:	f002 fe92 	bl	b7b1c <digitalRead>
   b4df8:	b140      	cbz	r0, b4e0c <loop+0x1ec>
    Blynk.notify("THIS IS A PUSH NOTIFICATION");
   b4dfa:	492b      	ldr	r1, [pc, #172]	; (b4ea8 <loop+0x288>)
   b4dfc:	4829      	ldr	r0, [pc, #164]	; (b4ea4 <loop+0x284>)
   b4dfe:	f7ff fe3f 	bl	b4a80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA28_cEEvRKT_>
    displaystate = 1;
   b4e02:	4a2a      	ldr	r2, [pc, #168]	; (b4eac <loop+0x28c>)
   b4e04:	2301      	movs	r3, #1
   b4e06:	6013      	str	r3, [r2, #0]
    counting = true;
   b4e08:	f88a 3000 	strb.w	r3, [sl]
   b4e0c:	b003      	add	sp, #12
   b4e0e:	ecbd 8b02 	vpop	{d8}
   b4e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  reverseColor ? display.clearDisplay() : display.fillScreen(WHITE);
   b4e16:	2101      	movs	r1, #1
   b4e18:	4620      	mov	r0, r4
   b4e1a:	f000 fee9 	bl	b5bf0 <_ZN12Adafruit_GFX10fillScreenEt>
   b4e1e:	e734      	b.n	b4c8a <loop+0x6a>
   b4e20:	4630      	mov	r0, r6
   b4e22:	4639      	mov	r1, r7
   b4e24:	f002 ffe2 	bl	b7dec <__aeabi_dsub>
   b4e28:	e74d      	b.n	b4cc6 <loop+0xa6>
      yetanothercounter = 0;
   b4e2a:	2100      	movs	r1, #0
   b4e2c:	6011      	str	r1, [r2, #0]
      displaystate++;
   b4e2e:	4a1f      	ldr	r2, [pc, #124]	; (b4eac <loop+0x28c>)
   b4e30:	6813      	ldr	r3, [r2, #0]
   b4e32:	3301      	adds	r3, #1
      if (displaystate == 3) {
   b4e34:	2b03      	cmp	r3, #3
      displaystate++;
   b4e36:	6013      	str	r3, [r2, #0]
        counting = false;
   b4e38:	bf08      	it	eq
   b4e3a:	f88a 1000 	strbeq.w	r1, [sl]
   b4e3e:	e785      	b.n	b4d4c <loop+0x12c>
  counter += countersubtracting ? -1 : 1;
   b4e40:	491b      	ldr	r1, [pc, #108]	; (b4eb0 <loop+0x290>)
   b4e42:	e78b      	b.n	b4d5c <loop+0x13c>
  if (ypos < 0)
   b4e44:	4630      	mov	r0, r6
   b4e46:	4639      	mov	r1, r7
   b4e48:	f003 fbfa 	bl	b8640 <__aeabi_dcmplt>
   b4e4c:	2800      	cmp	r0, #0
   b4e4e:	d0c9      	beq.n	b4de4 <loop+0x1c4>
    ypos = 31;
   b4e50:	e9c5 8900 	strd	r8, r9, [r5]
   b4e54:	e7c6      	b.n	b4de4 <loop+0x1c4>
   b4e56:	bf00      	nop
   b4e58:	00000000 	.word	0x00000000
   b4e5c:	40affe00 	.word	0x40affe00
   b4e60:	00000000 	.word	0x00000000
   b4e64:	40a9c800 	.word	0x40a9c800
   b4e68:	cccccccd 	.word	0xcccccccd
   b4e6c:	3ffccccc 	.word	0x3ffccccc
   b4e70:	2003e634 	.word	0x2003e634
   b4e74:	407f4000 	.word	0x407f4000
   b4e78:	40240000 	.word	0x40240000
   b4e7c:	40400000 	.word	0x40400000
   b4e80:	2003e6b0 	.word	0x2003e6b0
   b4e84:	3fe00000 	.word	0x3fe00000
   b4e88:	2003e6a8 	.word	0x2003e6a8
   b4e8c:	2003e6ac 	.word	0x2003e6ac
   b4e90:	2003e554 	.word	0x2003e554
   b4e94:	3ff00000 	.word	0x3ff00000
   b4e98:	40790000 	.word	0x40790000
   b4e9c:	c0790000 	.word	0xc0790000
   b4ea0:	40590000 	.word	0x40590000
   b4ea4:	2003e5c8 	.word	0x2003e5c8
   b4ea8:	000b8ab0 	.word	0x000b8ab0
   b4eac:	2003e558 	.word	0x2003e558
   b4eb0:	bff00000 	.word	0xbff00000
   b4eb4:	2003e6a4 	.word	0x2003e6a4
   b4eb8:	2003e630 	.word	0x2003e630
   b4ebc:	2003e628 	.word	0x2003e628
   b4ec0:	403f0000 	.word	0x403f0000

000b4ec4 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b4ec4:	4770      	bx	lr

000b4ec6 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b4ec6:	4770      	bx	lr

000b4ec8 <BlynkNoOpCbk>:
{}
   b4ec8:	4770      	bx	lr
	...

000b4ecc <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b4ecc:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b4ece:	bf5a      	itte	pl
   b4ed0:	4b02      	ldrpl	r3, [pc, #8]	; (b4edc <GetReadHandler+0x10>)
   b4ed2:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b4ed6:	2000      	movmi	r0, #0
#endif
}
   b4ed8:	4770      	bx	lr
   b4eda:	bf00      	nop
   b4edc:	000b8b28 	.word	0x000b8b28

000b4ee0 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b4ee0:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b4ee2:	bf5a      	itte	pl
   b4ee4:	4b02      	ldrpl	r3, [pc, #8]	; (b4ef0 <GetWriteHandler+0x10>)
   b4ee6:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b4eea:	2000      	movmi	r0, #0
#endif
}
   b4eec:	4770      	bx	lr
   b4eee:	bf00      	nop
   b4ef0:	000b8d28 	.word	0x000b8d28

000b4ef4 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b4ef4:	f002 b9da 	b.w	b72ac <delay>

000b4ef8 <_Z11BlynkMillisv>:

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4ef8:	f001 baf2 	b.w	b64e0 <HAL_Timer_Get_Milli_Seconds>

000b4efc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4efc:	4770      	bx	lr

000b4efe <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4efe:	b510      	push	{r4, lr}
  }
   b4f00:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4f02:	4604      	mov	r4, r0
  }
   b4f04:	f7ff f8cb 	bl	b409e <_ZdlPvj>
   b4f08:	4620      	mov	r0, r4
   b4f0a:	bd10      	pop	{r4, pc}

000b4f0c <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4f0c:	b510      	push	{r4, lr}
   b4f0e:	4b04      	ldr	r3, [pc, #16]	; (b4f20 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b4f10:	6003      	str	r3, [r0, #0]
   b4f12:	4604      	mov	r4, r0
  if(buffer) {
   b4f14:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4f16:	b108      	cbz	r0, b4f1c <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b4f18:	f001 fbf6 	bl	b6708 <free>
    buffer = NULL;
  }
}
   b4f1c:	4620      	mov	r0, r4
   b4f1e:	bd10      	pop	{r4, pc}
   b4f20:	000b9428 	.word	0x000b9428

000b4f24 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4f24:	b510      	push	{r4, lr}
   b4f26:	4604      	mov	r4, r0
}
   b4f28:	f7ff fff0 	bl	b4f0c <_ZN16Adafruit_SSD1306D1Ev>
   b4f2c:	4620      	mov	r0, r4
   b4f2e:	2150      	movs	r1, #80	; 0x50
   b4f30:	f7ff f8b5 	bl	b409e <_ZdlPvj>
   b4f34:	4620      	mov	r0, r4
   b4f36:	bd10      	pop	{r4, pc}

000b4f38 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4f38:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4f3a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4f3c:	db4b      	blt.n	b4fd6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4f3e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b4f42:	428c      	cmp	r4, r1
   b4f44:	dd47      	ble.n	b4fd6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4f46:	2a00      	cmp	r2, #0
   b4f48:	db45      	blt.n	b4fd6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4f4a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b4f4e:	4294      	cmp	r4, r2
   b4f50:	dd41      	ble.n	b4fd6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b4f52:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b4f54:	2c02      	cmp	r4, #2
   b4f56:	d01f      	beq.n	b4f98 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b4f58:	2c03      	cmp	r4, #3
   b4f5a:	d026      	beq.n	b4faa <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b4f5c:	2c01      	cmp	r4, #1
   b4f5e:	d104      	bne.n	b4f6a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b4f60:	8904      	ldrh	r4, [r0, #8]
   b4f62:	43d2      	mvns	r2, r2
   b4f64:	4414      	add	r4, r2
      break;
   b4f66:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b4f68:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b4f6a:	2b01      	cmp	r3, #1
   b4f6c:	d023      	beq.n	b4fb6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b4f6e:	2b02      	cmp	r3, #2
   b4f70:	d032      	beq.n	b4fd8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b4f72:	bb83      	cbnz	r3, b4fd6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b4f74:	2a00      	cmp	r2, #0
   b4f76:	4613      	mov	r3, r2
   b4f78:	8904      	ldrh	r4, [r0, #8]
   b4f7a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4f7c:	bfb8      	it	lt
   b4f7e:	1dd3      	addlt	r3, r2, #7
   b4f80:	10db      	asrs	r3, r3, #3
   b4f82:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4f86:	f002 0207 	and.w	r2, r2, #7
   b4f8a:	2301      	movs	r3, #1
   b4f8c:	4093      	lsls	r3, r2
   b4f8e:	5c42      	ldrb	r2, [r0, r1]
   b4f90:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4f94:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b4f96:	e01e      	b.n	b4fd6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b4f98:	8904      	ldrh	r4, [r0, #8]
   b4f9a:	3c01      	subs	r4, #1
   b4f9c:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b4f9e:	8944      	ldrh	r4, [r0, #10]
   b4fa0:	43d2      	mvns	r2, r2
   b4fa2:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b4fa4:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b4fa6:	b212      	sxth	r2, r2
      break;
   b4fa8:	e7df      	b.n	b4f6a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b4faa:	8944      	ldrh	r4, [r0, #10]
   b4fac:	3c01      	subs	r4, #1
   b4fae:	1a64      	subs	r4, r4, r1
      break;
   b4fb0:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b4fb2:	b222      	sxth	r2, r4
      break;
   b4fb4:	e7d9      	b.n	b4f6a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b4fb6:	2a00      	cmp	r2, #0
   b4fb8:	8904      	ldrh	r4, [r0, #8]
   b4fba:	4613      	mov	r3, r2
   b4fbc:	bfb8      	it	lt
   b4fbe:	1dd3      	addlt	r3, r2, #7
   b4fc0:	10db      	asrs	r3, r3, #3
   b4fc2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4fc6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b4fc8:	f002 0007 	and.w	r0, r2, #7
   b4fcc:	2201      	movs	r2, #1
   b4fce:	4082      	lsls	r2, r0
   b4fd0:	5c58      	ldrb	r0, [r3, r1]
   b4fd2:	4302      	orrs	r2, r0
   b4fd4:	545a      	strb	r2, [r3, r1]
}
   b4fd6:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4fd8:	2a00      	cmp	r2, #0
   b4fda:	4613      	mov	r3, r2
   b4fdc:	8904      	ldrh	r4, [r0, #8]
   b4fde:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4fe0:	bfb8      	it	lt
   b4fe2:	1dd3      	addlt	r3, r2, #7
   b4fe4:	10db      	asrs	r3, r3, #3
   b4fe6:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4fea:	f002 0207 	and.w	r2, r2, #7
   b4fee:	2301      	movs	r3, #1
   b4ff0:	fa03 f202 	lsl.w	r2, r3, r2
   b4ff4:	5c43      	ldrb	r3, [r0, r1]
   b4ff6:	405a      	eors	r2, r3
   b4ff8:	e7cc      	b.n	b4f94 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000b4ffa <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4ffa:	b40e      	push	{r1, r2, r3}
   b4ffc:	b503      	push	{r0, r1, lr}
   b4ffe:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b5000:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5002:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b5006:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b5008:	f002 fb69 	bl	b76de <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b500c:	b002      	add	sp, #8
   b500e:	f85d eb04 	ldr.w	lr, [sp], #4
   b5012:	b003      	add	sp, #12
   b5014:	4770      	bx	lr
	...

000b5018 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b5018:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b501a:	4604      	mov	r4, r0
   b501c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b501e:	7922      	ldrb	r2, [r4, #4]
   b5020:	68a3      	ldr	r3, [r4, #8]
   b5022:	b132      	cbz	r2, b5032 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5024:	b9a3      	cbnz	r3, b5050 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b5026:	490b      	ldr	r1, [pc, #44]	; (b5054 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b5028:	b002      	add	sp, #8
   b502a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b502e:	f002 ba47 	b.w	b74c0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5032:	4a09      	ldr	r2, [pc, #36]	; (b5058 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5034:	7b26      	ldrb	r6, [r4, #12]
   b5036:	4d09      	ldr	r5, [pc, #36]	; (b505c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b5038:	4909      	ldr	r1, [pc, #36]	; (b5060 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b503a:	7b64      	ldrb	r4, [r4, #13]
   b503c:	2e01      	cmp	r6, #1
   b503e:	bf18      	it	ne
   b5040:	4629      	movne	r1, r5
   b5042:	e9cd 1400 	strd	r1, r4, [sp]
   b5046:	4907      	ldr	r1, [pc, #28]	; (b5064 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5048:	f7ff ffd7 	bl	b4ffa <_ZN5Print6printfEPKcz>
  }
   b504c:	b002      	add	sp, #8
   b504e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5050:	4a05      	ldr	r2, [pc, #20]	; (b5068 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b5052:	e7ef      	b.n	b5034 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b5054:	000b8f39 	.word	0x000b8f39
   b5058:	000b8f30 	.word	0x000b8f30
   b505c:	000b8f35 	.word	0x000b8f35
   b5060:	000b8f31 	.word	0x000b8f31
   b5064:	000b8f4f 	.word	0x000b8f4f
   b5068:	000b8f28 	.word	0x000b8f28

000b506c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b506c:	b570      	push	{r4, r5, r6, lr}
   b506e:	4604      	mov	r4, r0
   b5070:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b5072:	2600      	movs	r6, #0
   b5074:	f000 fe5c 	bl	b5d30 <_ZN12Adafruit_GFXC1Ess>
   b5078:	4b11      	ldr	r3, [pc, #68]	; (b50c0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b507a:	6023      	str	r3, [r4, #0]
   b507c:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b507e:	b915      	cbnz	r5, b5086 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b5080:	f002 fc80 	bl	b7984 <_Z19__fetch_global_Wirev>
   b5084:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b5086:	23ff      	movs	r3, #255	; 0xff
   b5088:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b508c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b5090:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b5094:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b5098:	4b0a      	ldr	r3, [pc, #40]	; (b50c4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b509a:	63a3      	str	r3, [r4, #56]	; 0x38
   b509c:	2301      	movs	r3, #1
   b509e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b50a2:	9b05      	ldr	r3, [sp, #20]
   b50a4:	64a3      	str	r3, [r4, #72]	; 0x48
   b50a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b50aa:	9b06      	ldr	r3, [sp, #24]
   b50ac:	86a2      	strh	r2, [r4, #52]	; 0x34
   b50ae:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b50b2:	6426      	str	r6, [r4, #64]	; 0x40
   b50b4:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b50b8:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b50ba:	4620      	mov	r0, r4
   b50bc:	bd70      	pop	{r4, r5, r6, pc}
   b50be:	bf00      	nop
   b50c0:	000b9428 	.word	0x000b9428
   b50c4:	000b8f74 	.word	0x000b8f74

000b50c8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b50c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b50ca:	4604      	mov	r4, r0
  if(wire) { // I2C
   b50cc:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b50ce:	460d      	mov	r5, r1
  if(wire) { // I2C
   b50d0:	b190      	cbz	r0, b50f8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b50d2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b50d6:	f001 ffc5 	bl	b7064 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b50da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b50dc:	6803      	ldr	r3, [r0, #0]
   b50de:	2100      	movs	r1, #0
   b50e0:	689b      	ldr	r3, [r3, #8]
   b50e2:	4798      	blx	r3
    WIRE_WRITE(c);
   b50e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b50e6:	6803      	ldr	r3, [r0, #0]
   b50e8:	4629      	mov	r1, r5
   b50ea:	689b      	ldr	r3, [r3, #8]
   b50ec:	4798      	blx	r3
    wire->endTransmission();
   b50ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b50f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b50f4:	f001 bfbd 	b.w	b7072 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b50f8:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b50fc:	4601      	mov	r1, r0
   b50fe:	b298      	uxth	r0, r3
   b5100:	f002 fcf3 	bl	b7aea <digitalWrite>
  if(spi) {
   b5104:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5106:	b120      	cbz	r0, b5112 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b5108:	4629      	mov	r1, r5
}
   b510a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b510e:	f002 bbdd 	b.w	b78cc <_ZN8SPIClass8transferEh>
   b5112:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5114:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5116:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b511a:	ea05 0107 	and.w	r1, r5, r7
   b511e:	b280      	uxth	r0, r0
   b5120:	f002 fce3 	bl	b7aea <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5124:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5128:	2101      	movs	r1, #1
   b512a:	b280      	uxth	r0, r0
   b512c:	f002 fcdd 	bl	b7aea <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5130:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5134:	2100      	movs	r1, #0
   b5136:	b280      	uxth	r0, r0
   b5138:	f002 fcd7 	bl	b7aea <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b513c:	3e01      	subs	r6, #1
   b513e:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b5142:	d1e8      	bne.n	b5116 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b5144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5146 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b5146:	b538      	push	{r3, r4, r5, lr}
   b5148:	4604      	mov	r4, r0
  TRANSACTION_START
   b514a:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b514c:	460d      	mov	r5, r1
  TRANSACTION_START
   b514e:	b180      	cbz	r0, b5172 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b5150:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5152:	f001 ff79 	bl	b7048 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b5156:	2d00      	cmp	r5, #0
   b5158:	4620      	mov	r0, r4
   b515a:	bf14      	ite	ne
   b515c:	21a7      	movne	r1, #167	; 0xa7
   b515e:	21a6      	moveq	r1, #166	; 0xa6
   b5160:	f7ff ffb2 	bl	b50c8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b5164:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5166:	b188      	cbz	r0, b518c <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b5168:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b516a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b516e:	f001 bf6b 	b.w	b7048 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b5172:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5174:	b118      	cbz	r0, b517e <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b5176:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b517a:	f002 fb39 	bl	b77f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b517e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5182:	2100      	movs	r1, #0
   b5184:	b280      	uxth	r0, r0
   b5186:	f002 fcb0 	bl	b7aea <digitalWrite>
   b518a:	e7e4      	b.n	b5156 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b518c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5190:	2101      	movs	r1, #1
   b5192:	b280      	uxth	r0, r0
   b5194:	f002 fca9 	bl	b7aea <digitalWrite>
   b5198:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b519a:	b118      	cbz	r0, b51a4 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b519c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b51a0:	f002 bb0c 	b.w	b77bc <_ZN8SPIClass14endTransactionEv>
}
   b51a4:	bd38      	pop	{r3, r4, r5, pc}

000b51a6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b51a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b51aa:	4604      	mov	r4, r0
  if(wire) { // I2C
   b51ac:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b51ae:	460d      	mov	r5, r1
  if(wire) { // I2C
   b51b0:	188f      	adds	r7, r1, r2
   b51b2:	b340      	cbz	r0, b5206 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b51b4:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b51b8:	f001 ff54 	bl	b7064 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b51bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b51be:	6803      	ldr	r3, [r0, #0]
   b51c0:	2100      	movs	r1, #0
   b51c2:	689b      	ldr	r3, [r3, #8]
   b51c4:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b51c6:	2601      	movs	r6, #1
    while(n--) {
   b51c8:	42af      	cmp	r7, r5
        wire->endTransmission();
   b51ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b51cc:	d017      	beq.n	b51fe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b51ce:	2e1f      	cmp	r6, #31
   b51d0:	d90c      	bls.n	b51ec <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b51d2:	f001 ff4e 	bl	b7072 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b51d6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b51da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b51dc:	f001 ff42 	bl	b7064 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b51e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b51e2:	6803      	ldr	r3, [r0, #0]
   b51e4:	2100      	movs	r1, #0
   b51e6:	689b      	ldr	r3, [r3, #8]
   b51e8:	4798      	blx	r3
        bytesOut = 1;
   b51ea:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b51ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b51ee:	f815 1b01 	ldrb.w	r1, [r5], #1
   b51f2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b51f4:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b51f6:	689b      	ldr	r3, [r3, #8]
   b51f8:	4798      	blx	r3
      bytesOut++;
   b51fa:	b2f6      	uxtb	r6, r6
    while(n--) {
   b51fc:	e7e4      	b.n	b51c8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b51fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b5202:	f001 bf36 	b.w	b7072 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5206:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b520a:	4601      	mov	r1, r0
   b520c:	b298      	uxth	r0, r3
   b520e:	f002 fc6c 	bl	b7aea <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5212:	42bd      	cmp	r5, r7
   b5214:	d022      	beq.n	b525c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b5216:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5218:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b521c:	b118      	cbz	r0, b5226 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b521e:	4649      	mov	r1, r9
   b5220:	f002 fb54 	bl	b78cc <_ZN8SPIClass8transferEh>
   b5224:	e7f5      	b.n	b5212 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b5226:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5228:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b522c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5230:	ea09 0108 	and.w	r1, r9, r8
   b5234:	b280      	uxth	r0, r0
   b5236:	f002 fc58 	bl	b7aea <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b523a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b523e:	2101      	movs	r1, #1
   b5240:	b280      	uxth	r0, r0
   b5242:	f002 fc52 	bl	b7aea <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5246:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b524a:	2100      	movs	r1, #0
   b524c:	b280      	uxth	r0, r0
   b524e:	f002 fc4c 	bl	b7aea <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5252:	3e01      	subs	r6, #1
   b5254:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5258:	d1e8      	bne.n	b522c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b525a:	e7da      	b.n	b5212 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b525c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5260 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b5260:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5264:	1dda      	adds	r2, r3, #7
   b5266:	bf48      	it	mi
   b5268:	f103 020e 	addmi.w	r2, r3, #14
   b526c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5270:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5272:	10d2      	asrs	r2, r2, #3
   b5274:	435a      	muls	r2, r3
   b5276:	2100      	movs	r1, #0
   b5278:	f003 ba84 	b.w	b8784 <memset>

000b527c <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b527c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5280:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5282:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b5284:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b5288:	4604      	mov	r4, r0
   b528a:	460f      	mov	r7, r1
   b528c:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b528e:	b1c3      	cbz	r3, b52c2 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b5290:	4620      	mov	r0, r4
   b5292:	f7ff ffe5 	bl	b5260 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b5296:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b529a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b529e:	2820      	cmp	r0, #32
   b52a0:	dc21      	bgt.n	b52e6 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b52a2:	2320      	movs	r3, #32
   b52a4:	2201      	movs	r2, #1
   b52a6:	3820      	subs	r0, #32
   b52a8:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b52ac:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b52b0:	2373      	movs	r3, #115	; 0x73
   b52b2:	3973      	subs	r1, #115	; 0x73
   b52b4:	9300      	str	r3, [sp, #0]
   b52b6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b52ba:	4b89      	ldr	r3, [pc, #548]	; (b54e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b52bc:	f340 024f 	sbfx	r2, r0, #1, #16
   b52c0:	e021      	b.n	b5306 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b52c2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b52c6:	1dd8      	adds	r0, r3, #7
   b52c8:	bf48      	it	mi
   b52ca:	f103 000e 	addmi.w	r0, r3, #14
   b52ce:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b52d2:	10c0      	asrs	r0, r0, #3
   b52d4:	4358      	muls	r0, r3
   b52d6:	f001 fa0f 	bl	b66f8 <malloc>
   b52da:	62e0      	str	r0, [r4, #44]	; 0x2c
   b52dc:	2800      	cmp	r0, #0
   b52de:	d1d7      	bne.n	b5290 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b52e0:	b004      	add	sp, #16
   b52e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b52e6:	3840      	subs	r0, #64	; 0x40
   b52e8:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b52ec:	fa02 f280 	sxtah	r2, r2, r0
   b52f0:	2340      	movs	r3, #64	; 0x40
   b52f2:	2001      	movs	r0, #1
   b52f4:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b52f8:	2352      	movs	r3, #82	; 0x52
   b52fa:	3952      	subs	r1, #82	; 0x52
   b52fc:	9300      	str	r3, [sp, #0]
   b52fe:	4b79      	ldr	r3, [pc, #484]	; (b54e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b5300:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5304:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5306:	4620      	mov	r0, r4
   b5308:	f341 014f 	sbfx	r1, r1, #1, #16
   b530c:	f000 fd26 	bl	b5d5c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b5310:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b5312:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b5316:	2800      	cmp	r0, #0
   b5318:	d078      	beq.n	b540c <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b531a:	2d00      	cmp	r5, #0
   b531c:	d174      	bne.n	b5408 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b531e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5322:	2b20      	cmp	r3, #32
   b5324:	bf0c      	ite	eq
   b5326:	253c      	moveq	r5, #60	; 0x3c
   b5328:	253d      	movne	r5, #61	; 0x3d
   b532a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b532e:	f1b8 0f00 	cmp.w	r8, #0
   b5332:	d001      	beq.n	b5338 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5334:	f001 fe8c 	bl	b7050 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b5338:	b1fe      	cbz	r6, b537a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b533a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b533e:	2800      	cmp	r0, #0
   b5340:	db1b      	blt.n	b537a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b5342:	2101      	movs	r1, #1
   b5344:	b280      	uxth	r0, r0
   b5346:	f002 fbbf 	bl	b7ac8 <pinMode>
    digitalWrite(rstPin, HIGH);
   b534a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b534e:	2101      	movs	r1, #1
   b5350:	b280      	uxth	r0, r0
   b5352:	f002 fbca 	bl	b7aea <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b5356:	2001      	movs	r0, #1
   b5358:	f001 ffa8 	bl	b72ac <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b535c:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5360:	2100      	movs	r1, #0
   b5362:	b280      	uxth	r0, r0
   b5364:	f002 fbc1 	bl	b7aea <digitalWrite>
    delay(10);                  // Wait 10 ms
   b5368:	200a      	movs	r0, #10
   b536a:	f001 ff9f 	bl	b72ac <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b536e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5372:	2101      	movs	r1, #1
   b5374:	b280      	uxth	r0, r0
   b5376:	f002 fbb8 	bl	b7aea <digitalWrite>
  TRANSACTION_START
   b537a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b537c:	2800      	cmp	r0, #0
   b537e:	d074      	beq.n	b546a <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b5380:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5382:	f001 fe61 	bl	b7048 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b5386:	2204      	movs	r2, #4
   b5388:	4957      	ldr	r1, [pc, #348]	; (b54e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b538a:	4620      	mov	r0, r4
   b538c:	f7ff ff0b 	bl	b51a6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b5390:	8961      	ldrh	r1, [r4, #10]
   b5392:	3901      	subs	r1, #1
   b5394:	b2c9      	uxtb	r1, r1
   b5396:	4620      	mov	r0, r4
   b5398:	f7ff fe96 	bl	b50c8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b539c:	4953      	ldr	r1, [pc, #332]	; (b54ec <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b539e:	2204      	movs	r2, #4
   b53a0:	4620      	mov	r0, r4
   b53a2:	f7ff ff00 	bl	b51a6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b53a6:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b53aa:	2b01      	cmp	r3, #1
   b53ac:	bf0c      	ite	eq
   b53ae:	2110      	moveq	r1, #16
   b53b0:	2114      	movne	r1, #20
   b53b2:	4620      	mov	r0, r4
   b53b4:	f7ff fe88 	bl	b50c8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b53b8:	2204      	movs	r2, #4
   b53ba:	494d      	ldr	r1, [pc, #308]	; (b54f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b53bc:	4620      	mov	r0, r4
   b53be:	f7ff fef2 	bl	b51a6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b53c2:	68a3      	ldr	r3, [r4, #8]
   b53c4:	4a4b      	ldr	r2, [pc, #300]	; (b54f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b53c6:	4293      	cmp	r3, r2
   b53c8:	d15c      	bne.n	b5484 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b53ca:	494b      	ldr	r1, [pc, #300]	; (b54f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b53cc:	2204      	movs	r2, #4
   b53ce:	4620      	mov	r0, r4
   b53d0:	f7ff fee9 	bl	b51a6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b53d4:	21d9      	movs	r1, #217	; 0xd9
   b53d6:	4620      	mov	r0, r4
   b53d8:	f7ff fe76 	bl	b50c8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b53dc:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b53e0:	2b01      	cmp	r3, #1
   b53e2:	bf0c      	ite	eq
   b53e4:	2122      	moveq	r1, #34	; 0x22
   b53e6:	21f1      	movne	r1, #241	; 0xf1
   b53e8:	4620      	mov	r0, r4
   b53ea:	f7ff fe6d 	bl	b50c8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b53ee:	4620      	mov	r0, r4
   b53f0:	4942      	ldr	r1, [pc, #264]	; (b54fc <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b53f2:	2206      	movs	r2, #6
   b53f4:	f7ff fed7 	bl	b51a6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b53f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b53fa:	2800      	cmp	r0, #0
   b53fc:	d063      	beq.n	b54c6 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b53fe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b5400:	f001 fe22 	bl	b7048 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b5404:	2001      	movs	r0, #1
   b5406:	e76b      	b.n	b52e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5408:	b26d      	sxtb	r5, r5
   b540a:	e78e      	b.n	b532a <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b540c:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5410:	2101      	movs	r1, #1
   b5412:	b280      	uxth	r0, r0
   b5414:	f002 fb58 	bl	b7ac8 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b5418:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b541c:	2101      	movs	r1, #1
   b541e:	b280      	uxth	r0, r0
   b5420:	f002 fb52 	bl	b7ac8 <pinMode>
    SSD1306_DESELECT
   b5424:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5428:	2101      	movs	r1, #1
   b542a:	b280      	uxth	r0, r0
   b542c:	f002 fb5d 	bl	b7aea <digitalWrite>
    if(spi) { // Hardware SPI
   b5430:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b5432:	b13d      	cbz	r5, b5444 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b5434:	f1b8 0f00 	cmp.w	r8, #0
   b5438:	f43f af7e 	beq.w	b5338 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b543c:	4628      	mov	r0, r5
   b543e:	f002 f9a9 	bl	b7794 <_ZN8SPIClass5beginEv>
   b5442:	e779      	b.n	b5338 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b5444:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5448:	2101      	movs	r1, #1
   b544a:	b280      	uxth	r0, r0
   b544c:	f002 fb3c 	bl	b7ac8 <pinMode>
      pinMode(clkPin , OUTPUT);
   b5450:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5454:	2101      	movs	r1, #1
   b5456:	b280      	uxth	r0, r0
   b5458:	f002 fb36 	bl	b7ac8 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b545c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5460:	4629      	mov	r1, r5
   b5462:	b280      	uxth	r0, r0
   b5464:	f002 fb41 	bl	b7aea <digitalWrite>
   b5468:	e766      	b.n	b5338 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b546a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b546c:	b118      	cbz	r0, b5476 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b546e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5472:	f002 f9bd 	bl	b77f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5476:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b547a:	2100      	movs	r1, #0
   b547c:	b280      	uxth	r0, r0
   b547e:	f002 fb34 	bl	b7aea <digitalWrite>
   b5482:	e780      	b.n	b5386 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b5484:	4a1e      	ldr	r2, [pc, #120]	; (b5500 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b5486:	4293      	cmp	r3, r2
   b5488:	d10e      	bne.n	b54a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b548a:	491e      	ldr	r1, [pc, #120]	; (b5504 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b548c:	2203      	movs	r2, #3
   b548e:	4620      	mov	r0, r4
   b5490:	f7ff fe89 	bl	b51a6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b5494:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5498:	2b01      	cmp	r3, #1
   b549a:	bf0c      	ite	eq
   b549c:	219f      	moveq	r1, #159	; 0x9f
   b549e:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b54a0:	4620      	mov	r0, r4
   b54a2:	f7ff fe11 	bl	b50c8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b54a6:	e795      	b.n	b53d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b54a8:	4a17      	ldr	r2, [pc, #92]	; (b5508 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b54aa:	4293      	cmp	r3, r2
   b54ac:	d192      	bne.n	b53d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b54ae:	4917      	ldr	r1, [pc, #92]	; (b550c <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b54b0:	2203      	movs	r2, #3
   b54b2:	4620      	mov	r0, r4
   b54b4:	f7ff fe77 	bl	b51a6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b54b8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b54bc:	2b01      	cmp	r3, #1
   b54be:	bf0c      	ite	eq
   b54c0:	2110      	moveq	r1, #16
   b54c2:	21af      	movne	r1, #175	; 0xaf
   b54c4:	e7ec      	b.n	b54a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b54c6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b54ca:	2101      	movs	r1, #1
   b54cc:	b280      	uxth	r0, r0
   b54ce:	f002 fb0c 	bl	b7aea <digitalWrite>
   b54d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b54d4:	2800      	cmp	r0, #0
   b54d6:	d095      	beq.n	b5404 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b54d8:	f002 f970 	bl	b77bc <_ZN8SPIClass14endTransactionEv>
   b54dc:	e792      	b.n	b5404 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b54de:	bf00      	nop
   b54e0:	000b9240 	.word	0x000b9240
   b54e4:	000b8f80 	.word	0x000b8f80
   b54e8:	000b9488 	.word	0x000b9488
   b54ec:	000b948c 	.word	0x000b948c
   b54f0:	000b9490 	.word	0x000b9490
   b54f4:	00200080 	.word	0x00200080
   b54f8:	000b949a 	.word	0x000b949a
   b54fc:	000b9494 	.word	0x000b9494
   b5500:	00400080 	.word	0x00400080
   b5504:	000b949e 	.word	0x000b949e
   b5508:	00100060 	.word	0x00100060
   b550c:	000b94a1 	.word	0x000b94a1

000b5510 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5510:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5512:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5514:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5518:	db3d      	blt.n	b5596 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b551a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b551e:	4294      	cmp	r4, r2
   b5520:	dd39      	ble.n	b5596 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b5522:	2900      	cmp	r1, #0
      w += x;
   b5524:	bfbe      	ittt	lt
   b5526:	185b      	addlt	r3, r3, r1
   b5528:	b21b      	sxthlt	r3, r3
      x  = 0;
   b552a:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b552c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b5530:	18ce      	adds	r6, r1, r3
   b5532:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5534:	bfc4      	itt	gt
   b5536:	1a63      	subgt	r3, r4, r1
   b5538:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b553a:	2b00      	cmp	r3, #0
   b553c:	dd2b      	ble.n	b5596 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b553e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5540:	10d6      	asrs	r6, r2, #3
   b5542:	fb14 1106 	smlabb	r1, r4, r6, r1
   b5546:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b5548:	f002 0007 	and.w	r0, r2, #7
   b554c:	2201      	movs	r2, #1
   b554e:	4082      	lsls	r2, r0
      switch(color) {
   b5550:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b5552:	b2d2      	uxtb	r2, r2
      switch(color) {
   b5554:	d016      	beq.n	b5584 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b5556:	2d02      	cmp	r5, #2
   b5558:	d00b      	beq.n	b5572 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b555a:	b9e5      	cbnz	r5, b5596 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b555c:	43d2      	mvns	r2, r2
   b555e:	b2d2      	uxtb	r2, r2
   b5560:	440b      	add	r3, r1
   b5562:	4299      	cmp	r1, r3
   b5564:	d017      	beq.n	b5596 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5566:	f811 0b01 	ldrb.w	r0, [r1], #1
   b556a:	4010      	ands	r0, r2
   b556c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5570:	e7f7      	b.n	b5562 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b5572:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b5574:	4299      	cmp	r1, r3
   b5576:	d00e      	beq.n	b5596 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5578:	f811 0b01 	ldrb.w	r0, [r1], #1
   b557c:	4050      	eors	r0, r2
   b557e:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5582:	e7f7      	b.n	b5574 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5584:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b5586:	4299      	cmp	r1, r3
   b5588:	d005      	beq.n	b5596 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b558a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b558e:	4310      	orrs	r0, r2
   b5590:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5594:	e7f7      	b.n	b5586 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5596:	bd70      	pop	{r4, r5, r6, pc}

000b5598 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5598:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b559a:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b559c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b55a0:	db76      	blt.n	b5690 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b55a2:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b55a6:	42b1      	cmp	r1, r6
   b55a8:	da72      	bge.n	b5690 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b55aa:	2a00      	cmp	r2, #0
      __h += __y;
   b55ac:	bfbe      	ittt	lt
   b55ae:	189b      	addlt	r3, r3, r2
   b55b0:	b21b      	sxthlt	r3, r3
      __y = 0;
   b55b2:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b55b4:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b55b8:	18d7      	adds	r7, r2, r3
   b55ba:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b55bc:	bfc4      	itt	gt
   b55be:	1aa3      	subgt	r3, r4, r2
   b55c0:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b55c2:	2b00      	cmp	r3, #0
   b55c4:	dd64      	ble.n	b5690 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b55c6:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b55ca:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b55cc:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b55d0:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b55d4:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b55d6:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b55da:	d023      	beq.n	b5624 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b55dc:	f1c2 0208 	rsb	r2, r2, #8
   b55e0:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b55e2:	492d      	ldr	r1, [pc, #180]	; (b5698 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b55e4:	4293      	cmp	r3, r2
   b55e6:	bf3c      	itt	cc
   b55e8:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b55ec:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b55f0:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b55f2:	bf3c      	itt	cc
   b55f4:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b55f8:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b55fc:	2d01      	cmp	r5, #1
   b55fe:	d007      	beq.n	b5610 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5600:	2d02      	cmp	r5, #2
   b5602:	d02e      	beq.n	b5662 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5604:	b94d      	cbnz	r5, b561a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b5606:	f817 c006 	ldrb.w	ip, [r7, r6]
   b560a:	ea2c 0101 	bic.w	r1, ip, r1
   b560e:	e003      	b.n	b5618 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b5610:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5614:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b5618:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b561a:	4293      	cmp	r3, r2
   b561c:	d338      	bcc.n	b5690 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b561e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b5622:	440c      	add	r4, r1
        h -= mod;
   b5624:	1a9a      	subs	r2, r3, r2
   b5626:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b5628:	2a07      	cmp	r2, #7
   b562a:	d90e      	bls.n	b564a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b562c:	2d02      	cmp	r5, #2
   b562e:	d11d      	bne.n	b566c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b5630:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b5632:	7821      	ldrb	r1, [r4, #0]
   b5634:	43c9      	mvns	r1, r1
   b5636:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b5638:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b563a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b563e:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5640:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5642:	440c      	add	r4, r1
            } while(h >= 8);
   b5644:	d8f5      	bhi.n	b5632 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b5646:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b564a:	b30a      	cbz	r2, b5690 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b564c:	4b13      	ldr	r3, [pc, #76]	; (b569c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b564e:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5650:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b5652:	d01a      	beq.n	b568a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b5654:	2d02      	cmp	r5, #2
   b5656:	d01c      	beq.n	b5692 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b5658:	b9d5      	cbnz	r5, b5690 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b565a:	7822      	ldrb	r2, [r4, #0]
   b565c:	ea22 0303 	bic.w	r3, r2, r3
   b5660:	e015      	b.n	b568e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b5662:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5666:	ea81 010c 	eor.w	r1, r1, ip
   b566a:	e7d5      	b.n	b5618 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b566c:	1e29      	subs	r1, r5, #0
   b566e:	bf18      	it	ne
   b5670:	2101      	movne	r1, #1
   b5672:	4249      	negs	r1, r1
   b5674:	b2c9      	uxtb	r1, r1
   b5676:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b5678:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b567a:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b567c:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b5680:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5682:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5684:	4434      	add	r4, r6
            } while(h >= 8);
   b5686:	d8f7      	bhi.n	b5678 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b5688:	e7dd      	b.n	b5646 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b568a:	7822      	ldrb	r2, [r4, #0]
   b568c:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b568e:	7023      	strb	r3, [r4, #0]
}
   b5690:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b5692:	7822      	ldrb	r2, [r4, #0]
   b5694:	4053      	eors	r3, r2
   b5696:	e7fa      	b.n	b568e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b5698:	000b9478 	.word	0x000b9478
   b569c:	000b9480 	.word	0x000b9480

000b56a0 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b56a0:	b470      	push	{r4, r5, r6}
   b56a2:	4614      	mov	r4, r2
  switch(rotation) {
   b56a4:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b56a6:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b56aa:	2a02      	cmp	r2, #2
   b56ac:	d00d      	beq.n	b56ca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b56ae:	2a03      	cmp	r2, #3
   b56b0:	d018      	beq.n	b56e4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b56b2:	2a01      	cmp	r2, #1
   b56b4:	d111      	bne.n	b56da <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b56b6:	8902      	ldrh	r2, [r0, #8]
   b56b8:	43e4      	mvns	r4, r4
   b56ba:	4414      	add	r4, r2
   b56bc:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b56be:	9603      	str	r6, [sp, #12]
   b56c0:	460a      	mov	r2, r1
   b56c2:	4621      	mov	r1, r4
}
   b56c4:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b56c6:	f7ff bf67 	b.w	b5598 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b56ca:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b56cc:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b56ce:	43e4      	mvns	r4, r4
    x -= (w-1);
   b56d0:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b56d2:	4414      	add	r4, r2
    x -= (w-1);
   b56d4:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b56d6:	b224      	sxth	r4, r4
    x -= (w-1);
   b56d8:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b56da:	9603      	str	r6, [sp, #12]
   b56dc:	4622      	mov	r2, r4
}
   b56de:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b56e0:	f7ff bf16 	b.w	b5510 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b56e4:	8945      	ldrh	r5, [r0, #10]
   b56e6:	4419      	add	r1, r3
   b56e8:	1a69      	subs	r1, r5, r1
   b56ea:	b209      	sxth	r1, r1
    break;
   b56ec:	e7e7      	b.n	b56be <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b56ee <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b56ee:	b430      	push	{r4, r5}
   b56f0:	4614      	mov	r4, r2
  switch(rotation) {
   b56f2:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b56f4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b56f8:	2a02      	cmp	r2, #2
   b56fa:	d00d      	beq.n	b5718 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b56fc:	2a03      	cmp	r2, #3
   b56fe:	d018      	beq.n	b5732 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b5700:	2a01      	cmp	r2, #1
   b5702:	d111      	bne.n	b5728 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b5704:	18e2      	adds	r2, r4, r3
   b5706:	8904      	ldrh	r4, [r0, #8]
   b5708:	1aa4      	subs	r4, r4, r2
   b570a:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b570c:	9502      	str	r5, [sp, #8]
   b570e:	460a      	mov	r2, r1
   b5710:	4621      	mov	r1, r4
}
   b5712:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5714:	f7ff befc 	b.w	b5510 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b5718:	8902      	ldrh	r2, [r0, #8]
   b571a:	43c9      	mvns	r1, r1
   b571c:	4411      	add	r1, r2
    y -= (h-1);
   b571e:	18e2      	adds	r2, r4, r3
   b5720:	8944      	ldrh	r4, [r0, #10]
   b5722:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b5724:	b209      	sxth	r1, r1
    y -= (h-1);
   b5726:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b5728:	9502      	str	r5, [sp, #8]
   b572a:	4622      	mov	r2, r4
}
   b572c:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b572e:	f7ff bf33 	b.w	b5598 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b5732:	8942      	ldrh	r2, [r0, #10]
   b5734:	43c9      	mvns	r1, r1
   b5736:	4411      	add	r1, r2
   b5738:	b209      	sxth	r1, r1
    break;
   b573a:	e7e7      	b.n	b570c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b573c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b573c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5740:	4604      	mov	r4, r0
  TRANSACTION_START
   b5742:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b5744:	2800      	cmp	r0, #0
   b5746:	d042      	beq.n	b57ce <_ZN16Adafruit_SSD13067displayEv+0x92>
   b5748:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b574a:	f001 fc7d 	bl	b7048 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b574e:	4947      	ldr	r1, [pc, #284]	; (b586c <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b5750:	2205      	movs	r2, #5
   b5752:	4620      	mov	r0, r4
   b5754:	f7ff fd27 	bl	b51a6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b5758:	8921      	ldrh	r1, [r4, #8]
   b575a:	3901      	subs	r1, #1
   b575c:	4620      	mov	r0, r4
   b575e:	b2c9      	uxtb	r1, r1
   b5760:	f7ff fcb2 	bl	b50c8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5764:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5768:	1dde      	adds	r6, r3, #7
   b576a:	bf48      	it	mi
   b576c:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b5770:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5774:	8923      	ldrh	r3, [r4, #8]
   b5776:	10f6      	asrs	r6, r6, #3
   b5778:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b577c:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b5780:	2800      	cmp	r0, #0
   b5782:	d03a      	beq.n	b57fa <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b5784:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5788:	f001 fc6c 	bl	b7064 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b578c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b578e:	6803      	ldr	r3, [r0, #0]
   b5790:	2140      	movs	r1, #64	; 0x40
   b5792:	689b      	ldr	r3, [r3, #8]
   b5794:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5796:	2701      	movs	r7, #1
    while(count--) {
   b5798:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b579a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b579c:	d024      	beq.n	b57e8 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b579e:	2f1f      	cmp	r7, #31
   b57a0:	d90c      	bls.n	b57bc <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b57a2:	f001 fc66 	bl	b7072 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b57a6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b57aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b57ac:	f001 fc5a 	bl	b7064 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b57b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b57b2:	6803      	ldr	r3, [r0, #0]
   b57b4:	2140      	movs	r1, #64	; 0x40
   b57b6:	689b      	ldr	r3, [r3, #8]
   b57b8:	4798      	blx	r3
        bytesOut = 1;
   b57ba:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b57bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b57be:	f815 1b01 	ldrb.w	r1, [r5], #1
   b57c2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b57c4:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b57c6:	689b      	ldr	r3, [r3, #8]
   b57c8:	4798      	blx	r3
      bytesOut++;
   b57ca:	b2ff      	uxtb	r7, r7
    while(count--) {
   b57cc:	e7e4      	b.n	b5798 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b57ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b57d0:	b118      	cbz	r0, b57da <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b57d2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b57d6:	f002 f80b 	bl	b77f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b57da:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b57de:	2100      	movs	r1, #0
   b57e0:	b280      	uxth	r0, r0
   b57e2:	f002 f982 	bl	b7aea <digitalWrite>
   b57e6:	e7b2      	b.n	b574e <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b57e8:	f001 fc43 	bl	b7072 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b57ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b57ee:	b378      	cbz	r0, b5850 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b57f0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b57f2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b57f6:	f001 bc27 	b.w	b7048 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b57fa:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b57fe:	2101      	movs	r1, #1
   b5800:	b280      	uxth	r0, r0
   b5802:	f002 f972 	bl	b7aea <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b5806:	42ae      	cmp	r6, r5
   b5808:	d0f0      	beq.n	b57ec <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b580a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b580c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5810:	b118      	cbz	r0, b581a <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b5812:	4649      	mov	r1, r9
   b5814:	f002 f85a 	bl	b78cc <_ZN8SPIClass8transferEh>
   b5818:	e7f5      	b.n	b5806 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b581a:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b581c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5820:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5824:	ea09 0108 	and.w	r1, r9, r8
   b5828:	b280      	uxth	r0, r0
   b582a:	f002 f95e 	bl	b7aea <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b582e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5832:	2101      	movs	r1, #1
   b5834:	b280      	uxth	r0, r0
   b5836:	f002 f958 	bl	b7aea <digitalWrite>
      digitalWrite(clkPin , LOW);
   b583a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b583e:	2100      	movs	r1, #0
   b5840:	b280      	uxth	r0, r0
   b5842:	f002 f952 	bl	b7aea <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5846:	3f01      	subs	r7, #1
   b5848:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b584c:	d1e8      	bne.n	b5820 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b584e:	e7da      	b.n	b5806 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b5850:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5854:	2101      	movs	r1, #1
   b5856:	b280      	uxth	r0, r0
   b5858:	f002 f947 	bl	b7aea <digitalWrite>
   b585c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b585e:	b118      	cbz	r0, b5868 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b5860:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b5864:	f001 bfaa 	b.w	b77bc <_ZN8SPIClass14endTransactionEv>
}
   b5868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b586c:	000b94a4 	.word	0x000b94a4

000b5870 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b5870:	2100      	movs	r1, #0
   b5872:	220a      	movs	r2, #10
   b5874:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b5878:	4770      	bx	lr

000b587a <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b587a:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b587c:	b510      	push	{r4, lr}
   b587e:	4604      	mov	r4, r0
    this->pin = pin;
   b5880:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b5882:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b5884:	b288      	uxth	r0, r1
   b5886:	f002 f949 	bl	b7b1c <digitalRead>
   b588a:	b108      	cbz	r0, b5890 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b588c:	2303      	movs	r3, #3
   b588e:	71a3      	strb	r3, [r4, #6]
   b5890:	f000 fe26 	bl	b64e0 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b5894:	6020      	str	r0, [r4, #0]
#endif
}
   b5896:	bd10      	pop	{r4, pc}

000b5898 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b5898:	b538      	push	{r3, r4, r5, lr}
   b589a:	460c      	mov	r4, r1
   b589c:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b589e:	4611      	mov	r1, r2
   b58a0:	b2a0      	uxth	r0, r4
   b58a2:	f002 f911 	bl	b7ac8 <pinMode>
  
  this->attach(pin);
   b58a6:	4621      	mov	r1, r4
   b58a8:	4628      	mov	r0, r5
}
   b58aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b58ae:	f7ff bfe4 	b.w	b587a <_ZN8Debounce6attachEi>

000b58b2 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b58b2:	b538      	push	{r3, r4, r5, lr}
   b58b4:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b58b6:	79c0      	ldrb	r0, [r0, #7]
   b58b8:	f002 f930 	bl	b7b1c <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b58bc:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b58be:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b58c0:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b58c4:	bf18      	it	ne
   b58c6:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b58c8:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b58cc:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b58ce:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b58d0:	d00a      	beq.n	b58e8 <_ZN8Debounce6updateEv+0x36>
   b58d2:	f000 fe05 	bl	b64e0 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b58d6:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b58d8:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b58da:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b58de:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b58e0:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b58e2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b58e6:	bd38      	pop	{r3, r4, r5, pc}
   b58e8:	f000 fdfa 	bl	b64e0 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b58ec:	6823      	ldr	r3, [r4, #0]
   b58ee:	1ac0      	subs	r0, r0, r3
   b58f0:	88a3      	ldrh	r3, [r4, #4]
   b58f2:	4298      	cmp	r0, r3
   b58f4:	d3f4      	bcc.n	b58e0 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b58f6:	79a3      	ldrb	r3, [r4, #6]
   b58f8:	f003 0301 	and.w	r3, r3, #1
   b58fc:	42ab      	cmp	r3, r5
   b58fe:	d0ef      	beq.n	b58e0 <_ZN8Debounce6updateEv+0x2e>
   b5900:	f000 fdee 	bl	b64e0 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b5904:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b5906:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b5908:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b590c:	f043 0308 	orr.w	r3, r3, #8
   b5910:	e7e5      	b.n	b58de <_ZN8Debounce6updateEv+0x2c>
	...

000b5914 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b5914:	b510      	push	{r4, lr}
   b5916:	4b06      	ldr	r3, [pc, #24]	; (b5930 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b5918:	6003      	str	r3, [r0, #0]
   b591a:	4604      	mov	r4, r0
	if (mutex) {
   b591c:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b591e:	b108      	cbz	r0, b5924 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b5920:	f000 fdbe 	bl	b64a0 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b5924:	4620      	mov	r0, r4
   b5926:	f7ff faf1 	bl	b4f0c <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b592a:	4620      	mov	r0, r4
   b592c:	bd10      	pop	{r4, pc}
   b592e:	bf00      	nop
   b5930:	000b94b4 	.word	0x000b94b4

000b5934 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b5934:	b510      	push	{r4, lr}
   b5936:	4604      	mov	r4, r0
}
   b5938:	f7ff ffec 	bl	b5914 <_ZN16OledWingAdafruitD1Ev>
   b593c:	4620      	mov	r0, r4
   b593e:	2170      	movs	r1, #112	; 0x70
   b5940:	f7fe fbad 	bl	b409e <_ZdlPvj>
   b5944:	4620      	mov	r0, r4
   b5946:	bd10      	pop	{r4, pc}

000b5948 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b5948:	b530      	push	{r4, r5, lr}
   b594a:	b085      	sub	sp, #20
   b594c:	4604      	mov	r4, r0
   b594e:	460d      	mov	r5, r1
   b5950:	f002 f818 	bl	b7984 <_Z19__fetch_global_Wirev>
   b5954:	4a10      	ldr	r2, [pc, #64]	; (b5998 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b5956:	4911      	ldr	r1, [pc, #68]	; (b599c <_ZN16OledWingAdafruitC1Ei+0x54>)
   b5958:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b595c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5960:	2180      	movs	r1, #128	; 0x80
   b5962:	4603      	mov	r3, r0
   b5964:	9200      	str	r2, [sp, #0]
   b5966:	4620      	mov	r0, r4
   b5968:	2220      	movs	r2, #32
   b596a:	f7ff fb7f 	bl	b506c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b596e:	4b0c      	ldr	r3, [pc, #48]	; (b59a0 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b5970:	6023      	str	r3, [r4, #0]
   b5972:	2300      	movs	r3, #0
   b5974:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b5978:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b597c:	f7ff ff78 	bl	b5870 <_ZN8DebounceC1Ev>
   b5980:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5984:	f7ff ff74 	bl	b5870 <_ZN8DebounceC1Ev>
   b5988:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b598c:	f7ff ff70 	bl	b5870 <_ZN8DebounceC1Ev>
}
   b5990:	4620      	mov	r0, r4
   b5992:	b005      	add	sp, #20
   b5994:	bd30      	pop	{r4, r5, pc}
   b5996:	bf00      	nop
   b5998:	00061a80 	.word	0x00061a80
   b599c:	000186a0 	.word	0x000186a0
   b59a0:	000b94b4 	.word	0x000b94b4

000b59a4 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b59a4:	b513      	push	{r0, r1, r4, lr}
   b59a6:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b59a8:	3050      	adds	r0, #80	; 0x50
   b59aa:	f000 fd71 	bl	b6490 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b59ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b59b0:	07d9      	lsls	r1, r3, #31
   b59b2:	d505      	bpl.n	b59c0 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b59b4:	2202      	movs	r2, #2
   b59b6:	2104      	movs	r1, #4
   b59b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b59bc:	f7ff ff6c 	bl	b5898 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b59c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b59c2:	079a      	lsls	r2, r3, #30
   b59c4:	d505      	bpl.n	b59d2 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b59c6:	2200      	movs	r2, #0
   b59c8:	2103      	movs	r1, #3
   b59ca:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b59ce:	f7ff ff63 	bl	b5898 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b59d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b59d4:	075b      	lsls	r3, r3, #29
   b59d6:	d505      	bpl.n	b59e4 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b59d8:	2202      	movs	r2, #2
   b59da:	4611      	mov	r1, r2
   b59dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b59e0:	f7ff ff5a 	bl	b5898 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b59e4:	2301      	movs	r3, #1
   b59e6:	9300      	str	r3, [sp, #0]
   b59e8:	223c      	movs	r2, #60	; 0x3c
   b59ea:	2102      	movs	r1, #2
   b59ec:	4620      	mov	r0, r4
   b59ee:	f7ff fc45 	bl	b527c <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b59f2:	b002      	add	sp, #8
   b59f4:	bd10      	pop	{r4, pc}

000b59f6 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b59f6:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b59f8:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b59fa:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b59fc:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b59fe:	d502      	bpl.n	b5a06 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b5a00:	3058      	adds	r0, #88	; 0x58
   b5a02:	f7ff ff56 	bl	b58b2 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b5a06:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5a08:	079a      	lsls	r2, r3, #30
   b5a0a:	d503      	bpl.n	b5a14 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b5a0c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5a10:	f7ff ff4f 	bl	b58b2 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b5a14:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5a16:	075b      	lsls	r3, r3, #29
   b5a18:	d505      	bpl.n	b5a26 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b5a1a:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b5a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b5a22:	f7ff bf46 	b.w	b58b2 <_ZN8Debounce6updateEv>
}
   b5a26:	bd10      	pop	{r4, pc}

000b5a28 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a2c:	b085      	sub	sp, #20
   b5a2e:	461f      	mov	r7, r3
   b5a30:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5a34:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5a38:	eba8 0902 	sub.w	r9, r8, r2
   b5a3c:	eba7 0a01 	sub.w	sl, r7, r1
   b5a40:	f1b9 0f00 	cmp.w	r9, #0
   b5a44:	bfb8      	it	lt
   b5a46:	f1c9 0900 	rsblt	r9, r9, #0
   b5a4a:	f1ba 0f00 	cmp.w	sl, #0
   b5a4e:	bfb8      	it	lt
   b5a50:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b5a54:	45d1      	cmp	r9, sl
        uint16_t color) {
   b5a56:	4683      	mov	fp, r0
   b5a58:	460c      	mov	r4, r1
   b5a5a:	4615      	mov	r5, r2
    if (steep) {
   b5a5c:	dd04      	ble.n	b5a68 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b5a5e:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b5a60:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b5a62:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b5a64:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b5a66:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b5a68:	42bc      	cmp	r4, r7
   b5a6a:	dd05      	ble.n	b5a78 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b5a6c:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b5a6e:	4645      	mov	r5, r8
   b5a70:	4690      	mov	r8, r2
    if (x0 > x1) {
   b5a72:	4622      	mov	r2, r4
   b5a74:	463c      	mov	r4, r7
   b5a76:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b5a78:	1b3e      	subs	r6, r7, r4
   b5a7a:	b2b2      	uxth	r2, r6
   b5a7c:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b5a7e:	eba8 0205 	sub.w	r2, r8, r5
   b5a82:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5a86:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b5a8a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5a8e:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b5a92:	4545      	cmp	r5, r8
   b5a94:	bfb4      	ite	lt
   b5a96:	2201      	movlt	r2, #1
   b5a98:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b5a9c:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b5a9e:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b5aa0:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b5aa2:	42bc      	cmp	r4, r7
   b5aa4:	dc1c      	bgt.n	b5ae0 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b5aa6:	f8db 2000 	ldr.w	r2, [fp]
   b5aaa:	9303      	str	r3, [sp, #12]
        if (steep) {
   b5aac:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b5aae:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b5ab2:	bfc7      	ittee	gt
   b5ab4:	4629      	movgt	r1, r5
   b5ab6:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5ab8:	462a      	movle	r2, r5
   b5aba:	4621      	movle	r1, r4
   b5abc:	4658      	mov	r0, fp
   b5abe:	47c0      	blx	r8
        }
        err -= dy;
   b5ac0:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b5ac2:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b5ac4:	1ab6      	subs	r6, r6, r2
   b5ac6:	b2b1      	uxth	r1, r6
   b5ac8:	b236      	sxth	r6, r6
        if (err < 0) {
   b5aca:	2e00      	cmp	r6, #0
   b5acc:	da05      	bge.n	b5ada <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b5ace:	9a02      	ldr	r2, [sp, #8]
   b5ad0:	4415      	add	r5, r2
            err += dx;
   b5ad2:	9a00      	ldr	r2, [sp, #0]
   b5ad4:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b5ad6:	b22d      	sxth	r5, r5
            err += dx;
   b5ad8:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b5ada:	3401      	adds	r4, #1
   b5adc:	b224      	sxth	r4, r4
   b5ade:	e7e0      	b.n	b5aa2 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b5ae0:	b005      	add	sp, #20
   b5ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5ae6 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b5ae6:	4770      	bx	lr

000b5ae8 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b5ae8:	b410      	push	{r4}
    drawPixel(x, y, color);
   b5aea:	6804      	ldr	r4, [r0, #0]
   b5aec:	6924      	ldr	r4, [r4, #16]
   b5aee:	46a4      	mov	ip, r4
}
   b5af0:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b5af4:	4760      	bx	ip

000b5af6 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5af6:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b5af8:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b5afa:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b5afe:	9502      	str	r5, [sp, #8]
   b5b00:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b5b02:	46a4      	mov	ip, r4
}
   b5b04:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b5b06:	4760      	bx	ip

000b5b08 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5b08:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b5b0a:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b5b0c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b5b10:	9502      	str	r5, [sp, #8]
   b5b12:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b5b14:	46a4      	mov	ip, r4
}
   b5b16:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b5b18:	4760      	bx	ip

000b5b1a <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5b1a:	b470      	push	{r4, r5, r6}
   b5b1c:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b5b20:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b5b24:	6804      	ldr	r4, [r0, #0]
   b5b26:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5b2a:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5b2c:	46a4      	mov	ip, r4
}
   b5b2e:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b5b30:	4760      	bx	ip

000b5b32 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5b32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5b36:	461c      	mov	r4, r3
    startWrite();
   b5b38:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b5b3a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5b3e:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b5b40:	4605      	mov	r5, r0
   b5b42:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b5b44:	3c01      	subs	r4, #1
   b5b46:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5b48:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b5b4a:	b224      	sxth	r4, r4
    startWrite();
   b5b4c:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b5b4e:	682b      	ldr	r3, [r5, #0]
   b5b50:	f8cd 8004 	str.w	r8, [sp, #4]
   b5b54:	9400      	str	r4, [sp, #0]
   b5b56:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b5b58:	4628      	mov	r0, r5
   b5b5a:	463b      	mov	r3, r7
   b5b5c:	4632      	mov	r2, r6
   b5b5e:	4639      	mov	r1, r7
   b5b60:	47a0      	blx	r4
    endWrite();
   b5b62:	682b      	ldr	r3, [r5, #0]
   b5b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5b66:	4628      	mov	r0, r5
}
   b5b68:	b002      	add	sp, #8
   b5b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5b6e:	4718      	bx	r3

000b5b70 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5b70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5b74:	461d      	mov	r5, r3
    startWrite();
   b5b76:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5b78:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5b7c:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b5b7e:	4604      	mov	r4, r0
   b5b80:	4617      	mov	r7, r2
   b5b82:	460e      	mov	r6, r1
    startWrite();
   b5b84:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5b86:	e9cd 7800 	strd	r7, r8, [sp]
   b5b8a:	6822      	ldr	r2, [r4, #0]
   b5b8c:	1e6b      	subs	r3, r5, #1
   b5b8e:	4433      	add	r3, r6
   b5b90:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b5b92:	4620      	mov	r0, r4
   b5b94:	b21b      	sxth	r3, r3
   b5b96:	463a      	mov	r2, r7
   b5b98:	4631      	mov	r1, r6
   b5b9a:	47a8      	blx	r5
    endWrite();
   b5b9c:	6823      	ldr	r3, [r4, #0]
   b5b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5ba0:	4620      	mov	r0, r4
}
   b5ba2:	b002      	add	sp, #8
   b5ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5ba8:	4718      	bx	r3

000b5baa <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5baa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5bae:	461e      	mov	r6, r3
    startWrite();
   b5bb0:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5bb2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5bb6:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5bb8:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5bbc:	460c      	mov	r4, r1
   b5bbe:	4605      	mov	r5, r0
   b5bc0:	4617      	mov	r7, r2
    startWrite();
   b5bc2:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5bc4:	4426      	add	r6, r4
   b5bc6:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5bc8:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5bca:	da0b      	bge.n	b5be4 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5bcc:	f8cd 8000 	str.w	r8, [sp]
   b5bd0:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5bd4:	4621      	mov	r1, r4
   b5bd6:	464b      	mov	r3, r9
   b5bd8:	463a      	mov	r2, r7
   b5bda:	4628      	mov	r0, r5
   b5bdc:	3401      	adds	r4, #1
   b5bde:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b5be0:	b224      	sxth	r4, r4
   b5be2:	e7f0      	b.n	b5bc6 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b5be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5be6:	4628      	mov	r0, r5
}
   b5be8:	b002      	add	sp, #8
   b5bea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5bee:	4718      	bx	r3

000b5bf0 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b5bf0:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b5bf2:	6802      	ldr	r2, [r0, #0]
   b5bf4:	9101      	str	r1, [sp, #4]
   b5bf6:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5bfa:	9100      	str	r1, [sp, #0]
   b5bfc:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b5bfe:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5c02:	2200      	movs	r2, #0
   b5c04:	4611      	mov	r1, r2
   b5c06:	47a0      	blx	r4
}
   b5c08:	b002      	add	sp, #8
   b5c0a:	bd10      	pop	{r4, pc}

000b5c0c <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5c0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b5c10:	4299      	cmp	r1, r3
        uint16_t color) {
   b5c12:	4616      	mov	r6, r2
   b5c14:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5c18:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5c1c:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b5c1e:	4680      	mov	r8, r0
   b5c20:	460d      	mov	r5, r1
   b5c22:	461c      	mov	r4, r3
    if(x0 == x1){
   b5c24:	d113      	bne.n	b5c4e <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5c26:	42be      	cmp	r6, r7
   b5c28:	bfc8      	it	gt
   b5c2a:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5c2c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5c30:	bfc4      	itt	gt
   b5c32:	463e      	movgt	r6, r7
   b5c34:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5c36:	1c7b      	adds	r3, r7, #1
   b5c38:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5c3a:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5c3c:	b21b      	sxth	r3, r3
   b5c3e:	4632      	mov	r2, r6
   b5c40:	4629      	mov	r1, r5
   b5c42:	4640      	mov	r0, r8
   b5c44:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b5c46:	b003      	add	sp, #12
   b5c48:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5c4c:	4760      	bx	ip
    } else if(y0 == y1){
   b5c4e:	42be      	cmp	r6, r7
   b5c50:	d10a      	bne.n	b5c68 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b5c52:	4299      	cmp	r1, r3
   b5c54:	bfc2      	ittt	gt
   b5c56:	460b      	movgt	r3, r1
   b5c58:	4625      	movgt	r5, r4
   b5c5a:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5c5c:	1c63      	adds	r3, r4, #1
   b5c5e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b5c62:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5c64:	1b5b      	subs	r3, r3, r5
   b5c66:	e7e9      	b.n	b5c3c <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5c68:	6953      	ldr	r3, [r2, #20]
   b5c6a:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5c6c:	e9cd 7900 	strd	r7, r9, [sp]
   b5c70:	f8d8 3000 	ldr.w	r3, [r8]
   b5c74:	4640      	mov	r0, r8
   b5c76:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5c78:	4632      	mov	r2, r6
   b5c7a:	4623      	mov	r3, r4
   b5c7c:	4629      	mov	r1, r5
   b5c7e:	47b8      	blx	r7
        endWrite();
   b5c80:	f8d8 3000 	ldr.w	r3, [r8]
   b5c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c86:	4640      	mov	r0, r8
}
   b5c88:	b003      	add	sp, #12
   b5c8a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b5c8e:	4718      	bx	r3

000b5c90 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5c90:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5c94:	461d      	mov	r5, r3
    startWrite();
   b5c96:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5c98:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5c9c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5c9e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5ca2:	4604      	mov	r4, r0
   b5ca4:	460f      	mov	r7, r1
   b5ca6:	4616      	mov	r6, r2
    startWrite();
   b5ca8:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5caa:	6823      	ldr	r3, [r4, #0]
   b5cac:	f8cd 8000 	str.w	r8, [sp]
   b5cb0:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5cb4:	4632      	mov	r2, r6
   b5cb6:	462b      	mov	r3, r5
   b5cb8:	4639      	mov	r1, r7
   b5cba:	4620      	mov	r0, r4
   b5cbc:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b5cbe:	6823      	ldr	r3, [r4, #0]
   b5cc0:	f8cd 8000 	str.w	r8, [sp]
   b5cc4:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b5cc8:	4432      	add	r2, r6
   b5cca:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5cce:	4639      	mov	r1, r7
   b5cd0:	462b      	mov	r3, r5
   b5cd2:	4620      	mov	r0, r4
   b5cd4:	b212      	sxth	r2, r2
   b5cd6:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5cd8:	6823      	ldr	r3, [r4, #0]
   b5cda:	f8cd 8000 	str.w	r8, [sp]
   b5cde:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5ce2:	4632      	mov	r2, r6
   b5ce4:	464b      	mov	r3, r9
   b5ce6:	4639      	mov	r1, r7
   b5ce8:	4620      	mov	r0, r4
   b5cea:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5cec:	1e6b      	subs	r3, r5, #1
   b5cee:	19d9      	adds	r1, r3, r7
   b5cf0:	6823      	ldr	r3, [r4, #0]
   b5cf2:	f8cd 8000 	str.w	r8, [sp]
   b5cf6:	6a1d      	ldr	r5, [r3, #32]
   b5cf8:	4620      	mov	r0, r4
   b5cfa:	464b      	mov	r3, r9
   b5cfc:	4632      	mov	r2, r6
   b5cfe:	b209      	sxth	r1, r1
   b5d00:	47a8      	blx	r5
    endWrite();
   b5d02:	6823      	ldr	r3, [r4, #0]
   b5d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5d06:	4620      	mov	r0, r4
}
   b5d08:	b002      	add	sp, #8
   b5d0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5d0e:	4718      	bx	r3

000b5d10 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b5d10:	4770      	bx	lr

000b5d12 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b5d12:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b5d16:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5d1a:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5d1c:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b5d1e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5d22:	bf59      	ittee	pl
   b5d24:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b5d26:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5d28:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5d2a:	81c3      	strhmi	r3, [r0, #14]
}
   b5d2c:	4770      	bx	lr
	...

000b5d30 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5d30:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b5d32:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b5d34:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b5d36:	4a07      	ldr	r2, [pc, #28]	; (b5d54 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5d38:	4d07      	ldr	r5, [pc, #28]	; (b5d58 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5d3a:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b5d3c:	2400      	movs	r4, #0
    _width    = WIDTH;
   b5d3e:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b5d40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5d44:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5d48:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5d4a:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5d4c:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b5d4e:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b5d50:	6204      	str	r4, [r0, #32]
}
   b5d52:	bd30      	pop	{r4, r5, pc}
   b5d54:	01000101 	.word	0x01000101
   b5d58:	000b9a0c 	.word	0x000b9a0c

000b5d5c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5d60:	b089      	sub	sp, #36	; 0x24
   b5d62:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b5d66:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5d68:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5d6c:	9304      	str	r3, [sp, #16]
   b5d6e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b5d72:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5d74:	9305      	str	r3, [sp, #20]
   b5d76:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b5d7a:	4604      	mov	r4, r0
    startWrite();
   b5d7c:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5d7e:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b5d82:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5d86:	bf48      	it	mi
   b5d88:	f108 020e 	addmi.w	r2, r8, #14
   b5d8c:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b5d90:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b5d92:	4635      	mov	r5, r6
   b5d94:	9b03      	ldr	r3, [sp, #12]
   b5d96:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5d98:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5d9c:	189a      	adds	r2, r3, r2
   b5d9e:	9b05      	ldr	r3, [sp, #20]
   b5da0:	428b      	cmp	r3, r1
   b5da2:	b212      	sxth	r2, r2
   b5da4:	dd27      	ble.n	b5df6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5da6:	9b04      	ldr	r3, [sp, #16]
   b5da8:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5daa:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5dae:	9306      	str	r3, [sp, #24]
   b5db0:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5db4:	4580      	cmp	r8, r0
   b5db6:	fa1f f189 	uxth.w	r1, r9
   b5dba:	dd17      	ble.n	b5dec <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5dbc:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5dbe:	bf05      	ittet	eq
   b5dc0:	9b06      	ldreq	r3, [sp, #24]
   b5dc2:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5dc4:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5dc6:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5dc8:	bf18      	it	ne
   b5dca:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5dcc:	062b      	lsls	r3, r5, #24
   b5dce:	d50a      	bpl.n	b5de6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b5dd0:	9b02      	ldr	r3, [sp, #8]
   b5dd2:	6820      	ldr	r0, [r4, #0]
   b5dd4:	9207      	str	r2, [sp, #28]
   b5dd6:	4419      	add	r1, r3
   b5dd8:	6983      	ldr	r3, [r0, #24]
   b5dda:	b209      	sxth	r1, r1
   b5ddc:	461f      	mov	r7, r3
   b5dde:	4620      	mov	r0, r4
   b5de0:	4653      	mov	r3, sl
   b5de2:	47b8      	blx	r7
   b5de4:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b5de6:	f109 0901 	add.w	r9, r9, #1
   b5dea:	e7e1      	b.n	b5db0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5dec:	9b01      	ldr	r3, [sp, #4]
   b5dee:	3301      	adds	r3, #1
   b5df0:	9301      	str	r3, [sp, #4]
   b5df2:	445e      	add	r6, fp
   b5df4:	e7ce      	b.n	b5d94 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b5df6:	6823      	ldr	r3, [r4, #0]
   b5df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5dfa:	4620      	mov	r0, r4
}
   b5dfc:	b009      	add	sp, #36	; 0x24
   b5dfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b5e02:	4718      	bx	r3

000b5e04 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5e08:	ed2d 8b02 	vpush	{d8}
   b5e0c:	b091      	sub	sp, #68	; 0x44
   b5e0e:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b5e10:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5e12:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b5e16:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b5e1a:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b5e1e:	9103      	str	r1, [sp, #12]
   b5e20:	461f      	mov	r7, r3
   b5e22:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b5e26:	9304      	str	r3, [sp, #16]
   b5e28:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5e2a:	2a00      	cmp	r2, #0
   b5e2c:	f040 80c5 	bne.w	b5fba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b5e30:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5e34:	428b      	cmp	r3, r1
   b5e36:	f340 814c 	ble.w	b60d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b5e3a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5e3e:	42b3      	cmp	r3, r6
   b5e40:	f340 8147 	ble.w	b60d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5e44:	2306      	movs	r3, #6
   b5e46:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b5e4a:	2b00      	cmp	r3, #0
   b5e4c:	f340 8141 	ble.w	b60d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b5e50:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5e54:	2b00      	cmp	r3, #0
   b5e56:	f340 813c 	ble.w	b60d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b5e5a:	7f03      	ldrb	r3, [r0, #28]
   b5e5c:	b91b      	cbnz	r3, b5e66 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b5e5e:	2faf      	cmp	r7, #175	; 0xaf
   b5e60:	bf84      	itt	hi
   b5e62:	3701      	addhi	r7, #1
   b5e64:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b5e66:	f8db 3000 	ldr.w	r3, [fp]
   b5e6a:	4658      	mov	r0, fp
   b5e6c:	695b      	ldr	r3, [r3, #20]
   b5e6e:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5e70:	2205      	movs	r2, #5
   b5e72:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5e74:	2200      	movs	r2, #0
   b5e76:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5e78:	4a98      	ldr	r2, [pc, #608]	; (b60dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b5e7a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b5e7e:	18d3      	adds	r3, r2, r3
   b5e80:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b5e82:	b2b3      	uxth	r3, r6
   b5e84:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5e86:	9a05      	ldr	r2, [sp, #20]
   b5e88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5e8a:	5c9b      	ldrb	r3, [r3, r2]
   b5e8c:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5e8e:	b2ab      	uxth	r3, r5
   b5e90:	930b      	str	r3, [sp, #44]	; 0x2c
   b5e92:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5e96:	9308      	str	r3, [sp, #32]
   b5e98:	9b03      	ldr	r3, [sp, #12]
   b5e9a:	fb02 f905 	mul.w	r9, r2, r5
   b5e9e:	fa19 f983 	uxtah	r9, r9, r3
   b5ea2:	fa0f f389 	sxth.w	r3, r9
   b5ea6:	ee08 3a10 	vmov	s16, r3
   b5eaa:	2308      	movs	r3, #8
   b5eac:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b5eae:	9b03      	ldr	r3, [sp, #12]
   b5eb0:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5eb4:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5eb8:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5ebc:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b5ebe:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b5ec2:	07d2      	lsls	r2, r2, #31
   b5ec4:	d552      	bpl.n	b5f6c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5ec6:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5ec8:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5ecc:	d13e      	bne.n	b5f4c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b5ece:	2c01      	cmp	r4, #1
   b5ed0:	d13c      	bne.n	b5f4c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b5ed2:	699b      	ldr	r3, [r3, #24]
   b5ed4:	9906      	ldr	r1, [sp, #24]
   b5ed6:	461f      	mov	r7, r3
   b5ed8:	9b04      	ldr	r3, [sp, #16]
   b5eda:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5edc:	b212      	sxth	r2, r2
   b5ede:	4651      	mov	r1, sl
   b5ee0:	4658      	mov	r0, fp
   b5ee2:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5ee4:	f109 0301 	add.w	r3, r9, #1
   b5ee8:	fa4f f983 	sxtb.w	r9, r3
   b5eec:	9b07      	ldr	r3, [sp, #28]
   b5eee:	085b      	lsrs	r3, r3, #1
   b5ef0:	9307      	str	r3, [sp, #28]
   b5ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5ef4:	3b01      	subs	r3, #1
   b5ef6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5efa:	930a      	str	r3, [sp, #40]	; 0x28
   b5efc:	d1de      	bne.n	b5ebc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5efe:	9f05      	ldr	r7, [sp, #20]
   b5f00:	3701      	adds	r7, #1
   b5f02:	b27b      	sxtb	r3, r7
   b5f04:	9305      	str	r3, [sp, #20]
   b5f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5f08:	3b01      	subs	r3, #1
   b5f0a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5f0e:	9309      	str	r3, [sp, #36]	; 0x24
   b5f10:	d1b9      	bne.n	b5e86 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b5f12:	9b04      	ldr	r3, [sp, #16]
   b5f14:	4543      	cmp	r3, r8
   b5f16:	d00f      	beq.n	b5f38 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b5f18:	2d01      	cmp	r5, #1
   b5f1a:	f8db 3000 	ldr.w	r3, [fp]
   b5f1e:	d13b      	bne.n	b5f98 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5f20:	2c01      	cmp	r4, #1
   b5f22:	d139      	bne.n	b5f98 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5f24:	9908      	ldr	r1, [sp, #32]
   b5f26:	f8cd 8000 	str.w	r8, [sp]
   b5f2a:	3105      	adds	r1, #5
   b5f2c:	6a1c      	ldr	r4, [r3, #32]
   b5f2e:	4632      	mov	r2, r6
   b5f30:	2308      	movs	r3, #8
   b5f32:	b209      	sxth	r1, r1
   b5f34:	4658      	mov	r0, fp
   b5f36:	47a0      	blx	r4
        endWrite();
   b5f38:	f8db 3000 	ldr.w	r3, [fp]
   b5f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5f3e:	4658      	mov	r0, fp
}
   b5f40:	b011      	add	sp, #68	; 0x44
   b5f42:	ecbd 8b02 	vpop	{d8}
   b5f46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b5f4a:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b5f4c:	9906      	ldr	r1, [sp, #24]
   b5f4e:	fb14 f202 	smulbb	r2, r4, r2
   b5f52:	440a      	add	r2, r1
   b5f54:	9904      	ldr	r1, [sp, #16]
   b5f56:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5f58:	9400      	str	r4, [sp, #0]
   b5f5a:	69db      	ldr	r3, [r3, #28]
   b5f5c:	ee18 1a10 	vmov	r1, s16
   b5f60:	461f      	mov	r7, r3
   b5f62:	b212      	sxth	r2, r2
   b5f64:	462b      	mov	r3, r5
   b5f66:	4658      	mov	r0, fp
   b5f68:	47b8      	blx	r7
   b5f6a:	e7bb      	b.n	b5ee4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b5f6c:	9a04      	ldr	r2, [sp, #16]
   b5f6e:	4542      	cmp	r2, r8
   b5f70:	d0b8      	beq.n	b5ee4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b5f72:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5f74:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5f78:	d107      	bne.n	b5f8a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b5f7a:	2c01      	cmp	r4, #1
   b5f7c:	d105      	bne.n	b5f8a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b5f7e:	699b      	ldr	r3, [r3, #24]
   b5f80:	9906      	ldr	r1, [sp, #24]
   b5f82:	461f      	mov	r7, r3
   b5f84:	440a      	add	r2, r1
   b5f86:	4643      	mov	r3, r8
   b5f88:	e7a8      	b.n	b5edc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5f8a:	9906      	ldr	r1, [sp, #24]
   b5f8c:	f8cd 8004 	str.w	r8, [sp, #4]
   b5f90:	fb14 f202 	smulbb	r2, r4, r2
   b5f94:	440a      	add	r2, r1
   b5f96:	e7df      	b.n	b5f58 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5f98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5f9a:	f8cd 8004 	str.w	r8, [sp, #4]
   b5f9e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b5fa2:	9a08      	ldr	r2, [sp, #32]
   b5fa4:	00e4      	lsls	r4, r4, #3
   b5fa6:	440a      	add	r2, r1
   b5fa8:	4611      	mov	r1, r2
   b5faa:	9400      	str	r4, [sp, #0]
   b5fac:	69dc      	ldr	r4, [r3, #28]
   b5fae:	4632      	mov	r2, r6
   b5fb0:	462b      	mov	r3, r5
   b5fb2:	b209      	sxth	r1, r1
   b5fb4:	4658      	mov	r0, fp
   b5fb6:	47a0      	blx	r4
        endWrite();
   b5fb8:	e7be      	b.n	b5f38 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5fba:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5fbc:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b5fbe:	6812      	ldr	r2, [r2, #0]
   b5fc0:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5fc2:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5fc4:	b2ff      	uxtb	r7, r7
   b5fc6:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b5fca:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b5fce:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b5fd0:	789a      	ldrb	r2, [r3, #2]
   b5fd2:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5fd4:	78da      	ldrb	r2, [r3, #3]
   b5fd6:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5fd8:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5fda:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b5fde:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5fe2:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b5fe4:	d801      	bhi.n	b5fea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b5fe6:	2c01      	cmp	r4, #1
   b5fe8:	d957      	bls.n	b609a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b5fea:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b5fee:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b5ff0:	fa0f f38a 	sxth.w	r3, sl
   b5ff4:	9307      	str	r3, [sp, #28]
        startWrite();
   b5ff6:	f8db 3000 	ldr.w	r3, [fp]
   b5ffa:	4658      	mov	r0, fp
   b5ffc:	695b      	ldr	r3, [r3, #20]
   b5ffe:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6000:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b6002:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6006:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6008:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b600c:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b600e:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6010:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b6012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6014:	429f      	cmp	r7, r3
   b6016:	d28f      	bcs.n	b5f38 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6018:	9b07      	ldr	r3, [sp, #28]
   b601a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b601c:	443b      	add	r3, r7
   b601e:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b6022:	2200      	movs	r2, #0
   b6024:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6026:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6028:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b602a:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b602e:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6032:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6036:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b6038:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b603a:	9905      	ldr	r1, [sp, #20]
   b603c:	4291      	cmp	r1, r2
   b603e:	d241      	bcs.n	b60c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b6040:	1c5a      	adds	r2, r3, #1
   b6042:	b2d2      	uxtb	r2, r2
   b6044:	075b      	lsls	r3, r3, #29
   b6046:	920d      	str	r2, [sp, #52]	; 0x34
   b6048:	d107      	bne.n	b605a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b604a:	9b06      	ldr	r3, [sp, #24]
   b604c:	9906      	ldr	r1, [sp, #24]
   b604e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6050:	3301      	adds	r3, #1
   b6052:	b29b      	uxth	r3, r3
   b6054:	f812 9001 	ldrb.w	r9, [r2, r1]
   b6058:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b605a:	f019 0f80 	tst.w	r9, #128	; 0x80
   b605e:	d012      	beq.n	b6086 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b6060:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6062:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6066:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b606a:	d11a      	bne.n	b60a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b606c:	2c01      	cmp	r4, #1
   b606e:	d118      	bne.n	b60a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b6072:	699b      	ldr	r3, [r3, #24]
   b6074:	4411      	add	r1, r2
   b6076:	9a05      	ldr	r2, [sp, #20]
   b6078:	4411      	add	r1, r2
   b607a:	461e      	mov	r6, r3
   b607c:	4652      	mov	r2, sl
   b607e:	9b04      	ldr	r3, [sp, #16]
   b6080:	b209      	sxth	r1, r1
   b6082:	4658      	mov	r0, fp
   b6084:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b6086:	9e05      	ldr	r6, [sp, #20]
   b6088:	3601      	adds	r6, #1
   b608a:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b608c:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b6090:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b6092:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b6096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b6098:	e7ce      	b.n	b6038 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b609a:	2300      	movs	r3, #0
   b609c:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b60a0:	e7a9      	b.n	b5ff6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b60a2:	9805      	ldr	r0, [sp, #20]
   b60a4:	9a08      	ldr	r2, [sp, #32]
   b60a6:	4402      	add	r2, r0
   b60a8:	fb02 1105 	mla	r1, r2, r5, r1
   b60ac:	9a04      	ldr	r2, [sp, #16]
   b60ae:	e9cd 4200 	strd	r4, r2, [sp]
   b60b2:	69db      	ldr	r3, [r3, #28]
   b60b4:	ee18 2a10 	vmov	r2, s16
   b60b8:	461e      	mov	r6, r3
   b60ba:	b209      	sxth	r1, r1
   b60bc:	462b      	mov	r3, r5
   b60be:	4658      	mov	r0, fp
   b60c0:	47b0      	blx	r6
   b60c2:	e7e0      	b.n	b6086 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b60c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b60c6:	3701      	adds	r7, #1
   b60c8:	4498      	add	r8, r3
   b60ca:	fa5f f888 	uxtb.w	r8, r8
   b60ce:	b2ff      	uxtb	r7, r7
   b60d0:	e79f      	b.n	b6012 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b60d2:	b011      	add	sp, #68	; 0x44
   b60d4:	ecbd 8b02 	vpop	{d8}
   b60d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b60dc:	000b9504 	.word	0x000b9504

000b60e0 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b60e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b60e2:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b60e4:	b085      	sub	sp, #20
   b60e6:	4604      	mov	r4, r0
   b60e8:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b60ea:	2a00      	cmp	r2, #0
   b60ec:	d134      	bne.n	b6158 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b60ee:	290a      	cmp	r1, #10
   b60f0:	d108      	bne.n	b6104 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b60f2:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b60f4:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b60f6:	7e42      	ldrb	r2, [r0, #25]
   b60f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b60fc:	8263      	strh	r3, [r4, #18]
}
   b60fe:	2001      	movs	r0, #1
   b6100:	b005      	add	sp, #20
   b6102:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b6104:	290d      	cmp	r1, #13
   b6106:	d0fa      	beq.n	b60fe <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6108:	7ee1      	ldrb	r1, [r4, #27]
   b610a:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b610c:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b610e:	b171      	cbz	r1, b612e <_ZN12Adafruit_GFX5writeEh+0x4e>
   b6110:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b6114:	2106      	movs	r1, #6
   b6116:	fb11 6100 	smlabb	r1, r1, r0, r6
   b611a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b611e:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b6120:	bfc1      	itttt	gt
   b6122:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b6126:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b6128:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b612c:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b612e:	8ae2      	ldrh	r2, [r4, #22]
   b6130:	9201      	str	r2, [sp, #4]
   b6132:	8aa2      	ldrh	r2, [r4, #20]
   b6134:	9200      	str	r2, [sp, #0]
   b6136:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b613a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b613e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b6142:	4620      	mov	r0, r4
   b6144:	f7ff fe5e 	bl	b5e04 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b6148:	7e23      	ldrb	r3, [r4, #24]
   b614a:	8a22      	ldrh	r2, [r4, #16]
   b614c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b6150:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b6154:	8223      	strh	r3, [r4, #16]
   b6156:	e7d2      	b.n	b60fe <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b6158:	290a      	cmp	r1, #10
   b615a:	d107      	bne.n	b616c <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b615c:	2300      	movs	r3, #0
   b615e:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b6160:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b6162:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b6164:	8a43      	ldrh	r3, [r0, #18]
   b6166:	fb01 3302 	mla	r3, r1, r2, r3
   b616a:	e7c7      	b.n	b60fc <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b616c:	290d      	cmp	r1, #13
   b616e:	d0c6      	beq.n	b60fe <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b6170:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b6172:	42a9      	cmp	r1, r5
   b6174:	d3c3      	bcc.n	b60fe <_ZN12Adafruit_GFX5writeEh+0x1e>
   b6176:	7a51      	ldrb	r1, [r2, #9]
   b6178:	4299      	cmp	r1, r3
   b617a:	d3c0      	bcc.n	b60fe <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b617c:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b617e:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b6180:	b2ed      	uxtb	r5, r5
   b6182:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b6186:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b6188:	b328      	cbz	r0, b61d6 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b618a:	78e9      	ldrb	r1, [r5, #3]
   b618c:	b319      	cbz	r1, b61d6 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b618e:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6190:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b6192:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b6194:	b191      	cbz	r1, b61bc <_ZN12Adafruit_GFX5writeEh+0xdc>
   b6196:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b619a:	4408      	add	r0, r1
   b619c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b61a0:	fb06 1100 	mla	r1, r6, r0, r1
   b61a4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b61a8:	4281      	cmp	r1, r0
   b61aa:	dd07      	ble.n	b61bc <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b61ac:	2000      	movs	r0, #0
   b61ae:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b61b0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b61b4:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b61b6:	fb02 1207 	mla	r2, r2, r7, r1
   b61ba:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b61bc:	8ae2      	ldrh	r2, [r4, #22]
   b61be:	9201      	str	r2, [sp, #4]
   b61c0:	8aa2      	ldrh	r2, [r4, #20]
   b61c2:	9200      	str	r2, [sp, #0]
   b61c4:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b61c8:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b61cc:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b61d0:	4620      	mov	r0, r4
   b61d2:	f7ff fe17 	bl	b5e04 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b61d6:	7929      	ldrb	r1, [r5, #4]
   b61d8:	7e22      	ldrb	r2, [r4, #24]
   b61da:	8a23      	ldrh	r3, [r4, #16]
   b61dc:	fb01 3302 	mla	r3, r1, r2, r3
   b61e0:	e7b8      	b.n	b6154 <_ZN12Adafruit_GFX5writeEh+0x74>

000b61e2 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b61e2:	2901      	cmp	r1, #1
   b61e4:	bf38      	it	cc
   b61e6:	2101      	movcc	r1, #1
   b61e8:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b61ea:	7641      	strb	r1, [r0, #25]
}
   b61ec:	4770      	bx	lr
	...

000b61f0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b61f0:	b508      	push	{r3, lr}
   b61f2:	4b02      	ldr	r3, [pc, #8]	; (b61fc <HAL_USB_USART_Init+0xc>)
   b61f4:	681b      	ldr	r3, [r3, #0]
   b61f6:	681b      	ldr	r3, [r3, #0]
   b61f8:	9301      	str	r3, [sp, #4]
   b61fa:	bd08      	pop	{r3, pc}
   b61fc:	0003024c 	.word	0x0003024c

000b6200 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6200:	b508      	push	{r3, lr}
   b6202:	4b02      	ldr	r3, [pc, #8]	; (b620c <HAL_USB_USART_Available_Data+0xc>)
   b6204:	681b      	ldr	r3, [r3, #0]
   b6206:	691b      	ldr	r3, [r3, #16]
   b6208:	9301      	str	r3, [sp, #4]
   b620a:	bd08      	pop	{r3, pc}
   b620c:	0003024c 	.word	0x0003024c

000b6210 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6210:	b508      	push	{r3, lr}
   b6212:	4b02      	ldr	r3, [pc, #8]	; (b621c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6214:	681b      	ldr	r3, [r3, #0]
   b6216:	695b      	ldr	r3, [r3, #20]
   b6218:	9301      	str	r3, [sp, #4]
   b621a:	bd08      	pop	{r3, pc}
   b621c:	0003024c 	.word	0x0003024c

000b6220 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6220:	b508      	push	{r3, lr}
   b6222:	4b02      	ldr	r3, [pc, #8]	; (b622c <HAL_USB_USART_Receive_Data+0xc>)
   b6224:	681b      	ldr	r3, [r3, #0]
   b6226:	699b      	ldr	r3, [r3, #24]
   b6228:	9301      	str	r3, [sp, #4]
   b622a:	bd08      	pop	{r3, pc}
   b622c:	0003024c 	.word	0x0003024c

000b6230 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6230:	b508      	push	{r3, lr}
   b6232:	4b02      	ldr	r3, [pc, #8]	; (b623c <HAL_USB_USART_Send_Data+0xc>)
   b6234:	681b      	ldr	r3, [r3, #0]
   b6236:	69db      	ldr	r3, [r3, #28]
   b6238:	9301      	str	r3, [sp, #4]
   b623a:	bd08      	pop	{r3, pc}
   b623c:	0003024c 	.word	0x0003024c

000b6240 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6240:	b508      	push	{r3, lr}
   b6242:	4b02      	ldr	r3, [pc, #8]	; (b624c <HAL_USB_USART_Flush_Data+0xc>)
   b6244:	681b      	ldr	r3, [r3, #0]
   b6246:	6a1b      	ldr	r3, [r3, #32]
   b6248:	9301      	str	r3, [sp, #4]
   b624a:	bd08      	pop	{r3, pc}
   b624c:	0003024c 	.word	0x0003024c

000b6250 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b6250:	b508      	push	{r3, lr}
   b6252:	4b02      	ldr	r3, [pc, #8]	; (b625c <hal_i2c_set_speed+0xc>)
   b6254:	681b      	ldr	r3, [r3, #0]
   b6256:	681b      	ldr	r3, [r3, #0]
   b6258:	9301      	str	r3, [sp, #4]
   b625a:	bd08      	pop	{r3, pc}
   b625c:	00030228 	.word	0x00030228

000b6260 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6260:	b508      	push	{r3, lr}
   b6262:	4b02      	ldr	r3, [pc, #8]	; (b626c <hal_i2c_begin+0xc>)
   b6264:	681b      	ldr	r3, [r3, #0]
   b6266:	68db      	ldr	r3, [r3, #12]
   b6268:	9301      	str	r3, [sp, #4]
   b626a:	bd08      	pop	{r3, pc}
   b626c:	00030228 	.word	0x00030228

000b6270 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6270:	b508      	push	{r3, lr}
   b6272:	4b02      	ldr	r3, [pc, #8]	; (b627c <hal_i2c_begin_transmission+0xc>)
   b6274:	681b      	ldr	r3, [r3, #0]
   b6276:	699b      	ldr	r3, [r3, #24]
   b6278:	9301      	str	r3, [sp, #4]
   b627a:	bd08      	pop	{r3, pc}
   b627c:	00030228 	.word	0x00030228

000b6280 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6280:	b508      	push	{r3, lr}
   b6282:	4b02      	ldr	r3, [pc, #8]	; (b628c <hal_i2c_end_transmission+0xc>)
   b6284:	681b      	ldr	r3, [r3, #0]
   b6286:	69db      	ldr	r3, [r3, #28]
   b6288:	9301      	str	r3, [sp, #4]
   b628a:	bd08      	pop	{r3, pc}
   b628c:	00030228 	.word	0x00030228

000b6290 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6290:	b508      	push	{r3, lr}
   b6292:	4b02      	ldr	r3, [pc, #8]	; (b629c <hal_i2c_write+0xc>)
   b6294:	681b      	ldr	r3, [r3, #0]
   b6296:	6a1b      	ldr	r3, [r3, #32]
   b6298:	9301      	str	r3, [sp, #4]
   b629a:	bd08      	pop	{r3, pc}
   b629c:	00030228 	.word	0x00030228

000b62a0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b62a0:	b508      	push	{r3, lr}
   b62a2:	4b02      	ldr	r3, [pc, #8]	; (b62ac <hal_i2c_available+0xc>)
   b62a4:	681b      	ldr	r3, [r3, #0]
   b62a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b62a8:	9301      	str	r3, [sp, #4]
   b62aa:	bd08      	pop	{r3, pc}
   b62ac:	00030228 	.word	0x00030228

000b62b0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b62b0:	b508      	push	{r3, lr}
   b62b2:	4b02      	ldr	r3, [pc, #8]	; (b62bc <hal_i2c_read+0xc>)
   b62b4:	681b      	ldr	r3, [r3, #0]
   b62b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b62b8:	9301      	str	r3, [sp, #4]
   b62ba:	bd08      	pop	{r3, pc}
   b62bc:	00030228 	.word	0x00030228

000b62c0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b62c0:	b508      	push	{r3, lr}
   b62c2:	4b02      	ldr	r3, [pc, #8]	; (b62cc <hal_i2c_peek+0xc>)
   b62c4:	681b      	ldr	r3, [r3, #0]
   b62c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b62c8:	9301      	str	r3, [sp, #4]
   b62ca:	bd08      	pop	{r3, pc}
   b62cc:	00030228 	.word	0x00030228

000b62d0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b62d0:	b508      	push	{r3, lr}
   b62d2:	4b02      	ldr	r3, [pc, #8]	; (b62dc <hal_i2c_flush+0xc>)
   b62d4:	681b      	ldr	r3, [r3, #0]
   b62d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b62d8:	9301      	str	r3, [sp, #4]
   b62da:	bd08      	pop	{r3, pc}
   b62dc:	00030228 	.word	0x00030228

000b62e0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b62e0:	b508      	push	{r3, lr}
   b62e2:	4b02      	ldr	r3, [pc, #8]	; (b62ec <hal_i2c_is_enabled+0xc>)
   b62e4:	681b      	ldr	r3, [r3, #0]
   b62e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b62e8:	9301      	str	r3, [sp, #4]
   b62ea:	bd08      	pop	{r3, pc}
   b62ec:	00030228 	.word	0x00030228

000b62f0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b62f0:	b508      	push	{r3, lr}
   b62f2:	4b02      	ldr	r3, [pc, #8]	; (b62fc <hal_i2c_init+0xc>)
   b62f4:	681b      	ldr	r3, [r3, #0]
   b62f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b62f8:	9301      	str	r3, [sp, #4]
   b62fa:	bd08      	pop	{r3, pc}
   b62fc:	00030228 	.word	0x00030228

000b6300 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6300:	b508      	push	{r3, lr}
   b6302:	4b02      	ldr	r3, [pc, #8]	; (b630c <hal_spi_begin+0xc>)
   b6304:	681b      	ldr	r3, [r3, #0]
   b6306:	681b      	ldr	r3, [r3, #0]
   b6308:	9301      	str	r3, [sp, #4]
   b630a:	bd08      	pop	{r3, pc}
   b630c:	00030230 	.word	0x00030230

000b6310 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6310:	b508      	push	{r3, lr}
   b6312:	4b02      	ldr	r3, [pc, #8]	; (b631c <hal_spi_transfer+0xc>)
   b6314:	681b      	ldr	r3, [r3, #0]
   b6316:	695b      	ldr	r3, [r3, #20]
   b6318:	9301      	str	r3, [sp, #4]
   b631a:	bd08      	pop	{r3, pc}
   b631c:	00030230 	.word	0x00030230

000b6320 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6320:	b508      	push	{r3, lr}
   b6322:	4b02      	ldr	r3, [pc, #8]	; (b632c <hal_spi_init+0xc>)
   b6324:	681b      	ldr	r3, [r3, #0]
   b6326:	69db      	ldr	r3, [r3, #28]
   b6328:	9301      	str	r3, [sp, #4]
   b632a:	bd08      	pop	{r3, pc}
   b632c:	00030230 	.word	0x00030230

000b6330 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6330:	b508      	push	{r3, lr}
   b6332:	4b02      	ldr	r3, [pc, #8]	; (b633c <hal_spi_is_enabled+0xc>)
   b6334:	681b      	ldr	r3, [r3, #0]
   b6336:	6a1b      	ldr	r3, [r3, #32]
   b6338:	9301      	str	r3, [sp, #4]
   b633a:	bd08      	pop	{r3, pc}
   b633c:	00030230 	.word	0x00030230

000b6340 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6340:	b508      	push	{r3, lr}
   b6342:	4b02      	ldr	r3, [pc, #8]	; (b634c <hal_spi_info+0xc>)
   b6344:	681b      	ldr	r3, [r3, #0]
   b6346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6348:	9301      	str	r3, [sp, #4]
   b634a:	bd08      	pop	{r3, pc}
   b634c:	00030230 	.word	0x00030230

000b6350 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6350:	b508      	push	{r3, lr}
   b6352:	4b02      	ldr	r3, [pc, #8]	; (b635c <hal_spi_set_settings+0xc>)
   b6354:	681b      	ldr	r3, [r3, #0]
   b6356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6358:	9301      	str	r3, [sp, #4]
   b635a:	bd08      	pop	{r3, pc}
   b635c:	00030230 	.word	0x00030230

000b6360 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6360:	b508      	push	{r3, lr}
   b6362:	4b02      	ldr	r3, [pc, #8]	; (b636c <hal_spi_acquire+0xc>)
   b6364:	681b      	ldr	r3, [r3, #0]
   b6366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6368:	9301      	str	r3, [sp, #4]
   b636a:	bd08      	pop	{r3, pc}
   b636c:	00030230 	.word	0x00030230

000b6370 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6370:	b508      	push	{r3, lr}
   b6372:	4b02      	ldr	r3, [pc, #8]	; (b637c <hal_spi_release+0xc>)
   b6374:	681b      	ldr	r3, [r3, #0]
   b6376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6378:	9301      	str	r3, [sp, #4]
   b637a:	bd08      	pop	{r3, pc}
   b637c:	00030230 	.word	0x00030230

000b6380 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6380:	b508      	push	{r3, lr}
   b6382:	4b02      	ldr	r3, [pc, #8]	; (b638c <sock_setsockopt+0xc>)
   b6384:	681b      	ldr	r3, [r3, #0]
   b6386:	699b      	ldr	r3, [r3, #24]
   b6388:	9301      	str	r3, [sp, #4]
   b638a:	bd08      	pop	{r3, pc}
   b638c:	00030238 	.word	0x00030238

000b6390 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6390:	b508      	push	{r3, lr}
   b6392:	4b02      	ldr	r3, [pc, #8]	; (b639c <sock_close+0xc>)
   b6394:	681b      	ldr	r3, [r3, #0]
   b6396:	69db      	ldr	r3, [r3, #28]
   b6398:	9301      	str	r3, [sp, #4]
   b639a:	bd08      	pop	{r3, pc}
   b639c:	00030238 	.word	0x00030238

000b63a0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b63a0:	b508      	push	{r3, lr}
   b63a2:	4b02      	ldr	r3, [pc, #8]	; (b63ac <sock_connect+0xc>)
   b63a4:	681b      	ldr	r3, [r3, #0]
   b63a6:	6a1b      	ldr	r3, [r3, #32]
   b63a8:	9301      	str	r3, [sp, #4]
   b63aa:	bd08      	pop	{r3, pc}
   b63ac:	00030238 	.word	0x00030238

000b63b0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b63b0:	b508      	push	{r3, lr}
   b63b2:	4b02      	ldr	r3, [pc, #8]	; (b63bc <sock_recv+0xc>)
   b63b4:	681b      	ldr	r3, [r3, #0]
   b63b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b63b8:	9301      	str	r3, [sp, #4]
   b63ba:	bd08      	pop	{r3, pc}
   b63bc:	00030238 	.word	0x00030238

000b63c0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b63c0:	b508      	push	{r3, lr}
   b63c2:	4b02      	ldr	r3, [pc, #8]	; (b63cc <sock_send+0xc>)
   b63c4:	681b      	ldr	r3, [r3, #0]
   b63c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b63c8:	9301      	str	r3, [sp, #4]
   b63ca:	bd08      	pop	{r3, pc}
   b63cc:	00030238 	.word	0x00030238

000b63d0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b63d0:	b508      	push	{r3, lr}
   b63d2:	4b02      	ldr	r3, [pc, #8]	; (b63dc <sock_socket+0xc>)
   b63d4:	681b      	ldr	r3, [r3, #0]
   b63d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b63d8:	9301      	str	r3, [sp, #4]
   b63da:	bd08      	pop	{r3, pc}
   b63dc:	00030238 	.word	0x00030238

000b63e0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b63e0:	b508      	push	{r3, lr}
   b63e2:	4b02      	ldr	r3, [pc, #8]	; (b63ec <hal_usart_write+0xc>)
   b63e4:	681b      	ldr	r3, [r3, #0]
   b63e6:	68db      	ldr	r3, [r3, #12]
   b63e8:	9301      	str	r3, [sp, #4]
   b63ea:	bd08      	pop	{r3, pc}
   b63ec:	0003023c 	.word	0x0003023c

000b63f0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b63f0:	b508      	push	{r3, lr}
   b63f2:	4b02      	ldr	r3, [pc, #8]	; (b63fc <hal_usart_available+0xc>)
   b63f4:	681b      	ldr	r3, [r3, #0]
   b63f6:	691b      	ldr	r3, [r3, #16]
   b63f8:	9301      	str	r3, [sp, #4]
   b63fa:	bd08      	pop	{r3, pc}
   b63fc:	0003023c 	.word	0x0003023c

000b6400 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6400:	b508      	push	{r3, lr}
   b6402:	4b02      	ldr	r3, [pc, #8]	; (b640c <hal_usart_read+0xc>)
   b6404:	681b      	ldr	r3, [r3, #0]
   b6406:	695b      	ldr	r3, [r3, #20]
   b6408:	9301      	str	r3, [sp, #4]
   b640a:	bd08      	pop	{r3, pc}
   b640c:	0003023c 	.word	0x0003023c

000b6410 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6410:	b508      	push	{r3, lr}
   b6412:	4b02      	ldr	r3, [pc, #8]	; (b641c <hal_usart_peek+0xc>)
   b6414:	681b      	ldr	r3, [r3, #0]
   b6416:	699b      	ldr	r3, [r3, #24]
   b6418:	9301      	str	r3, [sp, #4]
   b641a:	bd08      	pop	{r3, pc}
   b641c:	0003023c 	.word	0x0003023c

000b6420 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6420:	b508      	push	{r3, lr}
   b6422:	4b02      	ldr	r3, [pc, #8]	; (b642c <hal_usart_flush+0xc>)
   b6424:	681b      	ldr	r3, [r3, #0]
   b6426:	69db      	ldr	r3, [r3, #28]
   b6428:	9301      	str	r3, [sp, #4]
   b642a:	bd08      	pop	{r3, pc}
   b642c:	0003023c 	.word	0x0003023c

000b6430 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6430:	b508      	push	{r3, lr}
   b6432:	4b02      	ldr	r3, [pc, #8]	; (b643c <hal_usart_is_enabled+0xc>)
   b6434:	681b      	ldr	r3, [r3, #0]
   b6436:	6a1b      	ldr	r3, [r3, #32]
   b6438:	9301      	str	r3, [sp, #4]
   b643a:	bd08      	pop	{r3, pc}
   b643c:	0003023c 	.word	0x0003023c

000b6440 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6440:	b508      	push	{r3, lr}
   b6442:	4b02      	ldr	r3, [pc, #8]	; (b644c <hal_usart_available_data_for_write+0xc>)
   b6444:	681b      	ldr	r3, [r3, #0]
   b6446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6448:	9301      	str	r3, [sp, #4]
   b644a:	bd08      	pop	{r3, pc}
   b644c:	0003023c 	.word	0x0003023c

000b6450 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6450:	b508      	push	{r3, lr}
   b6452:	4b02      	ldr	r3, [pc, #8]	; (b645c <hal_usart_init_ex+0xc>)
   b6454:	681b      	ldr	r3, [r3, #0]
   b6456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6458:	9301      	str	r3, [sp, #4]
   b645a:	bd08      	pop	{r3, pc}
   b645c:	0003023c 	.word	0x0003023c

000b6460 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6460:	b508      	push	{r3, lr}
   b6462:	4b02      	ldr	r3, [pc, #8]	; (b646c <inet_inet_ntop+0xc>)
   b6464:	681b      	ldr	r3, [r3, #0]
   b6466:	695b      	ldr	r3, [r3, #20]
   b6468:	9301      	str	r3, [sp, #4]
   b646a:	bd08      	pop	{r3, pc}
   b646c:	00030264 	.word	0x00030264

000b6470 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6470:	b508      	push	{r3, lr}
   b6472:	4b02      	ldr	r3, [pc, #8]	; (b647c <inet_htonl+0xc>)
   b6474:	681b      	ldr	r3, [r3, #0]
   b6476:	6a1b      	ldr	r3, [r3, #32]
   b6478:	9301      	str	r3, [sp, #4]
   b647a:	bd08      	pop	{r3, pc}
   b647c:	00030264 	.word	0x00030264

000b6480 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6480:	b508      	push	{r3, lr}
   b6482:	4b02      	ldr	r3, [pc, #8]	; (b648c <inet_htons+0xc>)
   b6484:	681b      	ldr	r3, [r3, #0]
   b6486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6488:	9301      	str	r3, [sp, #4]
   b648a:	bd08      	pop	{r3, pc}
   b648c:	00030264 	.word	0x00030264

000b6490 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6490:	b508      	push	{r3, lr}
   b6492:	4b02      	ldr	r3, [pc, #8]	; (b649c <os_mutex_create+0xc>)
   b6494:	681b      	ldr	r3, [r3, #0]
   b6496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6498:	9301      	str	r3, [sp, #4]
   b649a:	bd08      	pop	{r3, pc}
   b649c:	00030248 	.word	0x00030248

000b64a0 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b64a0:	b508      	push	{r3, lr}
   b64a2:	4b02      	ldr	r3, [pc, #8]	; (b64ac <os_mutex_destroy+0xc>)
   b64a4:	681b      	ldr	r3, [r3, #0]
   b64a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b64a8:	9301      	str	r3, [sp, #4]
   b64aa:	bd08      	pop	{r3, pc}
   b64ac:	00030248 	.word	0x00030248

000b64b0 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b64b0:	b508      	push	{r3, lr}
   b64b2:	4b02      	ldr	r3, [pc, #8]	; (b64bc <os_mutex_recursive_create+0xc>)
   b64b4:	681b      	ldr	r3, [r3, #0]
   b64b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b64b8:	9301      	str	r3, [sp, #4]
   b64ba:	bd08      	pop	{r3, pc}
   b64bc:	00030248 	.word	0x00030248

000b64c0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b64c0:	b508      	push	{r3, lr}
   b64c2:	4b02      	ldr	r3, [pc, #8]	; (b64cc <HAL_RNG_GetRandomNumber+0xc>)
   b64c4:	681b      	ldr	r3, [r3, #0]
   b64c6:	685b      	ldr	r3, [r3, #4]
   b64c8:	9301      	str	r3, [sp, #4]
   b64ca:	bd08      	pop	{r3, pc}
   b64cc:	00030218 	.word	0x00030218

000b64d0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b64d0:	b508      	push	{r3, lr}
   b64d2:	4b02      	ldr	r3, [pc, #8]	; (b64dc <HAL_Delay_Microseconds+0xc>)
   b64d4:	681b      	ldr	r3, [r3, #0]
   b64d6:	68db      	ldr	r3, [r3, #12]
   b64d8:	9301      	str	r3, [sp, #4]
   b64da:	bd08      	pop	{r3, pc}
   b64dc:	00030218 	.word	0x00030218

000b64e0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b64e0:	b508      	push	{r3, lr}
   b64e2:	4b02      	ldr	r3, [pc, #8]	; (b64ec <HAL_Timer_Get_Milli_Seconds+0xc>)
   b64e4:	681b      	ldr	r3, [r3, #0]
   b64e6:	695b      	ldr	r3, [r3, #20]
   b64e8:	9301      	str	r3, [sp, #4]
   b64ea:	bd08      	pop	{r3, pc}
   b64ec:	00030218 	.word	0x00030218

000b64f0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b64f0:	b508      	push	{r3, lr}
   b64f2:	4b02      	ldr	r3, [pc, #8]	; (b64fc <if_index_to_name+0xc>)
   b64f4:	681b      	ldr	r3, [r3, #0]
   b64f6:	695b      	ldr	r3, [r3, #20]
   b64f8:	9301      	str	r3, [sp, #4]
   b64fa:	bd08      	pop	{r3, pc}
   b64fc:	0003026c 	.word	0x0003026c

000b6500 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6500:	b508      	push	{r3, lr}
   b6502:	4b02      	ldr	r3, [pc, #8]	; (b650c <HAL_Validate_Pin_Function+0xc>)
   b6504:	681b      	ldr	r3, [r3, #0]
   b6506:	685b      	ldr	r3, [r3, #4]
   b6508:	9301      	str	r3, [sp, #4]
   b650a:	bd08      	pop	{r3, pc}
   b650c:	0003022c 	.word	0x0003022c

000b6510 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6510:	b508      	push	{r3, lr}
   b6512:	4b02      	ldr	r3, [pc, #8]	; (b651c <HAL_Pin_Mode+0xc>)
   b6514:	681b      	ldr	r3, [r3, #0]
   b6516:	689b      	ldr	r3, [r3, #8]
   b6518:	9301      	str	r3, [sp, #4]
   b651a:	bd08      	pop	{r3, pc}
   b651c:	0003022c 	.word	0x0003022c

000b6520 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6520:	b508      	push	{r3, lr}
   b6522:	4b02      	ldr	r3, [pc, #8]	; (b652c <HAL_Get_Pin_Mode+0xc>)
   b6524:	681b      	ldr	r3, [r3, #0]
   b6526:	68db      	ldr	r3, [r3, #12]
   b6528:	9301      	str	r3, [sp, #4]
   b652a:	bd08      	pop	{r3, pc}
   b652c:	0003022c 	.word	0x0003022c

000b6530 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6530:	b508      	push	{r3, lr}
   b6532:	4b02      	ldr	r3, [pc, #8]	; (b653c <HAL_GPIO_Write+0xc>)
   b6534:	681b      	ldr	r3, [r3, #0]
   b6536:	691b      	ldr	r3, [r3, #16]
   b6538:	9301      	str	r3, [sp, #4]
   b653a:	bd08      	pop	{r3, pc}
   b653c:	0003022c 	.word	0x0003022c

000b6540 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6540:	b508      	push	{r3, lr}
   b6542:	4b02      	ldr	r3, [pc, #8]	; (b654c <HAL_GPIO_Read+0xc>)
   b6544:	681b      	ldr	r3, [r3, #0]
   b6546:	695b      	ldr	r3, [r3, #20]
   b6548:	9301      	str	r3, [sp, #4]
   b654a:	bd08      	pop	{r3, pc}
   b654c:	0003022c 	.word	0x0003022c

000b6550 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   b6550:	b508      	push	{r3, lr}
   b6552:	4b02      	ldr	r3, [pc, #8]	; (b655c <HAL_DAC_Write+0xc>)
   b6554:	681b      	ldr	r3, [r3, #0]
   b6556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6558:	9301      	str	r3, [sp, #4]
   b655a:	bd08      	pop	{r3, pc}
   b655c:	0003022c 	.word	0x0003022c

000b6560 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6560:	b508      	push	{r3, lr}
   b6562:	4b02      	ldr	r3, [pc, #8]	; (b656c <hal_adc_read+0xc>)
   b6564:	681b      	ldr	r3, [r3, #0]
   b6566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6568:	9301      	str	r3, [sp, #4]
   b656a:	bd08      	pop	{r3, pc}
   b656c:	0003022c 	.word	0x0003022c

000b6570 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b6570:	b508      	push	{r3, lr}
   b6572:	4b02      	ldr	r3, [pc, #8]	; (b657c <hal_pwm_write_ext+0xc>)
   b6574:	681b      	ldr	r3, [r3, #0]
   b6576:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b6578:	9301      	str	r3, [sp, #4]
   b657a:	bd08      	pop	{r3, pc}
   b657c:	0003022c 	.word	0x0003022c

000b6580 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6580:	b508      	push	{r3, lr}
   b6582:	4b02      	ldr	r3, [pc, #8]	; (b658c <netdb_freeaddrinfo+0xc>)
   b6584:	681b      	ldr	r3, [r3, #0]
   b6586:	689b      	ldr	r3, [r3, #8]
   b6588:	9301      	str	r3, [sp, #4]
   b658a:	bd08      	pop	{r3, pc}
   b658c:	00030268 	.word	0x00030268

000b6590 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6590:	b508      	push	{r3, lr}
   b6592:	4b02      	ldr	r3, [pc, #8]	; (b659c <netdb_getaddrinfo+0xc>)
   b6594:	681b      	ldr	r3, [r3, #0]
   b6596:	68db      	ldr	r3, [r3, #12]
   b6598:	9301      	str	r3, [sp, #4]
   b659a:	bd08      	pop	{r3, pc}
   b659c:	00030268 	.word	0x00030268

000b65a0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b65a0:	b508      	push	{r3, lr}
   b65a2:	4b02      	ldr	r3, [pc, #8]	; (b65ac <panic_+0xc>)
   b65a4:	681b      	ldr	r3, [r3, #0]
   b65a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b65a8:	9301      	str	r3, [sp, #4]
   b65aa:	bd08      	pop	{r3, pc}
   b65ac:	00030260 	.word	0x00030260

000b65b0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b65b0:	b508      	push	{r3, lr}
   b65b2:	4b02      	ldr	r3, [pc, #8]	; (b65bc <log_message+0xc>)
   b65b4:	681b      	ldr	r3, [r3, #0]
   b65b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b65b8:	9301      	str	r3, [sp, #4]
   b65ba:	bd08      	pop	{r3, pc}
   b65bc:	00030260 	.word	0x00030260

000b65c0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b65c0:	b508      	push	{r3, lr}
   b65c2:	4b02      	ldr	r3, [pc, #8]	; (b65cc <spark_process+0xc>)
   b65c4:	681b      	ldr	r3, [r3, #0]
   b65c6:	689b      	ldr	r3, [r3, #8]
   b65c8:	9301      	str	r3, [sp, #4]
   b65ca:	bd08      	pop	{r3, pc}
   b65cc:	00030244 	.word	0x00030244

000b65d0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b65d0:	b508      	push	{r3, lr}
   b65d2:	4b02      	ldr	r3, [pc, #8]	; (b65dc <spark_set_random_seed_from_cloud_handler+0xc>)
   b65d4:	681b      	ldr	r3, [r3, #0]
   b65d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b65d8:	9301      	str	r3, [sp, #4]
   b65da:	bd08      	pop	{r3, pc}
   b65dc:	00030244 	.word	0x00030244

000b65e0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b65e0:	b508      	push	{r3, lr}
   b65e2:	4b02      	ldr	r3, [pc, #8]	; (b65ec <network_connect+0xc>)
   b65e4:	681b      	ldr	r3, [r3, #0]
   b65e6:	685b      	ldr	r3, [r3, #4]
   b65e8:	9301      	str	r3, [sp, #4]
   b65ea:	bd08      	pop	{r3, pc}
   b65ec:	00030240 	.word	0x00030240

000b65f0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b65f0:	b508      	push	{r3, lr}
   b65f2:	4b02      	ldr	r3, [pc, #8]	; (b65fc <network_connecting+0xc>)
   b65f4:	681b      	ldr	r3, [r3, #0]
   b65f6:	689b      	ldr	r3, [r3, #8]
   b65f8:	9301      	str	r3, [sp, #4]
   b65fa:	bd08      	pop	{r3, pc}
   b65fc:	00030240 	.word	0x00030240

000b6600 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6600:	b508      	push	{r3, lr}
   b6602:	4b02      	ldr	r3, [pc, #8]	; (b660c <network_disconnect+0xc>)
   b6604:	681b      	ldr	r3, [r3, #0]
   b6606:	68db      	ldr	r3, [r3, #12]
   b6608:	9301      	str	r3, [sp, #4]
   b660a:	bd08      	pop	{r3, pc}
   b660c:	00030240 	.word	0x00030240

000b6610 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6610:	b508      	push	{r3, lr}
   b6612:	4b02      	ldr	r3, [pc, #8]	; (b661c <network_ready+0xc>)
   b6614:	681b      	ldr	r3, [r3, #0]
   b6616:	691b      	ldr	r3, [r3, #16]
   b6618:	9301      	str	r3, [sp, #4]
   b661a:	bd08      	pop	{r3, pc}
   b661c:	00030240 	.word	0x00030240

000b6620 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6620:	b508      	push	{r3, lr}
   b6622:	4b02      	ldr	r3, [pc, #8]	; (b662c <network_on+0xc>)
   b6624:	681b      	ldr	r3, [r3, #0]
   b6626:	695b      	ldr	r3, [r3, #20]
   b6628:	9301      	str	r3, [sp, #4]
   b662a:	bd08      	pop	{r3, pc}
   b662c:	00030240 	.word	0x00030240

000b6630 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6630:	b508      	push	{r3, lr}
   b6632:	4b02      	ldr	r3, [pc, #8]	; (b663c <network_off+0xc>)
   b6634:	681b      	ldr	r3, [r3, #0]
   b6636:	699b      	ldr	r3, [r3, #24]
   b6638:	9301      	str	r3, [sp, #4]
   b663a:	bd08      	pop	{r3, pc}
   b663c:	00030240 	.word	0x00030240

000b6640 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6640:	b508      	push	{r3, lr}
   b6642:	4b02      	ldr	r3, [pc, #8]	; (b664c <network_listen+0xc>)
   b6644:	681b      	ldr	r3, [r3, #0]
   b6646:	69db      	ldr	r3, [r3, #28]
   b6648:	9301      	str	r3, [sp, #4]
   b664a:	bd08      	pop	{r3, pc}
   b664c:	00030240 	.word	0x00030240

000b6650 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6650:	b508      	push	{r3, lr}
   b6652:	4b02      	ldr	r3, [pc, #8]	; (b665c <network_listening+0xc>)
   b6654:	681b      	ldr	r3, [r3, #0]
   b6656:	6a1b      	ldr	r3, [r3, #32]
   b6658:	9301      	str	r3, [sp, #4]
   b665a:	bd08      	pop	{r3, pc}
   b665c:	00030240 	.word	0x00030240

000b6660 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6660:	b508      	push	{r3, lr}
   b6662:	4b02      	ldr	r3, [pc, #8]	; (b666c <network_set_listen_timeout+0xc>)
   b6664:	681b      	ldr	r3, [r3, #0]
   b6666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6668:	9301      	str	r3, [sp, #4]
   b666a:	bd08      	pop	{r3, pc}
   b666c:	00030240 	.word	0x00030240

000b6670 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6670:	b508      	push	{r3, lr}
   b6672:	4b02      	ldr	r3, [pc, #8]	; (b667c <network_get_listen_timeout+0xc>)
   b6674:	681b      	ldr	r3, [r3, #0]
   b6676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6678:	9301      	str	r3, [sp, #4]
   b667a:	bd08      	pop	{r3, pc}
   b667c:	00030240 	.word	0x00030240

000b6680 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6680:	b508      	push	{r3, lr}
   b6682:	4b02      	ldr	r3, [pc, #8]	; (b668c <network_is_on+0xc>)
   b6684:	681b      	ldr	r3, [r3, #0]
   b6686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6688:	9301      	str	r3, [sp, #4]
   b668a:	bd08      	pop	{r3, pc}
   b668c:	00030240 	.word	0x00030240

000b6690 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6690:	b508      	push	{r3, lr}
   b6692:	4b02      	ldr	r3, [pc, #8]	; (b669c <network_is_off+0xc>)
   b6694:	681b      	ldr	r3, [r3, #0]
   b6696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6698:	9301      	str	r3, [sp, #4]
   b669a:	bd08      	pop	{r3, pc}
   b669c:	00030240 	.word	0x00030240

000b66a0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b66a0:	b508      	push	{r3, lr}
   b66a2:	4b02      	ldr	r3, [pc, #8]	; (b66ac <set_system_mode+0xc>)
   b66a4:	681b      	ldr	r3, [r3, #0]
   b66a6:	685b      	ldr	r3, [r3, #4]
   b66a8:	9301      	str	r3, [sp, #4]
   b66aa:	bd08      	pop	{r3, pc}
   b66ac:	00030220 	.word	0x00030220

000b66b0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b66b0:	b508      	push	{r3, lr}
   b66b2:	4b02      	ldr	r3, [pc, #8]	; (b66bc <system_delay_ms+0xc>)
   b66b4:	681b      	ldr	r3, [r3, #0]
   b66b6:	695b      	ldr	r3, [r3, #20]
   b66b8:	9301      	str	r3, [sp, #4]
   b66ba:	bd08      	pop	{r3, pc}
   b66bc:	00030220 	.word	0x00030220

000b66c0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b66c0:	b508      	push	{r3, lr}
   b66c2:	4b02      	ldr	r3, [pc, #8]	; (b66cc <system_thread_set_state+0xc>)
   b66c4:	681b      	ldr	r3, [r3, #0]
   b66c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b66c8:	9301      	str	r3, [sp, #4]
   b66ca:	bd08      	pop	{r3, pc}
   b66cc:	00030220 	.word	0x00030220

000b66d0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b66d0:	b508      	push	{r3, lr}
   b66d2:	4b03      	ldr	r3, [pc, #12]	; (b66e0 <system_ctrl_set_app_request_handler+0x10>)
   b66d4:	681b      	ldr	r3, [r3, #0]
   b66d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b66da:	9301      	str	r3, [sp, #4]
   b66dc:	bd08      	pop	{r3, pc}
   b66de:	0000      	.short	0x0000
   b66e0:	00030220 	.word	0x00030220

000b66e4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b66e4:	b508      	push	{r3, lr}
   b66e6:	4b03      	ldr	r3, [pc, #12]	; (b66f4 <system_ctrl_set_result+0x10>)
   b66e8:	681b      	ldr	r3, [r3, #0]
   b66ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b66ee:	9301      	str	r3, [sp, #4]
   b66f0:	bd08      	pop	{r3, pc}
   b66f2:	0000      	.short	0x0000
   b66f4:	00030220 	.word	0x00030220

000b66f8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b66f8:	b508      	push	{r3, lr}
   b66fa:	4b02      	ldr	r3, [pc, #8]	; (b6704 <malloc+0xc>)
   b66fc:	681b      	ldr	r3, [r3, #0]
   b66fe:	681b      	ldr	r3, [r3, #0]
   b6700:	9301      	str	r3, [sp, #4]
   b6702:	bd08      	pop	{r3, pc}
   b6704:	0003021c 	.word	0x0003021c

000b6708 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6708:	b508      	push	{r3, lr}
   b670a:	4b02      	ldr	r3, [pc, #8]	; (b6714 <free+0xc>)
   b670c:	681b      	ldr	r3, [r3, #0]
   b670e:	685b      	ldr	r3, [r3, #4]
   b6710:	9301      	str	r3, [sp, #4]
   b6712:	bd08      	pop	{r3, pc}
   b6714:	0003021c 	.word	0x0003021c

000b6718 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b6718:	b508      	push	{r3, lr}
   b671a:	4b02      	ldr	r3, [pc, #8]	; (b6724 <snprintf+0xc>)
   b671c:	681b      	ldr	r3, [r3, #0]
   b671e:	69db      	ldr	r3, [r3, #28]
   b6720:	9301      	str	r3, [sp, #4]
   b6722:	bd08      	pop	{r3, pc}
   b6724:	0003021c 	.word	0x0003021c

000b6728 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6728:	b508      	push	{r3, lr}
   b672a:	4b02      	ldr	r3, [pc, #8]	; (b6734 <vsnprintf+0xc>)
   b672c:	681b      	ldr	r3, [r3, #0]
   b672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6730:	9301      	str	r3, [sp, #4]
   b6732:	bd08      	pop	{r3, pc}
   b6734:	0003021c 	.word	0x0003021c

000b6738 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6738:	b508      	push	{r3, lr}
   b673a:	4b02      	ldr	r3, [pc, #8]	; (b6744 <__errno+0xc>)
   b673c:	681b      	ldr	r3, [r3, #0]
   b673e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6740:	9301      	str	r3, [sp, #4]
   b6742:	bd08      	pop	{r3, pc}
   b6744:	0003021c 	.word	0x0003021c

000b6748 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6748:	b508      	push	{r3, lr}
   b674a:	4b02      	ldr	r3, [pc, #8]	; (b6754 <__assert_func+0xc>)
   b674c:	681b      	ldr	r3, [r3, #0]
   b674e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6750:	9301      	str	r3, [sp, #4]
   b6752:	bd08      	pop	{r3, pc}
   b6754:	0003021c 	.word	0x0003021c

000b6758 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6758:	b508      	push	{r3, lr}
   b675a:	4b02      	ldr	r3, [pc, #8]	; (b6764 <newlib_impure_ptr_callback+0xc>)
   b675c:	681b      	ldr	r3, [r3, #0]
   b675e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6760:	9301      	str	r3, [sp, #4]
   b6762:	bd08      	pop	{r3, pc}
   b6764:	0003021c 	.word	0x0003021c

000b6768 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6768:	2300      	movs	r3, #0
   b676a:	6840      	ldr	r0, [r0, #4]
   b676c:	461a      	mov	r2, r3
   b676e:	f7ff bf37 	b.w	b65e0 <network_connect>

000b6772 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6772:	6840      	ldr	r0, [r0, #4]
   b6774:	2200      	movs	r2, #0
   b6776:	2102      	movs	r1, #2
   b6778:	f7ff bf42 	b.w	b6600 <network_disconnect>

000b677c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b677c:	2200      	movs	r2, #0
   b677e:	6840      	ldr	r0, [r0, #4]
   b6780:	4611      	mov	r1, r2
   b6782:	f7ff bf35 	b.w	b65f0 <network_connecting>

000b6786 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6786:	2200      	movs	r2, #0
   b6788:	6840      	ldr	r0, [r0, #4]
   b678a:	4611      	mov	r1, r2
   b678c:	f7ff bf40 	b.w	b6610 <network_ready>

000b6790 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6790:	2300      	movs	r3, #0
   b6792:	6840      	ldr	r0, [r0, #4]
   b6794:	461a      	mov	r2, r3
   b6796:	4619      	mov	r1, r3
   b6798:	f7ff bf42 	b.w	b6620 <network_on>

000b679c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b679c:	2300      	movs	r3, #0
   b679e:	6840      	ldr	r0, [r0, #4]
   b67a0:	461a      	mov	r2, r3
   b67a2:	4619      	mov	r1, r3
   b67a4:	f7ff bf44 	b.w	b6630 <network_off>

000b67a8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b67a8:	6840      	ldr	r0, [r0, #4]
   b67aa:	2100      	movs	r1, #0
   b67ac:	f7ff bf68 	b.w	b6680 <network_is_on>

000b67b0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b67b0:	6840      	ldr	r0, [r0, #4]
   b67b2:	2100      	movs	r1, #0
   b67b4:	f7ff bf6c 	b.w	b6690 <network_is_off>

000b67b8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b67b8:	6840      	ldr	r0, [r0, #4]
   b67ba:	2200      	movs	r2, #0
   b67bc:	f081 0101 	eor.w	r1, r1, #1
   b67c0:	f7ff bf3e 	b.w	b6640 <network_listen>

000b67c4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b67c4:	6840      	ldr	r0, [r0, #4]
   b67c6:	2200      	movs	r2, #0
   b67c8:	f7ff bf4a 	b.w	b6660 <network_set_listen_timeout>

000b67cc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b67cc:	2200      	movs	r2, #0
   b67ce:	6840      	ldr	r0, [r0, #4]
   b67d0:	4611      	mov	r1, r2
   b67d2:	f7ff bf4d 	b.w	b6670 <network_get_listen_timeout>

000b67d6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b67d6:	2200      	movs	r2, #0
   b67d8:	6840      	ldr	r0, [r0, #4]
   b67da:	4611      	mov	r1, r2
   b67dc:	f7ff bf38 	b.w	b6650 <network_listening>

000b67e0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b67e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b67e4:	b095      	sub	sp, #84	; 0x54
   b67e6:	4614      	mov	r4, r2
   b67e8:	460d      	mov	r5, r1
   b67ea:	4607      	mov	r7, r0
    IPAddress addr;
   b67ec:	f000 fcfe 	bl	b71ec <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b67f0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b67f2:	221c      	movs	r2, #28
   b67f4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b67f6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b67f8:	f001 ffc4 	bl	b8784 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b67fc:	2340      	movs	r3, #64	; 0x40
   b67fe:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6800:	4620      	mov	r0, r4
   b6802:	466b      	mov	r3, sp
   b6804:	aa0c      	add	r2, sp, #48	; 0x30
   b6806:	2100      	movs	r1, #0
   b6808:	f7ff fec2 	bl	b6590 <netdb_getaddrinfo>
    if (!r) {
   b680c:	4604      	mov	r4, r0
   b680e:	2800      	cmp	r0, #0
   b6810:	d14b      	bne.n	b68aa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6812:	4602      	mov	r2, r0
   b6814:	2101      	movs	r1, #1
   b6816:	6868      	ldr	r0, [r5, #4]
   b6818:	f7ff fefa 	bl	b6610 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b681c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b681e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6820:	4622      	mov	r2, r4
   b6822:	6868      	ldr	r0, [r5, #4]
   b6824:	f7ff fef4 	bl	b6610 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6828:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b682a:	4681      	mov	r9, r0
        bool ok = false;
   b682c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b682e:	2e00      	cmp	r6, #0
   b6830:	d03b      	beq.n	b68aa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6832:	2900      	cmp	r1, #0
   b6834:	d139      	bne.n	b68aa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6836:	6873      	ldr	r3, [r6, #4]
   b6838:	2b02      	cmp	r3, #2
   b683a:	d003      	beq.n	b6844 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b683c:	2b0a      	cmp	r3, #10
   b683e:	d011      	beq.n	b6864 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6840:	69f6      	ldr	r6, [r6, #28]
   b6842:	e7f4      	b.n	b682e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6844:	f1b8 0f00 	cmp.w	r8, #0
   b6848:	d0fa      	beq.n	b6840 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b684a:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b684c:	a806      	add	r0, sp, #24
   b684e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6850:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6852:	f000 fd1b 	bl	b728c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6858:	1d3c      	adds	r4, r7, #4
   b685a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b685c:	682b      	ldr	r3, [r5, #0]
   b685e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6860:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6862:	e7ed      	b.n	b6840 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6864:	f1b9 0f00 	cmp.w	r9, #0
   b6868:	d0ea      	beq.n	b6840 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b686a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b686c:	2210      	movs	r2, #16
   b686e:	a801      	add	r0, sp, #4
   b6870:	f001 ff88 	bl	b8784 <memset>
                    a.v = 6;
   b6874:	2306      	movs	r3, #6
   b6876:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b687a:	ad01      	add	r5, sp, #4
   b687c:	f104 0308 	add.w	r3, r4, #8
   b6880:	3418      	adds	r4, #24
   b6882:	6818      	ldr	r0, [r3, #0]
   b6884:	6859      	ldr	r1, [r3, #4]
   b6886:	462a      	mov	r2, r5
   b6888:	c203      	stmia	r2!, {r0, r1}
   b688a:	3308      	adds	r3, #8
   b688c:	42a3      	cmp	r3, r4
   b688e:	4615      	mov	r5, r2
   b6890:	d1f7      	bne.n	b6882 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6892:	a901      	add	r1, sp, #4
   b6894:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6896:	ad07      	add	r5, sp, #28
   b6898:	f000 fcb6 	bl	b7208 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b689c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b689e:	1d3c      	adds	r4, r7, #4
   b68a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68a2:	682b      	ldr	r3, [r5, #0]
   b68a4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b68a6:	4649      	mov	r1, r9
   b68a8:	e7ca      	b.n	b6840 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b68aa:	9800      	ldr	r0, [sp, #0]
   b68ac:	f7ff fe68 	bl	b6580 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b68b0:	4638      	mov	r0, r7
   b68b2:	b015      	add	sp, #84	; 0x54
   b68b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b68b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b68b8:	4b02      	ldr	r3, [pc, #8]	; (b68c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b68ba:	4a03      	ldr	r2, [pc, #12]	; (b68c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b68bc:	601a      	str	r2, [r3, #0]
   b68be:	2200      	movs	r2, #0
   b68c0:	605a      	str	r2, [r3, #4]

} // spark
   b68c2:	4770      	bx	lr
   b68c4:	2003e6c4 	.word	0x2003e6c4
   b68c8:	000b9a64 	.word	0x000b9a64

000b68cc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b68cc:	2200      	movs	r2, #0
   b68ce:	6840      	ldr	r0, [r0, #4]
   b68d0:	4611      	mov	r1, r2
   b68d2:	f7ff be9d 	b.w	b6610 <network_ready>

000b68d6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b68d6:	2200      	movs	r2, #0
   b68d8:	6840      	ldr	r0, [r0, #4]
   b68da:	4611      	mov	r1, r2
   b68dc:	f7ff beb8 	b.w	b6650 <network_listening>

000b68e0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b68e0:	2200      	movs	r2, #0
   b68e2:	6840      	ldr	r0, [r0, #4]
   b68e4:	4611      	mov	r1, r2
   b68e6:	f7ff bec3 	b.w	b6670 <network_get_listen_timeout>

000b68ea <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b68ea:	6840      	ldr	r0, [r0, #4]
   b68ec:	2200      	movs	r2, #0
   b68ee:	f7ff beb7 	b.w	b6660 <network_set_listen_timeout>

000b68f2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b68f2:	6840      	ldr	r0, [r0, #4]
   b68f4:	2200      	movs	r2, #0
   b68f6:	f081 0101 	eor.w	r1, r1, #1
   b68fa:	f7ff bea1 	b.w	b6640 <network_listen>

000b68fe <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b68fe:	2300      	movs	r3, #0
   b6900:	6840      	ldr	r0, [r0, #4]
   b6902:	461a      	mov	r2, r3
   b6904:	4619      	mov	r1, r3
   b6906:	f7ff be93 	b.w	b6630 <network_off>

000b690a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b690a:	2300      	movs	r3, #0
   b690c:	6840      	ldr	r0, [r0, #4]
   b690e:	461a      	mov	r2, r3
   b6910:	4619      	mov	r1, r3
   b6912:	f7ff be85 	b.w	b6620 <network_on>

000b6916 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6916:	2200      	movs	r2, #0
   b6918:	6840      	ldr	r0, [r0, #4]
   b691a:	4611      	mov	r1, r2
   b691c:	f7ff be68 	b.w	b65f0 <network_connecting>

000b6920 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6920:	6840      	ldr	r0, [r0, #4]
   b6922:	2200      	movs	r2, #0
   b6924:	2102      	movs	r1, #2
   b6926:	f7ff be6b 	b.w	b6600 <network_disconnect>

000b692a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b692a:	2300      	movs	r3, #0
   b692c:	6840      	ldr	r0, [r0, #4]
   b692e:	461a      	mov	r2, r3
   b6930:	f7ff be56 	b.w	b65e0 <network_connect>

000b6934 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6934:	4b02      	ldr	r3, [pc, #8]	; (b6940 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6936:	2204      	movs	r2, #4
   b6938:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b693a:	4a02      	ldr	r2, [pc, #8]	; (b6944 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b693c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b693e:	4770      	bx	lr
   b6940:	2003e6cc 	.word	0x2003e6cc
   b6944:	000b9aa0 	.word	0x000b9aa0

000b6948 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6948:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b694a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b694c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6950:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6952:	2201      	movs	r2, #1
   b6954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6958:	f10d 0107 	add.w	r1, sp, #7
   b695c:	47a0      	blx	r4
}
   b695e:	b002      	add	sp, #8
   b6960:	bd10      	pop	{r4, pc}

000b6962 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6962:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6964:	6803      	ldr	r3, [r0, #0]
   b6966:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b696c:	46a4      	mov	ip, r4
}
   b696e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6972:	4760      	bx	ip

000b6974 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6974:	b513      	push	{r0, r1, r4, lr}
   b6976:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6978:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b697a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b697e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6980:	f10d 0107 	add.w	r1, sp, #7
   b6984:	2201      	movs	r2, #1
   b6986:	47a0      	blx	r4
}
   b6988:	b002      	add	sp, #8
   b698a:	bd10      	pop	{r4, pc}

000b698c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b698c:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b698e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6990:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6994:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6998:	429a      	cmp	r2, r3
int TCPClient::read() {
   b699a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b699c:	d008      	beq.n	b69b0 <_ZN9TCPClient4readEv+0x24>
   b699e:	6963      	ldr	r3, [r4, #20]
   b69a0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b69a4:	1c51      	adds	r1, r2, #1
   b69a6:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b69aa:	4413      	add	r3, r2
   b69ac:	7918      	ldrb	r0, [r3, #4]
}
   b69ae:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b69b0:	6803      	ldr	r3, [r0, #0]
   b69b2:	691b      	ldr	r3, [r3, #16]
   b69b4:	4798      	blx	r3
   b69b6:	2800      	cmp	r0, #0
   b69b8:	d1f1      	bne.n	b699e <_ZN9TCPClient4readEv+0x12>
   b69ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b69be:	e7f6      	b.n	b69ae <_ZN9TCPClient4readEv+0x22>

000b69c0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b69c0:	4770      	bx	lr

000b69c2 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b69c2:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b69c4:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b69c6:	43c0      	mvns	r0, r0
   b69c8:	0fc0      	lsrs	r0, r0, #31
   b69ca:	4770      	bx	lr

000b69cc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b69cc:	4770      	bx	lr
	...

000b69d0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b69d0:	4b06      	ldr	r3, [pc, #24]	; (b69ec <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b69d2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b69d4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b69d6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b69da:	d005      	beq.n	b69e8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b69dc:	4608      	mov	r0, r1
   b69de:	f001 f8ef 	bl	b7bc0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b69e2:	2800      	cmp	r0, #0
   b69e4:	bf08      	it	eq
   b69e6:	2400      	moveq	r4, #0
      }
   b69e8:	4620      	mov	r0, r4
   b69ea:	bd10      	pop	{r4, pc}
   b69ec:	000b9b08 	.word	0x000b9b08

000b69f0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b69f0:	b510      	push	{r4, lr}
   b69f2:	21ac      	movs	r1, #172	; 0xac
   b69f4:	4604      	mov	r4, r0
   b69f6:	f7fd fb52 	bl	b409e <_ZdlPvj>
   b69fa:	4620      	mov	r0, r4
   b69fc:	bd10      	pop	{r4, pc}

000b69fe <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b69fe:	21ac      	movs	r1, #172	; 0xac
   b6a00:	f7fd bb4d 	b.w	b409e <_ZdlPvj>

000b6a04 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   b6a08:	f04f 0800 	mov.w	r8, #0
   b6a0c:	b086      	sub	sp, #24
   b6a0e:	461c      	mov	r4, r3
   b6a10:	f8c0 8004 	str.w	r8, [r0, #4]
   b6a14:	4605      	mov	r5, r0
   b6a16:	460e      	mov	r6, r1
   b6a18:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6a1a:	4641      	mov	r1, r8
   b6a1c:	2210      	movs	r2, #16
   b6a1e:	a802      	add	r0, sp, #8
   b6a20:	f001 feb0 	bl	b8784 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6a24:	1c63      	adds	r3, r4, #1
   b6a26:	d009      	beq.n	b6a3c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6a28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6a2c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6a30:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6a34:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6a38:	435c      	muls	r4, r3
   b6a3a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6a3c:	6968      	ldr	r0, [r5, #20]
   b6a3e:	2310      	movs	r3, #16
   b6a40:	9300      	str	r3, [sp, #0]
   b6a42:	6800      	ldr	r0, [r0, #0]
   b6a44:	ab02      	add	r3, sp, #8
   b6a46:	f241 0205 	movw	r2, #4101	; 0x1005
   b6a4a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6a4e:	f7ff fc97 	bl	b6380 <sock_setsockopt>
    if (ret < 0) {
   b6a52:	2800      	cmp	r0, #0
   b6a54:	da07      	bge.n	b6a66 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6a56:	f7ff fe6f 	bl	b6738 <__errno>
   b6a5a:	6803      	ldr	r3, [r0, #0]
   b6a5c:	606b      	str	r3, [r5, #4]
        return 0;
   b6a5e:	2000      	movs	r0, #0
}
   b6a60:	b006      	add	sp, #24
   b6a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6a66:	6968      	ldr	r0, [r5, #20]
   b6a68:	2300      	movs	r3, #0
   b6a6a:	6800      	ldr	r0, [r0, #0]
   b6a6c:	463a      	mov	r2, r7
   b6a6e:	4631      	mov	r1, r6
   b6a70:	f7ff fca6 	bl	b63c0 <sock_send>
    if (ret < 0) {
   b6a74:	1e03      	subs	r3, r0, #0
   b6a76:	dbee      	blt.n	b6a56 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6a78:	4618      	mov	r0, r3
   b6a7a:	e7f1      	b.n	b6a60 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6a7c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6a7c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b6a7e:	6984      	ldr	r4, [r0, #24]
   b6a80:	4b0a      	ldr	r3, [pc, #40]	; (b6aac <_ZN9TCPClientD1Ev+0x30>)
   b6a82:	6003      	str	r3, [r0, #0]
   b6a84:	4605      	mov	r5, r0
   b6a86:	b17c      	cbz	r4, b6aa8 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b6a88:	6863      	ldr	r3, [r4, #4]
   b6a8a:	3b01      	subs	r3, #1
   b6a8c:	6063      	str	r3, [r4, #4]
   b6a8e:	b95b      	cbnz	r3, b6aa8 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b6a90:	6823      	ldr	r3, [r4, #0]
   b6a92:	4620      	mov	r0, r4
   b6a94:	689b      	ldr	r3, [r3, #8]
   b6a96:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6a98:	68a3      	ldr	r3, [r4, #8]
   b6a9a:	3b01      	subs	r3, #1
   b6a9c:	60a3      	str	r3, [r4, #8]
   b6a9e:	b91b      	cbnz	r3, b6aa8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b6aa0:	6823      	ldr	r3, [r4, #0]
   b6aa2:	4620      	mov	r0, r4
   b6aa4:	68db      	ldr	r3, [r3, #12]
   b6aa6:	4798      	blx	r3
   b6aa8:	4628      	mov	r0, r5
   b6aaa:	bd38      	pop	{r3, r4, r5, pc}
   b6aac:	000b9b18 	.word	0x000b9b18

000b6ab0 <_ZN9TCPClientD0Ev>:
   b6ab0:	b510      	push	{r4, lr}
   b6ab2:	4604      	mov	r4, r0
   b6ab4:	f7ff ffe2 	bl	b6a7c <_ZN9TCPClientD1Ev>
   b6ab8:	4620      	mov	r0, r4
   b6aba:	211c      	movs	r1, #28
   b6abc:	f7fd faef 	bl	b409e <_ZdlPvj>
   b6ac0:	4620      	mov	r0, r4
   b6ac2:	bd10      	pop	{r4, pc}

000b6ac4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6ac4:	b530      	push	{r4, r5, lr}
   b6ac6:	b087      	sub	sp, #28
   b6ac8:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6aca:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6acc:	4668      	mov	r0, sp
   b6ace:	f000 fbdd 	bl	b728c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ad4:	3404      	adds	r4, #4
   b6ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ad8:	682b      	ldr	r3, [r5, #0]
   b6ada:	7023      	strb	r3, [r4, #0]
    }
   b6adc:	b007      	add	sp, #28
   b6ade:	bd30      	pop	{r4, r5, pc}

000b6ae0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b6ae0:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b6ae2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b6ae4:	4b05      	ldr	r3, [pc, #20]	; (b6afc <_ZN9TCPClient8remoteIPEv+0x1c>)
   b6ae6:	4604      	mov	r4, r0
   b6ae8:	358c      	adds	r5, #140	; 0x8c
   b6aea:	f844 3b04 	str.w	r3, [r4], #4
   b6aee:	4606      	mov	r6, r0
   b6af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6af4:	682b      	ldr	r3, [r5, #0]
   b6af6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b6af8:	4630      	mov	r0, r6
   b6afa:	bd70      	pop	{r4, r5, r6, pc}
   b6afc:	000b9bec 	.word	0x000b9bec

000b6b00 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6b04:	4698      	mov	r8, r3
    stop();
   b6b06:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6b08:	b093      	sub	sp, #76	; 0x4c
   b6b0a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b6b0c:	2400      	movs	r4, #0
    stop();
   b6b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6b10:	4606      	mov	r6, r0
   b6b12:	4617      	mov	r7, r2
    stop();
   b6b14:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6b16:	4628      	mov	r0, r5
   b6b18:	466b      	mov	r3, sp
   b6b1a:	4622      	mov	r2, r4
   b6b1c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b6b1e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6b20:	f7ff fd36 	bl	b6590 <netdb_getaddrinfo>
   b6b24:	4605      	mov	r5, r0
   b6b26:	2800      	cmp	r0, #0
   b6b28:	d163      	bne.n	b6bf2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b6b2a:	9b00      	ldr	r3, [sp, #0]
   b6b2c:	2b00      	cmp	r3, #0
   b6b2e:	d04b      	beq.n	b6bc8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6b30:	695b      	ldr	r3, [r3, #20]
   b6b32:	2b00      	cmp	r3, #0
   b6b34:	d048      	beq.n	b6bc8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b6b36:	a806      	add	r0, sp, #24
   b6b38:	f000 fb58 	bl	b71ec <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6b3c:	9b00      	ldr	r3, [sp, #0]
   b6b3e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6b40:	7863      	ldrb	r3, [r4, #1]
   b6b42:	2b02      	cmp	r3, #2
   b6b44:	d104      	bne.n	b6b50 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6b46:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6b48:	a806      	add	r0, sp, #24
   b6b4a:	f7ff ffbb 	bl	b6ac4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b6b4e:	e026      	b.n	b6b9e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6b50:	2b0a      	cmp	r3, #10
   b6b52:	d124      	bne.n	b6b9e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6b54:	2211      	movs	r2, #17
   b6b56:	4629      	mov	r1, r5
   b6b58:	a801      	add	r0, sp, #4
   b6b5a:	f001 fe13 	bl	b8784 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6b5e:	68a3      	ldr	r3, [r4, #8]
   b6b60:	2b00      	cmp	r3, #0
   b6b62:	d038      	beq.n	b6bd6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6b64:	f104 0308 	add.w	r3, r4, #8
   b6b68:	f10d 0c04 	add.w	ip, sp, #4
   b6b6c:	3418      	adds	r4, #24
   b6b6e:	6818      	ldr	r0, [r3, #0]
   b6b70:	6859      	ldr	r1, [r3, #4]
   b6b72:	4662      	mov	r2, ip
   b6b74:	c203      	stmia	r2!, {r0, r1}
   b6b76:	3308      	adds	r3, #8
   b6b78:	42a3      	cmp	r3, r4
   b6b7a:	4694      	mov	ip, r2
   b6b7c:	d1f7      	bne.n	b6b6e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6b7e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6b80:	a901      	add	r1, sp, #4
   b6b82:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6b84:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6b88:	f000 fb3e 	bl	b7208 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6b8c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6b90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6b94:	ac07      	add	r4, sp, #28
   b6b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6b98:	f8dc 3000 	ldr.w	r3, [ip]
   b6b9c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b6b9e:	a806      	add	r0, sp, #24
   b6ba0:	f000 fb44 	bl	b722c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6ba4:	b180      	cbz	r0, b6bc8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b6ba6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6ba8:	ad07      	add	r5, sp, #28
   b6baa:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b6bae:	4b12      	ldr	r3, [pc, #72]	; (b6bf8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6bb0:	930c      	str	r3, [sp, #48]	; 0x30
   b6bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6bb4:	ac0d      	add	r4, sp, #52	; 0x34
   b6bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6bb8:	682b      	ldr	r3, [r5, #0]
   b6bba:	7023      	strb	r3, [r4, #0]
   b6bbc:	463a      	mov	r2, r7
   b6bbe:	4643      	mov	r3, r8
   b6bc0:	a90c      	add	r1, sp, #48	; 0x30
   b6bc2:	4630      	mov	r0, r6
   b6bc4:	47c8      	blx	r9
   b6bc6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6bc8:	9800      	ldr	r0, [sp, #0]
   b6bca:	f7ff fcd9 	bl	b6580 <netdb_freeaddrinfo>
}
   b6bce:	4628      	mov	r0, r5
   b6bd0:	b013      	add	sp, #76	; 0x4c
   b6bd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6bd6:	68e3      	ldr	r3, [r4, #12]
   b6bd8:	2b00      	cmp	r3, #0
   b6bda:	d1c3      	bne.n	b6b64 <_ZN9TCPClient7connectEPKctm+0x64>
   b6bdc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6be0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b6be4:	f7ff fc44 	bl	b6470 <inet_htonl>
   b6be8:	4581      	cmp	r9, r0
   b6bea:	d1bb      	bne.n	b6b64 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b6bec:	f104 0114 	add.w	r1, r4, #20
   b6bf0:	e7aa      	b.n	b6b48 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6bf2:	4625      	mov	r5, r4
   b6bf4:	e7e8      	b.n	b6bc8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6bf6:	bf00      	nop
   b6bf8:	000b9bec 	.word	0x000b9bec

000b6bfc <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b6bfc:	b538      	push	{r3, r4, r5, lr}
   b6bfe:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6c00:	681a      	ldr	r2, [r3, #0]
   b6c02:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b6c04:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b6c06:	da10      	bge.n	b6c2a <_ZN9TCPClient9connectedEv+0x2e>
   b6c08:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6c0c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6c10:	429a      	cmp	r2, r3
   b6c12:	d10a      	bne.n	b6c2a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b6c14:	6803      	ldr	r3, [r0, #0]
   b6c16:	691b      	ldr	r3, [r3, #16]
   b6c18:	4798      	blx	r3
        if (!rv) {
   b6c1a:	4604      	mov	r4, r0
   b6c1c:	b928      	cbnz	r0, b6c2a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b6c1e:	682b      	ldr	r3, [r5, #0]
   b6c20:	4628      	mov	r0, r5
   b6c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6c24:	4798      	blx	r3
        rv = available();
   b6c26:	4620      	mov	r0, r4
}
   b6c28:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b6c2a:	2001      	movs	r0, #1
   b6c2c:	e7fc      	b.n	b6c28 <_ZN9TCPClient9connectedEv+0x2c>

000b6c2e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b6c2e:	b510      	push	{r4, lr}
   b6c30:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6c32:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6c36:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6c3a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b6c3c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6c3e:	d005      	beq.n	b6c4c <_ZN9TCPClient4peekEv+0x1e>
   b6c40:	6963      	ldr	r3, [r4, #20]
   b6c42:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6c46:	4413      	add	r3, r2
   b6c48:	7918      	ldrb	r0, [r3, #4]
}
   b6c4a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6c4c:	6803      	ldr	r3, [r0, #0]
   b6c4e:	691b      	ldr	r3, [r3, #16]
   b6c50:	4798      	blx	r3
   b6c52:	2800      	cmp	r0, #0
   b6c54:	d1f4      	bne.n	b6c40 <_ZN9TCPClient4peekEv+0x12>
   b6c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6c5a:	e7f6      	b.n	b6c4a <_ZN9TCPClient4peekEv+0x1c>

000b6c5c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c5e:	6943      	ldr	r3, [r0, #20]
   b6c60:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b6c62:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6c66:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6c6a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6c6c:	4605      	mov	r5, r0
   b6c6e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6c70:	d016      	beq.n	b6ca0 <_ZN9TCPClient4readEPhj+0x44>
   b6c72:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b6c74:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6c78:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b6c7c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b6c7e:	42bc      	cmp	r4, r7
   b6c80:	bf28      	it	cs
   b6c82:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b6c84:	3304      	adds	r3, #4
   b6c86:	4622      	mov	r2, r4
   b6c88:	4419      	add	r1, r3
   b6c8a:	4630      	mov	r0, r6
   b6c8c:	f001 fd6c 	bl	b8768 <memcpy>
   b6c90:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b6c92:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b6c96:	4423      	add	r3, r4
   b6c98:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b6c9c:	4620      	mov	r0, r4
   b6c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b6ca0:	6803      	ldr	r3, [r0, #0]
   b6ca2:	691b      	ldr	r3, [r3, #16]
   b6ca4:	4798      	blx	r3
   b6ca6:	2800      	cmp	r0, #0
   b6ca8:	d1e3      	bne.n	b6c72 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b6caa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b6cae:	e7f5      	b.n	b6c9c <_ZN9TCPClient4readEPhj+0x40>

000b6cb0 <_ZN9TCPClient12flush_bufferEv>:
   b6cb0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b6cb2:	2300      	movs	r3, #0
   b6cb4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b6cb8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b6cba:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b6cbe:	4770      	bx	lr

000b6cc0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6cc4:	461f      	mov	r7, r3
    stop();
   b6cc6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6cc8:	460c      	mov	r4, r1
    stop();
   b6cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6ccc:	b08a      	sub	sp, #40	; 0x28
   b6cce:	4605      	mov	r5, r0
   b6cd0:	4616      	mov	r6, r2
    stop();
   b6cd2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b6cd4:	7d23      	ldrb	r3, [r4, #20]
   b6cd6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b6cda:	2b04      	cmp	r3, #4
   b6cdc:	bf0c      	ite	eq
   b6cde:	2002      	moveq	r0, #2
   b6ce0:	200a      	movne	r0, #10
   b6ce2:	2206      	movs	r2, #6
   b6ce4:	2101      	movs	r1, #1
   b6ce6:	f7ff fb73 	bl	b63d0 <sock_socket>
   b6cea:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b6cee:	696b      	ldr	r3, [r5, #20]
   b6cf0:	681b      	ldr	r3, [r3, #0]
   b6cf2:	2b00      	cmp	r3, #0
   b6cf4:	da08      	bge.n	b6d08 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b6cf6:	682b      	ldr	r3, [r5, #0]
   b6cf8:	4628      	mov	r0, r5
   b6cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6cfc:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b6cfe:	4798      	blx	r3
}
   b6d00:	4620      	mov	r0, r4
   b6d02:	b00a      	add	sp, #40	; 0x28
   b6d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b6d08:	4628      	mov	r0, r5
   b6d0a:	f7ff ffd1 	bl	b6cb0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b6d0e:	b1b7      	cbz	r7, b6d3e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b6d10:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6d12:	a903      	add	r1, sp, #12
   b6d14:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b6d16:	9303      	str	r3, [sp, #12]
   b6d18:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6d1c:	f7ff fbe8 	bl	b64f0 <if_index_to_name>
   b6d20:	2800      	cmp	r0, #0
   b6d22:	d1e8      	bne.n	b6cf6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b6d24:	6968      	ldr	r0, [r5, #20]
   b6d26:	2306      	movs	r3, #6
   b6d28:	9300      	str	r3, [sp, #0]
   b6d2a:	6800      	ldr	r0, [r0, #0]
   b6d2c:	ab03      	add	r3, sp, #12
   b6d2e:	f241 020b 	movw	r2, #4107	; 0x100b
   b6d32:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6d36:	f7ff fb23 	bl	b6380 <sock_setsockopt>
   b6d3a:	2800      	cmp	r0, #0
   b6d3c:	d1db      	bne.n	b6cf6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b6d3e:	221c      	movs	r2, #28
   b6d40:	2100      	movs	r1, #0
   b6d42:	a803      	add	r0, sp, #12
   b6d44:	f001 fd1e 	bl	b8784 <memset>
    if (ip.version() == 4) {
   b6d48:	7d23      	ldrb	r3, [r4, #20]
   b6d4a:	2b04      	cmp	r3, #4
   b6d4c:	d11d      	bne.n	b6d8a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b6d4e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b6d52:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b6d54:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b6d58:	f7ff fb92 	bl	b6480 <inet_htons>
   b6d5c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b6d60:	6860      	ldr	r0, [r4, #4]
   b6d62:	f7ff fb85 	bl	b6470 <inet_htonl>
   b6d66:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b6d68:	696b      	ldr	r3, [r5, #20]
   b6d6a:	221c      	movs	r2, #28
   b6d6c:	6818      	ldr	r0, [r3, #0]
   b6d6e:	a903      	add	r1, sp, #12
   b6d70:	f7ff fb16 	bl	b63a0 <sock_connect>
   b6d74:	2800      	cmp	r0, #0
   b6d76:	d1be      	bne.n	b6cf6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b6d78:	3404      	adds	r4, #4
   b6d7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6d7c:	696d      	ldr	r5, [r5, #20]
   b6d7e:	358c      	adds	r5, #140	; 0x8c
   b6d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6d82:	6823      	ldr	r3, [r4, #0]
   b6d84:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b6d86:	2401      	movs	r4, #1
   b6d88:	e7ba      	b.n	b6d00 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b6d8a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b6d8e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b6d90:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b6d94:	f7ff fb74 	bl	b6480 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6d98:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b6d9a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6d9e:	1d23      	adds	r3, r4, #4
   b6da0:	f104 0714 	add.w	r7, r4, #20
   b6da4:	6818      	ldr	r0, [r3, #0]
   b6da6:	6859      	ldr	r1, [r3, #4]
   b6da8:	4632      	mov	r2, r6
   b6daa:	c203      	stmia	r2!, {r0, r1}
   b6dac:	3308      	adds	r3, #8
   b6dae:	42bb      	cmp	r3, r7
   b6db0:	4616      	mov	r6, r2
   b6db2:	d1f7      	bne.n	b6da4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b6db4:	e7d8      	b.n	b6d68 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b6db8 <_ZN9TCPClient9availableEv>:
{
   b6db8:	b530      	push	{r4, r5, lr}
   b6dba:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b6dbc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b6dc0:	b08b      	sub	sp, #44	; 0x2c
   b6dc2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b6dc4:	b12b      	cbz	r3, b6dd2 <_ZN9TCPClient9availableEv+0x1a>
   b6dc6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b6dca:	429a      	cmp	r2, r3
   b6dcc:	d101      	bne.n	b6dd2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b6dce:	f7ff ff6f 	bl	b6cb0 <_ZN9TCPClient12flush_bufferEv>
   b6dd2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b6dd4:	6808      	ldr	r0, [r1, #0]
   b6dd6:	2800      	cmp	r0, #0
   b6dd8:	db18      	blt.n	b6e0c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b6dda:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b6dde:	2d7f      	cmp	r5, #127	; 0x7f
   b6de0:	d814      	bhi.n	b6e0c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b6de2:	3104      	adds	r1, #4
   b6de4:	2308      	movs	r3, #8
   b6de6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b6dea:	4429      	add	r1, r5
   b6dec:	f7ff fae0 	bl	b63b0 <sock_recv>
            if (ret > 0) {
   b6df0:	2800      	cmp	r0, #0
   b6df2:	dd13      	ble.n	b6e1c <_ZN9TCPClient9availableEv+0x64>
   b6df4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b6df6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6dfa:	b90a      	cbnz	r2, b6e00 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b6dfc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b6e00:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b6e02:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6e06:	4410      	add	r0, r2
   b6e08:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b6e0c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b6e0e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b6e12:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b6e16:	1ac0      	subs	r0, r0, r3
   b6e18:	b00b      	add	sp, #44	; 0x2c
   b6e1a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b6e1c:	f7ff fc8c 	bl	b6738 <__errno>
   b6e20:	6803      	ldr	r3, [r0, #0]
   b6e22:	2b0b      	cmp	r3, #11
   b6e24:	d0f2      	beq.n	b6e0c <_ZN9TCPClient9availableEv+0x54>
   b6e26:	f7ff fc87 	bl	b6738 <__errno>
   b6e2a:	6803      	ldr	r3, [r0, #0]
   b6e2c:	2b0b      	cmp	r3, #11
   b6e2e:	d0ed      	beq.n	b6e0c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b6e30:	2320      	movs	r3, #32
   b6e32:	2500      	movs	r5, #0
   b6e34:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6e38:	f7ff fc7e 	bl	b6738 <__errno>
   b6e3c:	6803      	ldr	r3, [r0, #0]
   b6e3e:	9301      	str	r3, [sp, #4]
   b6e40:	4b08      	ldr	r3, [pc, #32]	; (b6e64 <_ZN9TCPClient9availableEv+0xac>)
   b6e42:	4909      	ldr	r1, [pc, #36]	; (b6e68 <_ZN9TCPClient9availableEv+0xb0>)
   b6e44:	9300      	str	r3, [sp, #0]
   b6e46:	aa02      	add	r2, sp, #8
   b6e48:	462b      	mov	r3, r5
   b6e4a:	2032      	movs	r0, #50	; 0x32
   b6e4c:	f7ff fbb0 	bl	b65b0 <log_message>
                    sock_close(d_->sock);
   b6e50:	6963      	ldr	r3, [r4, #20]
   b6e52:	6818      	ldr	r0, [r3, #0]
   b6e54:	f7ff fa9c 	bl	b6390 <sock_close>
   b6e58:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b6e5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6e5e:	601a      	str	r2, [r3, #0]
   b6e60:	e7d4      	b.n	b6e0c <_ZN9TCPClient9availableEv+0x54>
   b6e62:	bf00      	nop
   b6e64:	000b9adb 	.word	0x000b9adb
   b6e68:	000b9ad4 	.word	0x000b9ad4

000b6e6c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6e6c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b6e6e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b6e70:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b6e72:	6818      	ldr	r0, [r3, #0]
   b6e74:	2800      	cmp	r0, #0
   b6e76:	db01      	blt.n	b6e7c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6e78:	f7ff fa8a 	bl	b6390 <sock_close>
   b6e7c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b6e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6e82:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6e84:	6960      	ldr	r0, [r4, #20]
   b6e86:	2211      	movs	r2, #17
   b6e88:	2100      	movs	r1, #0
   b6e8a:	308c      	adds	r0, #140	; 0x8c
   b6e8c:	f001 fc7a 	bl	b8784 <memset>
    flush_buffer();
   b6e90:	4620      	mov	r0, r4
}
   b6e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b6e96:	f7ff bf0b 	b.w	b6cb0 <_ZN9TCPClient12flush_bufferEv>

000b6e9a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b6e9a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b6e9c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b6e9e:	4604      	mov	r4, r0
          total(0) {
   b6ea0:	6001      	str	r1, [r0, #0]
   b6ea2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b6ea6:	3088      	adds	r0, #136	; 0x88
   b6ea8:	f000 f9a0 	bl	b71ec <_ZN9IPAddressC1Ev>
}
   b6eac:	4620      	mov	r0, r4
   b6eae:	bd10      	pop	{r4, pc}

000b6eb0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b6eb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6eb2:	2300      	movs	r3, #0
   b6eb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6eb8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b6ebc:	4a0e      	ldr	r2, [pc, #56]	; (b6ef8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b6ebe:	6103      	str	r3, [r0, #16]
   b6ec0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6ec2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b6ec4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6ec6:	20ac      	movs	r0, #172	; 0xac
   b6ec8:	9101      	str	r1, [sp, #4]
   b6eca:	f7fd f8e4 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6ece:	1e05      	subs	r5, r0, #0
   b6ed0:	f105 060c 	add.w	r6, r5, #12
   b6ed4:	d008      	beq.n	b6ee8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b6ed6:	2301      	movs	r3, #1
   b6ed8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6edc:	4b07      	ldr	r3, [pc, #28]	; (b6efc <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6ede:	9901      	ldr	r1, [sp, #4]
   b6ee0:	602b      	str	r3, [r5, #0]
   b6ee2:	4630      	mov	r0, r6
   b6ee4:	f7ff ffd9 	bl	b6e9a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b6ee8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b6eea:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b6eee:	f7ff fedf 	bl	b6cb0 <_ZN9TCPClient12flush_bufferEv>
}
   b6ef2:	b002      	add	sp, #8
   b6ef4:	bd70      	pop	{r4, r5, r6, pc}
   b6ef6:	bf00      	nop
   b6ef8:	000b9b18 	.word	0x000b9b18
   b6efc:	000b9af4 	.word	0x000b9af4

000b6f00 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b6f00:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b6f02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b6f06:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b6f08:	f7ff ffd2 	bl	b6eb0 <_ZN9TCPClientC1Ei>
}
   b6f0c:	4620      	mov	r0, r4
   b6f0e:	bd10      	pop	{r4, pc}

000b6f10 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b6f10:	b510      	push	{r4, lr}
   b6f12:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b6f14:	6800      	ldr	r0, [r0, #0]
   b6f16:	2800      	cmp	r0, #0
   b6f18:	db01      	blt.n	b6f1e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b6f1a:	f7ff fa39 	bl	b6390 <sock_close>
    }
}
   b6f1e:	4620      	mov	r0, r4
   b6f20:	bd10      	pop	{r4, pc}

000b6f22 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b6f22:	300c      	adds	r0, #12
   b6f24:	f7ff bff4 	b.w	b6f10 <_ZN9TCPClient4DataD1Ev>

000b6f28 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6f28:	4770      	bx	lr

000b6f2a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6f2a:	7441      	strb	r1, [r0, #17]
}
   b6f2c:	4770      	bx	lr

000b6f2e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6f2e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6f30:	7c00      	ldrb	r0, [r0, #16]
   b6f32:	f7ff fa85 	bl	b6440 <hal_usart_available_data_for_write>
}
   b6f36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6f3a:	bd08      	pop	{r3, pc}

000b6f3c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6f3c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6f3e:	7c00      	ldrb	r0, [r0, #16]
   b6f40:	f7ff fa56 	bl	b63f0 <hal_usart_available>
}
   b6f44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6f48:	bd08      	pop	{r3, pc}

000b6f4a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6f4a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6f4c:	7c00      	ldrb	r0, [r0, #16]
   b6f4e:	f7ff fa5f 	bl	b6410 <hal_usart_peek>
}
   b6f52:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6f56:	bd08      	pop	{r3, pc}

000b6f58 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6f58:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6f5a:	7c00      	ldrb	r0, [r0, #16]
   b6f5c:	f7ff fa50 	bl	b6400 <hal_usart_read>
}
   b6f60:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6f64:	bd08      	pop	{r3, pc}

000b6f66 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6f66:	7c00      	ldrb	r0, [r0, #16]
   b6f68:	f7ff ba5a 	b.w	b6420 <hal_usart_flush>

000b6f6c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6f6e:	7c45      	ldrb	r5, [r0, #17]
{
   b6f70:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6f72:	b12d      	cbz	r5, b6f80 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6f74:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6f76:	b003      	add	sp, #12
   b6f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6f7c:	f7ff ba30 	b.w	b63e0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6f80:	7c00      	ldrb	r0, [r0, #16]
   b6f82:	9101      	str	r1, [sp, #4]
   b6f84:	f7ff fa5c 	bl	b6440 <hal_usart_available_data_for_write>
   b6f88:	2800      	cmp	r0, #0
   b6f8a:	9901      	ldr	r1, [sp, #4]
   b6f8c:	dcf2      	bgt.n	b6f74 <_ZN11USARTSerial5writeEh+0x8>
}
   b6f8e:	4628      	mov	r0, r5
   b6f90:	b003      	add	sp, #12
   b6f92:	bd30      	pop	{r4, r5, pc}

000b6f94 <_ZN11USARTSerialD0Ev>:
   b6f94:	b510      	push	{r4, lr}
   b6f96:	2114      	movs	r1, #20
   b6f98:	4604      	mov	r4, r0
   b6f9a:	f7fd f880 	bl	b409e <_ZdlPvj>
   b6f9e:	4620      	mov	r0, r4
   b6fa0:	bd10      	pop	{r4, pc}
	...

000b6fa4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6fa4:	b510      	push	{r4, lr}
   b6fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6faa:	4604      	mov	r4, r0
   b6fac:	4608      	mov	r0, r1
   b6fae:	4611      	mov	r1, r2
   b6fb0:	2200      	movs	r2, #0
   b6fb2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6fb6:	4b04      	ldr	r3, [pc, #16]	; (b6fc8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6fb8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6fba:	2301      	movs	r3, #1
  _serial = serial;
   b6fbc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6fbe:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6fc0:	f7ff fa46 	bl	b6450 <hal_usart_init_ex>
}
   b6fc4:	4620      	mov	r0, r4
   b6fc6:	bd10      	pop	{r4, pc}
   b6fc8:	000b9b64 	.word	0x000b9b64

000b6fcc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6fcc:	4770      	bx	lr

000b6fce <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6fd0:	4606      	mov	r6, r0
   b6fd2:	4615      	mov	r5, r2
   b6fd4:	460c      	mov	r4, r1
   b6fd6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6fd8:	42bc      	cmp	r4, r7
   b6fda:	d006      	beq.n	b6fea <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6fdc:	6833      	ldr	r3, [r6, #0]
   b6fde:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6fe2:	689b      	ldr	r3, [r3, #8]
   b6fe4:	4630      	mov	r0, r6
   b6fe6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6fe8:	e7f6      	b.n	b6fd8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6fea:	4628      	mov	r0, r5
   b6fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6fee <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6fee:	7c00      	ldrb	r0, [r0, #16]
   b6ff0:	2200      	movs	r2, #0
   b6ff2:	f7ff b94d 	b.w	b6290 <hal_i2c_write>

000b6ff6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6ff6:	7c00      	ldrb	r0, [r0, #16]
   b6ff8:	2100      	movs	r1, #0
   b6ffa:	f7ff b951 	b.w	b62a0 <hal_i2c_available>

000b6ffe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6ffe:	7c00      	ldrb	r0, [r0, #16]
   b7000:	2100      	movs	r1, #0
   b7002:	f7ff b955 	b.w	b62b0 <hal_i2c_read>

000b7006 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7006:	7c00      	ldrb	r0, [r0, #16]
   b7008:	2100      	movs	r1, #0
   b700a:	f7ff b959 	b.w	b62c0 <hal_i2c_peek>

000b700e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b700e:	7c00      	ldrb	r0, [r0, #16]
   b7010:	2100      	movs	r1, #0
   b7012:	f7ff b95d 	b.w	b62d0 <hal_i2c_flush>

000b7016 <_ZN7TwoWireD0Ev>:
   b7016:	b510      	push	{r4, lr}
   b7018:	2114      	movs	r1, #20
   b701a:	4604      	mov	r4, r0
   b701c:	f7fd f83f 	bl	b409e <_ZdlPvj>
   b7020:	4620      	mov	r0, r4
   b7022:	bd10      	pop	{r4, pc}

000b7024 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7024:	b510      	push	{r4, lr}
   b7026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b702a:	4604      	mov	r4, r0
   b702c:	4608      	mov	r0, r1
   b702e:	2100      	movs	r1, #0
   b7030:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7034:	4b03      	ldr	r3, [pc, #12]	; (b7044 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7036:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7038:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b703a:	4611      	mov	r1, r2
   b703c:	f7ff f958 	bl	b62f0 <hal_i2c_init>
}
   b7040:	4620      	mov	r0, r4
   b7042:	bd10      	pop	{r4, pc}
   b7044:	000b9b94 	.word	0x000b9b94

000b7048 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b7048:	7c00      	ldrb	r0, [r0, #16]
   b704a:	2200      	movs	r2, #0
   b704c:	f7ff b900 	b.w	b6250 <hal_i2c_set_speed>

000b7050 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7050:	2300      	movs	r3, #0
   b7052:	7c00      	ldrb	r0, [r0, #16]
   b7054:	461a      	mov	r2, r3
   b7056:	4619      	mov	r1, r3
   b7058:	f7ff b902 	b.w	b6260 <hal_i2c_begin>

000b705c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b705c:	7c00      	ldrb	r0, [r0, #16]
   b705e:	2200      	movs	r2, #0
   b7060:	f7ff b906 	b.w	b6270 <hal_i2c_begin_transmission>

000b7064 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7064:	b2c9      	uxtb	r1, r1
   b7066:	f7ff bff9 	b.w	b705c <_ZN7TwoWire17beginTransmissionEh>

000b706a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b706a:	7c00      	ldrb	r0, [r0, #16]
   b706c:	2200      	movs	r2, #0
   b706e:	f7ff b907 	b.w	b6280 <hal_i2c_end_transmission>

000b7072 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7072:	2101      	movs	r1, #1
   b7074:	f7ff bff9 	b.w	b706a <_ZN7TwoWire15endTransmissionEh>

000b7078 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7078:	7441      	strb	r1, [r0, #17]
}
   b707a:	4770      	bx	lr

000b707c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b707c:	4770      	bx	lr

000b707e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b707e:	4770      	bx	lr

000b7080 <_ZN9USBSerial4readEv>:
{
   b7080:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7082:	2100      	movs	r1, #0
   b7084:	7c00      	ldrb	r0, [r0, #16]
   b7086:	f7ff f8cb 	bl	b6220 <HAL_USB_USART_Receive_Data>
}
   b708a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b708e:	bd08      	pop	{r3, pc}

000b7090 <_ZN9USBSerial4peekEv>:
{
   b7090:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7092:	2101      	movs	r1, #1
   b7094:	7c00      	ldrb	r0, [r0, #16]
   b7096:	f7ff f8c3 	bl	b6220 <HAL_USB_USART_Receive_Data>
}
   b709a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b709e:	bd08      	pop	{r3, pc}

000b70a0 <_ZN9USBSerial17availableForWriteEv>:
{
   b70a0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b70a2:	7c00      	ldrb	r0, [r0, #16]
   b70a4:	f7ff f8b4 	bl	b6210 <HAL_USB_USART_Available_Data_For_Write>
}
   b70a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b70ac:	bd08      	pop	{r3, pc}

000b70ae <_ZN9USBSerial9availableEv>:
{
   b70ae:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b70b0:	7c00      	ldrb	r0, [r0, #16]
   b70b2:	f7ff f8a5 	bl	b6200 <HAL_USB_USART_Available_Data>
}
   b70b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b70ba:	bd08      	pop	{r3, pc}

000b70bc <_ZN9USBSerial5writeEh>:
{
   b70bc:	b513      	push	{r0, r1, r4, lr}
   b70be:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b70c0:	7c00      	ldrb	r0, [r0, #16]
{
   b70c2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b70c4:	f7ff f8a4 	bl	b6210 <HAL_USB_USART_Available_Data_For_Write>
   b70c8:	2800      	cmp	r0, #0
   b70ca:	9901      	ldr	r1, [sp, #4]
   b70cc:	dc01      	bgt.n	b70d2 <_ZN9USBSerial5writeEh+0x16>
   b70ce:	7c60      	ldrb	r0, [r4, #17]
   b70d0:	b120      	cbz	r0, b70dc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b70d2:	7c20      	ldrb	r0, [r4, #16]
   b70d4:	f7ff f8ac 	bl	b6230 <HAL_USB_USART_Send_Data>
   b70d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b70dc:	b002      	add	sp, #8
   b70de:	bd10      	pop	{r4, pc}

000b70e0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b70e0:	7c00      	ldrb	r0, [r0, #16]
   b70e2:	f7ff b8ad 	b.w	b6240 <HAL_USB_USART_Flush_Data>

000b70e6 <_ZN9USBSerialD0Ev>:
   b70e6:	b510      	push	{r4, lr}
   b70e8:	2114      	movs	r1, #20
   b70ea:	4604      	mov	r4, r0
   b70ec:	f7fc ffd7 	bl	b409e <_ZdlPvj>
   b70f0:	4620      	mov	r0, r4
   b70f2:	bd10      	pop	{r4, pc}

000b70f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b70f4:	b510      	push	{r4, lr}
   b70f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b70fa:	4604      	mov	r4, r0
   b70fc:	4608      	mov	r0, r1
   b70fe:	2100      	movs	r1, #0
   b7100:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7104:	4b04      	ldr	r3, [pc, #16]	; (b7118 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7106:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7108:	2301      	movs	r3, #1
  _serial = serial;
   b710a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b710c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b710e:	4611      	mov	r1, r2
   b7110:	f7ff f86e 	bl	b61f0 <HAL_USB_USART_Init>
}
   b7114:	4620      	mov	r0, r4
   b7116:	bd10      	pop	{r4, pc}
   b7118:	000b9bbc 	.word	0x000b9bbc

000b711c <_Z19acquireSerialBufferv>:
{
   b711c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b711e:	2214      	movs	r2, #20
{
   b7120:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7122:	2100      	movs	r1, #0
   b7124:	f001 fb2e 	bl	b8784 <memset>
}
   b7128:	4620      	mov	r0, r4
   b712a:	bd10      	pop	{r4, pc}

000b712c <_Z16_fetch_usbserialv>:
{
   b712c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b712e:	4c0f      	ldr	r4, [pc, #60]	; (b716c <_Z16_fetch_usbserialv+0x40>)
{
   b7130:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7132:	a803      	add	r0, sp, #12
   b7134:	f7ff fff2 	bl	b711c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7138:	7821      	ldrb	r1, [r4, #0]
   b713a:	f3bf 8f5b 	dmb	ish
   b713e:	f011 0101 	ands.w	r1, r1, #1
   b7142:	d10f      	bne.n	b7164 <_Z16_fetch_usbserialv+0x38>
   b7144:	4620      	mov	r0, r4
   b7146:	9101      	str	r1, [sp, #4]
   b7148:	f7fc ffb8 	bl	b40bc <__cxa_guard_acquire>
   b714c:	9901      	ldr	r1, [sp, #4]
   b714e:	b148      	cbz	r0, b7164 <_Z16_fetch_usbserialv+0x38>
   b7150:	aa03      	add	r2, sp, #12
   b7152:	4807      	ldr	r0, [pc, #28]	; (b7170 <_Z16_fetch_usbserialv+0x44>)
   b7154:	f7ff ffce 	bl	b70f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7158:	4620      	mov	r0, r4
   b715a:	f7fc ffb4 	bl	b40c6 <__cxa_guard_release>
   b715e:	4805      	ldr	r0, [pc, #20]	; (b7174 <_Z16_fetch_usbserialv+0x48>)
   b7160:	f001 faf4 	bl	b874c <atexit>
	return _usbserial;
}
   b7164:	4802      	ldr	r0, [pc, #8]	; (b7170 <_Z16_fetch_usbserialv+0x44>)
   b7166:	b008      	add	sp, #32
   b7168:	bd10      	pop	{r4, pc}
   b716a:	bf00      	nop
   b716c:	2003e6d4 	.word	0x2003e6d4
   b7170:	2003e6d8 	.word	0x2003e6d8
   b7174:	000b707d 	.word	0x000b707d

000b7178 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b7178:	4770      	bx	lr

000b717a <_ZN9IPAddressD0Ev>:
   b717a:	b510      	push	{r4, lr}
   b717c:	2118      	movs	r1, #24
   b717e:	4604      	mov	r4, r0
   b7180:	f7fc ff8d 	bl	b409e <_ZdlPvj>
   b7184:	4620      	mov	r0, r4
   b7186:	bd10      	pop	{r4, pc}

000b7188 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7188:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b718a:	7d03      	ldrb	r3, [r0, #20]
   b718c:	2b06      	cmp	r3, #6
{
   b718e:	b08d      	sub	sp, #52	; 0x34
   b7190:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7192:	f100 0704 	add.w	r7, r0, #4
   b7196:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b719a:	d012      	beq.n	b71c2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b719c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b71a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b71a4:	220a      	movs	r2, #10
   b71a6:	4630      	mov	r0, r6
   b71a8:	f000 f9a7 	bl	b74fa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b71ac:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b71ae:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b71b0:	d019      	beq.n	b71e6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b71b2:	2c00      	cmp	r4, #0
   b71b4:	d0f4      	beq.n	b71a0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b71b6:	212e      	movs	r1, #46	; 0x2e
   b71b8:	4630      	mov	r0, r6
   b71ba:	f000 f985 	bl	b74c8 <_ZN5Print5printEc>
   b71be:	4404      	add	r4, r0
   b71c0:	e7ee      	b.n	b71a0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b71c2:	232f      	movs	r3, #47	; 0x2f
   b71c4:	466a      	mov	r2, sp
   b71c6:	4639      	mov	r1, r7
   b71c8:	200a      	movs	r0, #10
		buf[0] = 0;
   b71ca:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b71ce:	f7ff f947 	bl	b6460 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b71d2:	4668      	mov	r0, sp
   b71d4:	f001 fb16 	bl	b8804 <strlen>
   b71d8:	6833      	ldr	r3, [r6, #0]
   b71da:	4602      	mov	r2, r0
   b71dc:	68db      	ldr	r3, [r3, #12]
   b71de:	4669      	mov	r1, sp
   b71e0:	4630      	mov	r0, r6
   b71e2:	4798      	blx	r3
   b71e4:	4604      	mov	r4, r0
    }
    return n;
}
   b71e6:	4620      	mov	r0, r4
   b71e8:	b00d      	add	sp, #52	; 0x34
   b71ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b71ec <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b71ec:	b510      	push	{r4, lr}
   b71ee:	4b05      	ldr	r3, [pc, #20]	; (b7204 <_ZN9IPAddressC1Ev+0x18>)
   b71f0:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   b71f2:	2211      	movs	r2, #17
   b71f4:	f840 3b04 	str.w	r3, [r0], #4
   b71f8:	2100      	movs	r1, #0
   b71fa:	f001 fac3 	bl	b8784 <memset>
}
   b71fe:	4620      	mov	r0, r4
   b7200:	bd10      	pop	{r4, pc}
   b7202:	bf00      	nop
   b7204:	000b9bec 	.word	0x000b9bec

000b7208 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7208:	4603      	mov	r3, r0
   b720a:	4a07      	ldr	r2, [pc, #28]	; (b7228 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b720c:	b510      	push	{r4, lr}
   b720e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7212:	f101 0210 	add.w	r2, r1, #16
   b7216:	f851 4b04 	ldr.w	r4, [r1], #4
   b721a:	f843 4b04 	str.w	r4, [r3], #4
   b721e:	4291      	cmp	r1, r2
   b7220:	d1f9      	bne.n	b7216 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7222:	780a      	ldrb	r2, [r1, #0]
   b7224:	701a      	strb	r2, [r3, #0]
}
   b7226:	bd10      	pop	{r4, pc}
   b7228:	000b9bec 	.word	0x000b9bec

000b722c <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b722c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b722e:	2b04      	cmp	r3, #4
   b7230:	d104      	bne.n	b723c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b7232:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7234:	3800      	subs	r0, #0
   b7236:	bf18      	it	ne
   b7238:	2001      	movne	r0, #1
   b723a:	4770      	bx	lr
    } else if (version() == 6) {
   b723c:	2b06      	cmp	r3, #6
   b723e:	d107      	bne.n	b7250 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7240:	6843      	ldr	r3, [r0, #4]
   b7242:	b93b      	cbnz	r3, b7254 <_ZNK9IPAddresscvbEv+0x28>
   b7244:	6883      	ldr	r3, [r0, #8]
   b7246:	b92b      	cbnz	r3, b7254 <_ZNK9IPAddresscvbEv+0x28>
   b7248:	68c3      	ldr	r3, [r0, #12]
   b724a:	b91b      	cbnz	r3, b7254 <_ZNK9IPAddresscvbEv+0x28>
   b724c:	6900      	ldr	r0, [r0, #16]
   b724e:	e7f1      	b.n	b7234 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7250:	2000      	movs	r0, #0
   b7252:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7254:	2001      	movs	r0, #1
}
   b7256:	4770      	bx	lr

000b7258 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7258:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b725a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b725e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7262:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7266:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b726a:	2304      	movs	r3, #4
   b726c:	6041      	str	r1, [r0, #4]
   b726e:	7503      	strb	r3, [r0, #20]
}
   b7270:	bd10      	pop	{r4, pc}
	...

000b7274 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b7274:	b513      	push	{r0, r1, r4, lr}
   b7276:	4c04      	ldr	r4, [pc, #16]	; (b7288 <_ZN9IPAddressC1Ehhhh+0x14>)
   b7278:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b727a:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b727e:	9400      	str	r4, [sp, #0]
   b7280:	f7ff ffea 	bl	b7258 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7284:	b002      	add	sp, #8
   b7286:	bd10      	pop	{r4, pc}
   b7288:	000b9bec 	.word	0x000b9bec

000b728c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b728c:	b507      	push	{r0, r1, r2, lr}
   b728e:	4b06      	ldr	r3, [pc, #24]	; (b72a8 <_ZN9IPAddressC1EPKh+0x1c>)
   b7290:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7292:	78cb      	ldrb	r3, [r1, #3]
   b7294:	9300      	str	r3, [sp, #0]
   b7296:	788b      	ldrb	r3, [r1, #2]
   b7298:	784a      	ldrb	r2, [r1, #1]
   b729a:	7809      	ldrb	r1, [r1, #0]
   b729c:	f7ff ffdc 	bl	b7258 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b72a0:	b003      	add	sp, #12
   b72a2:	f85d fb04 	ldr.w	pc, [sp], #4
   b72a6:	bf00      	nop
   b72a8:	000b9bec 	.word	0x000b9bec

000b72ac <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b72ac:	2100      	movs	r1, #0
   b72ae:	f7ff b9ff 	b.w	b66b0 <system_delay_ms>
	...

000b72b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b72b4:	4b01      	ldr	r3, [pc, #4]	; (b72bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b72b6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b72b8:	4770      	bx	lr
   b72ba:	bf00      	nop
   b72bc:	2003e560 	.word	0x2003e560

000b72c0 <serialEventRun>:
{
   b72c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b72c2:	4b0b      	ldr	r3, [pc, #44]	; (b72f0 <serialEventRun+0x30>)
   b72c4:	b143      	cbz	r3, b72d8 <serialEventRun+0x18>
   b72c6:	f7ff ff31 	bl	b712c <_Z16_fetch_usbserialv>
   b72ca:	6803      	ldr	r3, [r0, #0]
   b72cc:	691b      	ldr	r3, [r3, #16]
   b72ce:	4798      	blx	r3
   b72d0:	2800      	cmp	r0, #0
   b72d2:	dd01      	ble.n	b72d8 <serialEventRun+0x18>
        serialEvent();
   b72d4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b72d8:	4b06      	ldr	r3, [pc, #24]	; (b72f4 <serialEventRun+0x34>)
   b72da:	b143      	cbz	r3, b72ee <serialEventRun+0x2e>
   b72dc:	f000 fb92 	bl	b7a04 <_Z22__fetch_global_Serial1v>
   b72e0:	6803      	ldr	r3, [r0, #0]
   b72e2:	691b      	ldr	r3, [r3, #16]
   b72e4:	4798      	blx	r3
   b72e6:	2800      	cmp	r0, #0
   b72e8:	dd01      	ble.n	b72ee <serialEventRun+0x2e>
        serialEvent1();
   b72ea:	f3af 8000 	nop.w
}
   b72ee:	bd08      	pop	{r3, pc}
	...

000b72f8 <_post_loop>:
{
   b72f8:	b508      	push	{r3, lr}
	serialEventRun();
   b72fa:	f7ff ffe1 	bl	b72c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b72fe:	f7ff f8ef 	bl	b64e0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7302:	4b01      	ldr	r3, [pc, #4]	; (b7308 <_post_loop+0x10>)
   b7304:	6018      	str	r0, [r3, #0]
}
   b7306:	bd08      	pop	{r3, pc}
   b7308:	2003e740 	.word	0x2003e740

000b730c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b730c:	4805      	ldr	r0, [pc, #20]	; (b7324 <_Z33system_initialize_user_backup_ramv+0x18>)
   b730e:	4a06      	ldr	r2, [pc, #24]	; (b7328 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7310:	4906      	ldr	r1, [pc, #24]	; (b732c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7312:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7314:	1a12      	subs	r2, r2, r0
   b7316:	f001 fa27 	bl	b8768 <memcpy>
    __backup_sram_signature = signature;
   b731a:	4b05      	ldr	r3, [pc, #20]	; (b7330 <_Z33system_initialize_user_backup_ramv+0x24>)
   b731c:	4a05      	ldr	r2, [pc, #20]	; (b7334 <_Z33system_initialize_user_backup_ramv+0x28>)
   b731e:	601a      	str	r2, [r3, #0]
}
   b7320:	bd08      	pop	{r3, pc}
   b7322:	bf00      	nop
   b7324:	2003f400 	.word	0x2003f400
   b7328:	2003f404 	.word	0x2003f404
   b732c:	000b9f44 	.word	0x000b9f44
   b7330:	2003f400 	.word	0x2003f400
   b7334:	9a271c1e 	.word	0x9a271c1e

000b7338 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7338:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b733a:	2300      	movs	r3, #0
   b733c:	9300      	str	r3, [sp, #0]
   b733e:	461a      	mov	r2, r3
   b7340:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7344:	f7ff f9ce 	bl	b66e4 <system_ctrl_set_result>
}
   b7348:	b003      	add	sp, #12
   b734a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7350 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7350:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7352:	8843      	ldrh	r3, [r0, #2]
   b7354:	2b0a      	cmp	r3, #10
   b7356:	d008      	beq.n	b736a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7358:	2b50      	cmp	r3, #80	; 0x50
   b735a:	d10b      	bne.n	b7374 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b735c:	4b09      	ldr	r3, [pc, #36]	; (b7384 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b735e:	681b      	ldr	r3, [r3, #0]
   b7360:	b14b      	cbz	r3, b7376 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7362:	b003      	add	sp, #12
   b7364:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7368:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b736a:	f7ff ffe5 	bl	b7338 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b736e:	b003      	add	sp, #12
   b7370:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7374:	2300      	movs	r3, #0
   b7376:	9300      	str	r3, [sp, #0]
   b7378:	461a      	mov	r2, r3
   b737a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b737e:	f7ff f9b1 	bl	b66e4 <system_ctrl_set_result>
}
   b7382:	e7f4      	b.n	b736e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7384:	2003e6f0 	.word	0x2003e6f0

000b7388 <module_user_init_hook>:
{
   b7388:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b738a:	4812      	ldr	r0, [pc, #72]	; (b73d4 <module_user_init_hook+0x4c>)
   b738c:	2100      	movs	r1, #0
   b738e:	f7ff f9e3 	bl	b6758 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7392:	4b11      	ldr	r3, [pc, #68]	; (b73d8 <module_user_init_hook+0x50>)
   b7394:	681a      	ldr	r2, [r3, #0]
   b7396:	4b11      	ldr	r3, [pc, #68]	; (b73dc <module_user_init_hook+0x54>)
   b7398:	429a      	cmp	r2, r3
   b739a:	4b11      	ldr	r3, [pc, #68]	; (b73e0 <module_user_init_hook+0x58>)
   b739c:	bf0c      	ite	eq
   b739e:	2201      	moveq	r2, #1
   b73a0:	2200      	movne	r2, #0
   b73a2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b73a4:	d001      	beq.n	b73aa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b73a6:	f7ff ffb1 	bl	b730c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b73aa:	f7ff f889 	bl	b64c0 <HAL_RNG_GetRandomNumber>
   b73ae:	4604      	mov	r4, r0
    srand(seed);
   b73b0:	f001 f9f0 	bl	b8794 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b73b4:	4b0b      	ldr	r3, [pc, #44]	; (b73e4 <module_user_init_hook+0x5c>)
   b73b6:	b113      	cbz	r3, b73be <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b73b8:	4620      	mov	r0, r4
   b73ba:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b73be:	2100      	movs	r1, #0
   b73c0:	4808      	ldr	r0, [pc, #32]	; (b73e4 <module_user_init_hook+0x5c>)
   b73c2:	f7ff f905 	bl	b65d0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b73c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b73ca:	4807      	ldr	r0, [pc, #28]	; (b73e8 <module_user_init_hook+0x60>)
   b73cc:	2100      	movs	r1, #0
   b73ce:	f7ff b97f 	b.w	b66d0 <system_ctrl_set_app_request_handler>
   b73d2:	bf00      	nop
   b73d4:	000b72b5 	.word	0x000b72b5
   b73d8:	2003f400 	.word	0x2003f400
   b73dc:	9a271c1e 	.word	0x9a271c1e
   b73e0:	2003e6ec 	.word	0x2003e6ec
   b73e4:	00000000 	.word	0x00000000
   b73e8:	000b7351 	.word	0x000b7351

000b73ec <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b73ec:	4b01      	ldr	r3, [pc, #4]	; (b73f4 <_GLOBAL__sub_I_RGB+0x8>)
   b73ee:	2200      	movs	r2, #0
   b73f0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b73f2:	4770      	bx	lr
   b73f4:	2003e6f4 	.word	0x2003e6f4

000b73f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b73f8:	4b02      	ldr	r3, [pc, #8]	; (b7404 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b73fa:	681a      	ldr	r2, [r3, #0]
   b73fc:	4b02      	ldr	r3, [pc, #8]	; (b7408 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b73fe:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7400:	4770      	bx	lr
   b7402:	bf00      	nop
   b7404:	2003e55c 	.word	0x2003e55c
   b7408:	2003e704 	.word	0x2003e704

000b740c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b740c:	b510      	push	{r4, lr}
   b740e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7410:	f7ff f866 	bl	b64e0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b7414:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b7416:	6823      	ldr	r3, [r4, #0]
   b7418:	4620      	mov	r0, r4
   b741a:	695b      	ldr	r3, [r3, #20]
   b741c:	4798      	blx	r3
    if (c >= 0) return c;
   b741e:	2800      	cmp	r0, #0
   b7420:	da08      	bge.n	b7434 <_ZN6Stream9timedReadEv+0x28>
   b7422:	f7ff f85d 	bl	b64e0 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b7426:	68e3      	ldr	r3, [r4, #12]
   b7428:	1ac0      	subs	r0, r0, r3
   b742a:	68a3      	ldr	r3, [r4, #8]
   b742c:	4298      	cmp	r0, r3
   b742e:	d3f2      	bcc.n	b7416 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b7430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b7434:	bd10      	pop	{r4, pc}

000b7436 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b7436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b743a:	4607      	mov	r7, r0
   b743c:	460c      	mov	r4, r1
   b743e:	188e      	adds	r6, r1, r2
   b7440:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b7442:	42b5      	cmp	r5, r6
   b7444:	eba5 0804 	sub.w	r8, r5, r4
   b7448:	d007      	beq.n	b745a <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b744a:	4638      	mov	r0, r7
   b744c:	f7ff ffde 	bl	b740c <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b7450:	1e03      	subs	r3, r0, #0
   b7452:	db02      	blt.n	b745a <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b7454:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b7458:	e7f3      	b.n	b7442 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b745a:	4640      	mov	r0, r8
   b745c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7460 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7460:	4b01      	ldr	r3, [pc, #4]	; (b7468 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7462:	4a02      	ldr	r2, [pc, #8]	; (b746c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7464:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7466:	4770      	bx	lr
   b7468:	2003e708 	.word	0x2003e708
   b746c:	000b9c14 	.word	0x000b9c14

000b7470 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7472:	4606      	mov	r6, r0
   b7474:	460d      	mov	r5, r1
  size_t n = 0;
   b7476:	188f      	adds	r7, r1, r2
   b7478:	2400      	movs	r4, #0
  while (size--) {
   b747a:	42bd      	cmp	r5, r7
   b747c:	d00c      	beq.n	b7498 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b747e:	6833      	ldr	r3, [r6, #0]
   b7480:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7484:	689b      	ldr	r3, [r3, #8]
   b7486:	4630      	mov	r0, r6
   b7488:	4798      	blx	r3
     if (chunk>=0)
   b748a:	1e03      	subs	r3, r0, #0
   b748c:	db01      	blt.n	b7492 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b748e:	441c      	add	r4, r3
  while (size--) {
   b7490:	e7f3      	b.n	b747a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7492:	2c00      	cmp	r4, #0
   b7494:	bf08      	it	eq
   b7496:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7498:	4620      	mov	r0, r4
   b749a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b749c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b749c:	b513      	push	{r0, r1, r4, lr}
   b749e:	4604      	mov	r4, r0
    }
   b74a0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b74a2:	b159      	cbz	r1, b74bc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b74a4:	9101      	str	r1, [sp, #4]
   b74a6:	f001 f9ad 	bl	b8804 <strlen>
   b74aa:	6823      	ldr	r3, [r4, #0]
   b74ac:	9901      	ldr	r1, [sp, #4]
   b74ae:	68db      	ldr	r3, [r3, #12]
   b74b0:	4602      	mov	r2, r0
   b74b2:	4620      	mov	r0, r4
    }
   b74b4:	b002      	add	sp, #8
   b74b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b74ba:	4718      	bx	r3
    }
   b74bc:	b002      	add	sp, #8
   b74be:	bd10      	pop	{r4, pc}

000b74c0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b74c0:	b508      	push	{r3, lr}
  return write(str);
   b74c2:	f7ff ffeb 	bl	b749c <_ZN5Print5writeEPKc>
}
   b74c6:	bd08      	pop	{r3, pc}

000b74c8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b74c8:	6803      	ldr	r3, [r0, #0]
   b74ca:	689b      	ldr	r3, [r3, #8]
   b74cc:	4718      	bx	r3

000b74ce <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b74ce:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b74d0:	210d      	movs	r1, #13
{
   b74d2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b74d4:	f7ff fff8 	bl	b74c8 <_ZN5Print5printEc>
  n += print('\n');
   b74d8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b74da:	4604      	mov	r4, r0
  n += print('\n');
   b74dc:	4628      	mov	r0, r5
   b74de:	f7ff fff3 	bl	b74c8 <_ZN5Print5printEc>
  return n;
}
   b74e2:	4420      	add	r0, r4
   b74e4:	bd38      	pop	{r3, r4, r5, pc}

000b74e6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b74e6:	b538      	push	{r3, r4, r5, lr}
   b74e8:	4605      	mov	r5, r0
  return write(str);
   b74ea:	f7ff ffd7 	bl	b749c <_ZN5Print5writeEPKc>
   b74ee:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b74f0:	4628      	mov	r0, r5
   b74f2:	f7ff ffec 	bl	b74ce <_ZN5Print7printlnEv>
  return n;
}
   b74f6:	4420      	add	r0, r4
   b74f8:	bd38      	pop	{r3, r4, r5, pc}

000b74fa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b74fa:	b530      	push	{r4, r5, lr}
   b74fc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b74fe:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7500:	2a01      	cmp	r2, #1
  *str = '\0';
   b7502:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7506:	bf98      	it	ls
   b7508:	220a      	movls	r2, #10
   b750a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b750c:	460d      	mov	r5, r1
   b750e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7512:	fb01 5312 	mls	r3, r1, r2, r5
   b7516:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b751a:	2b09      	cmp	r3, #9
   b751c:	bf94      	ite	ls
   b751e:	3330      	addls	r3, #48	; 0x30
   b7520:	3337      	addhi	r3, #55	; 0x37
   b7522:	b2db      	uxtb	r3, r3
  } while(n);
   b7524:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7526:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b752a:	d9ef      	bls.n	b750c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b752c:	4621      	mov	r1, r4
   b752e:	f7ff ffb5 	bl	b749c <_ZN5Print5writeEPKc>
}
   b7532:	b00b      	add	sp, #44	; 0x2c
   b7534:	bd30      	pop	{r4, r5, pc}
	...

000b7538 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b7538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b753c:	ec55 4b10 	vmov	r4, r5, d0
   b7540:	4606      	mov	r6, r0
   b7542:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b7544:	ee10 2a10 	vmov	r2, s0
   b7548:	ee10 0a10 	vmov	r0, s0
   b754c:	462b      	mov	r3, r5
   b754e:	4629      	mov	r1, r5
   b7550:	f001 f89e 	bl	b8690 <__aeabi_dcmpun>
   b7554:	b140      	cbz	r0, b7568 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b7556:	4953      	ldr	r1, [pc, #332]	; (b76a4 <_ZN5Print10printFloatEdh+0x16c>)
   b7558:	4630      	mov	r0, r6
   b755a:	f7ff ff9f 	bl	b749c <_ZN5Print5writeEPKc>
   b755e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b7560:	4650      	mov	r0, sl
   b7562:	b003      	add	sp, #12
   b7564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b7568:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b756c:	4b4e      	ldr	r3, [pc, #312]	; (b76a8 <_ZN5Print10printFloatEdh+0x170>)
   b756e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7572:	4620      	mov	r0, r4
   b7574:	4649      	mov	r1, r9
   b7576:	f001 f88b 	bl	b8690 <__aeabi_dcmpun>
   b757a:	b948      	cbnz	r0, b7590 <_ZN5Print10printFloatEdh+0x58>
   b757c:	4b4a      	ldr	r3, [pc, #296]	; (b76a8 <_ZN5Print10printFloatEdh+0x170>)
   b757e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7582:	4620      	mov	r0, r4
   b7584:	4649      	mov	r1, r9
   b7586:	f001 f865 	bl	b8654 <__aeabi_dcmple>
   b758a:	b908      	cbnz	r0, b7590 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b758c:	4947      	ldr	r1, [pc, #284]	; (b76ac <_ZN5Print10printFloatEdh+0x174>)
   b758e:	e7e3      	b.n	b7558 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b7590:	4b47      	ldr	r3, [pc, #284]	; (b76b0 <_ZN5Print10printFloatEdh+0x178>)
   b7592:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b7596:	4620      	mov	r0, r4
   b7598:	4629      	mov	r1, r5
   b759a:	f001 f86f 	bl	b867c <__aeabi_dcmpgt>
   b759e:	b108      	cbz	r0, b75a4 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b75a0:	4944      	ldr	r1, [pc, #272]	; (b76b4 <_ZN5Print10printFloatEdh+0x17c>)
   b75a2:	e7d9      	b.n	b7558 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b75a4:	4b44      	ldr	r3, [pc, #272]	; (b76b8 <_ZN5Print10printFloatEdh+0x180>)
   b75a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b75aa:	4620      	mov	r0, r4
   b75ac:	4629      	mov	r1, r5
   b75ae:	f001 f847 	bl	b8640 <__aeabi_dcmplt>
   b75b2:	2800      	cmp	r0, #0
   b75b4:	d1f4      	bne.n	b75a0 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b75b6:	2200      	movs	r2, #0
   b75b8:	2300      	movs	r3, #0
   b75ba:	4620      	mov	r0, r4
   b75bc:	4629      	mov	r1, r5
   b75be:	f001 f83f 	bl	b8640 <__aeabi_dcmplt>
   b75c2:	b1d0      	cbz	r0, b75fa <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b75c4:	212d      	movs	r1, #45	; 0x2d
   b75c6:	4630      	mov	r0, r6
   b75c8:	f7ff ff7e 	bl	b74c8 <_ZN5Print5printEc>
     number = -number;
   b75cc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b75d0:	4682      	mov	sl, r0
     number = -number;
   b75d2:	461d      	mov	r5, r3
  double rounding = 0.5;
   b75d4:	4939      	ldr	r1, [pc, #228]	; (b76bc <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b75d6:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b76c4 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b75da:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b75de:	2000      	movs	r0, #0
    rounding /= 10.0;
   b75e0:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b75e4:	fa5f f38b 	uxtb.w	r3, fp
   b75e8:	429f      	cmp	r7, r3
   b75ea:	d908      	bls.n	b75fe <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b75ec:	4642      	mov	r2, r8
   b75ee:	464b      	mov	r3, r9
   b75f0:	f000 fede 	bl	b83b0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b75f4:	f10b 0b01 	add.w	fp, fp, #1
   b75f8:	e7f4      	b.n	b75e4 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b75fa:	4682      	mov	sl, r0
   b75fc:	e7ea      	b.n	b75d4 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b75fe:	4622      	mov	r2, r4
   b7600:	462b      	mov	r3, r5
   b7602:	f000 fbf5 	bl	b7df0 <__adddf3>
   b7606:	460d      	mov	r5, r1
   b7608:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b760a:	f001 f87f 	bl	b870c <__aeabi_d2uiz>
   b760e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b7610:	f000 fd2a 	bl	b8068 <__aeabi_ui2d>
   b7614:	4602      	mov	r2, r0
   b7616:	460b      	mov	r3, r1
   b7618:	4620      	mov	r0, r4
   b761a:	4629      	mov	r1, r5
   b761c:	f000 fbe6 	bl	b7dec <__aeabi_dsub>
        return printNumber(val, base) + t;
   b7620:	220a      	movs	r2, #10
   b7622:	4604      	mov	r4, r0
   b7624:	460d      	mov	r5, r1
   b7626:	4630      	mov	r0, r6
   b7628:	4641      	mov	r1, r8
   b762a:	f7ff ff66 	bl	b74fa <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b762e:	4482      	add	sl, r0
  if (digits > 0) {
   b7630:	2f00      	cmp	r7, #0
   b7632:	d095      	beq.n	b7560 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b7634:	4922      	ldr	r1, [pc, #136]	; (b76c0 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b7636:	f8df 908c 	ldr.w	r9, [pc, #140]	; b76c4 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b763a:	4630      	mov	r0, r6
   b763c:	f7ff ff2e 	bl	b749c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b7640:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b7644:	4482      	add	sl, r0
  while (digits-- > 0)
   b7646:	2f00      	cmp	r7, #0
   b7648:	d08a      	beq.n	b7560 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b764a:	4642      	mov	r2, r8
   b764c:	464b      	mov	r3, r9
   b764e:	4620      	mov	r0, r4
   b7650:	4629      	mov	r1, r5
   b7652:	f000 fd83 	bl	b815c <__aeabi_dmul>
   b7656:	4604      	mov	r4, r0
   b7658:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b765a:	f001 f82f 	bl	b86bc <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b765e:	f1b0 0b00 	subs.w	fp, r0, #0
   b7662:	da1c      	bge.n	b769e <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b7664:	212d      	movs	r1, #45	; 0x2d
   b7666:	4630      	mov	r0, r6
   b7668:	f7ff ff2e 	bl	b74c8 <_ZN5Print5printEc>
            val = -n;
   b766c:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b7670:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b7672:	220a      	movs	r2, #10
   b7674:	4630      	mov	r0, r6
   b7676:	9301      	str	r3, [sp, #4]
   b7678:	f7ff ff3f 	bl	b74fa <_ZN5Print11printNumberEmh>
   b767c:	9b01      	ldr	r3, [sp, #4]
   b767e:	4418      	add	r0, r3
    n += print(toPrint);
   b7680:	4482      	add	sl, r0
    remainder -= toPrint;
   b7682:	4658      	mov	r0, fp
   b7684:	f000 fd00 	bl	b8088 <__aeabi_i2d>
   b7688:	4602      	mov	r2, r0
   b768a:	460b      	mov	r3, r1
   b768c:	4620      	mov	r0, r4
   b768e:	4629      	mov	r1, r5
   b7690:	f000 fbac 	bl	b7dec <__aeabi_dsub>
   b7694:	3f01      	subs	r7, #1
   b7696:	4604      	mov	r4, r0
   b7698:	460d      	mov	r5, r1
   b769a:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b769c:	e7d3      	b.n	b7646 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b769e:	4659      	mov	r1, fp
        size_t t = 0;
   b76a0:	2300      	movs	r3, #0
   b76a2:	e7e6      	b.n	b7672 <_ZN5Print10printFloatEdh+0x13a>
   b76a4:	000b9c18 	.word	0x000b9c18
   b76a8:	7fefffff 	.word	0x7fefffff
   b76ac:	000b9c1c 	.word	0x000b9c1c
   b76b0:	41efffff 	.word	0x41efffff
   b76b4:	000b9c20 	.word	0x000b9c20
   b76b8:	c1efffff 	.word	0xc1efffff
   b76bc:	3fe00000 	.word	0x3fe00000
   b76c0:	000b9c24 	.word	0x000b9c24
   b76c4:	40240000 	.word	0x40240000

000b76c8 <_ZN5Print7printlnEdi>:
{
   b76c8:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b76ca:	b2c9      	uxtb	r1, r1
{
   b76cc:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b76ce:	f7ff ff33 	bl	b7538 <_ZN5Print10printFloatEdh>
   b76d2:	4604      	mov	r4, r0
  n += println();
   b76d4:	4628      	mov	r0, r5
   b76d6:	f7ff fefa 	bl	b74ce <_ZN5Print7printlnEv>
}
   b76da:	4420      	add	r0, r4
   b76dc:	bd38      	pop	{r3, r4, r5, pc}

000b76de <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b76de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b76e2:	b086      	sub	sp, #24
   b76e4:	af00      	add	r7, sp, #0
   b76e6:	4605      	mov	r5, r0
   b76e8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b76ea:	1d38      	adds	r0, r7, #4
   b76ec:	2114      	movs	r1, #20
{
   b76ee:	4614      	mov	r4, r2
    va_copy(args2, args);
   b76f0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b76f2:	f7ff f819 	bl	b6728 <vsnprintf>

    if (n<bufsize)
   b76f6:	2813      	cmp	r0, #19
   b76f8:	d80e      	bhi.n	b7718 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b76fa:	1d39      	adds	r1, r7, #4
   b76fc:	4628      	mov	r0, r5
   b76fe:	f7ff fecd 	bl	b749c <_ZN5Print5writeEPKc>
   b7702:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7704:	b11e      	cbz	r6, b770e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7706:	4628      	mov	r0, r5
   b7708:	f7ff fee1 	bl	b74ce <_ZN5Print7printlnEv>
   b770c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b770e:	4620      	mov	r0, r4
   b7710:	3718      	adds	r7, #24
   b7712:	46bd      	mov	sp, r7
   b7714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7718:	f100 0308 	add.w	r3, r0, #8
   b771c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7720:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7722:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7726:	4622      	mov	r2, r4
   b7728:	1c41      	adds	r1, r0, #1
   b772a:	683b      	ldr	r3, [r7, #0]
   b772c:	4668      	mov	r0, sp
   b772e:	f7fe fffb 	bl	b6728 <vsnprintf>
  return write(str);
   b7732:	4669      	mov	r1, sp
   b7734:	4628      	mov	r0, r5
   b7736:	f7ff feb1 	bl	b749c <_ZN5Print5writeEPKc>
   b773a:	4604      	mov	r4, r0
   b773c:	46c5      	mov	sp, r8
   b773e:	e7e1      	b.n	b7704 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7740 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b7740:	4802      	ldr	r0, [pc, #8]	; (b774c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7742:	2300      	movs	r3, #0
   b7744:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b7746:	f7fe beb3 	b.w	b64b0 <os_mutex_recursive_create>
   b774a:	bf00      	nop
   b774c:	2003e70c 	.word	0x2003e70c

000b7750 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7750:	4b05      	ldr	r3, [pc, #20]	; (b7768 <_GLOBAL__sub_I_System+0x18>)
   b7752:	2202      	movs	r2, #2
   b7754:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7756:	4b05      	ldr	r3, [pc, #20]	; (b776c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7758:	4a05      	ldr	r2, [pc, #20]	; (b7770 <_GLOBAL__sub_I_System+0x20>)
   b775a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b775c:	2000      	movs	r0, #0
   b775e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7762:	f7fe bf9d 	b.w	b66a0 <set_system_mode>
   b7766:	bf00      	nop
   b7768:	2003e71c 	.word	0x2003e71c
   b776c:	2003e710 	.word	0x2003e710
   b7770:	ffff0000 	.word	0xffff0000

000b7774 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7774:	2100      	movs	r1, #0
   b7776:	f7fe bdfb 	b.w	b6370 <hal_spi_release>

000b777a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b777a:	2100      	movs	r1, #0
   b777c:	f7fe bdf0 	b.w	b6360 <hal_spi_acquire>

000b7780 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7780:	b510      	push	{r4, lr}
   b7782:	4604      	mov	r4, r0
   b7784:	4608      	mov	r0, r1
{
    _spi = spi;
   b7786:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7788:	f7fe fdca 	bl	b6320 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b778c:	2300      	movs	r3, #0
   b778e:	6063      	str	r3, [r4, #4]
}
   b7790:	4620      	mov	r0, r4
   b7792:	bd10      	pop	{r4, pc}

000b7794 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7794:	b513      	push	{r0, r1, r4, lr}
   b7796:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7798:	7800      	ldrb	r0, [r0, #0]
   b779a:	f7ff ffee 	bl	b777a <_ZN8SPIClass4lockEv.isra.0>
   b779e:	b958      	cbnz	r0, b77b8 <_ZN8SPIClass5beginEv+0x24>
   b77a0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b77a2:	9001      	str	r0, [sp, #4]
   b77a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b77a8:	f7fe fdaa 	bl	b6300 <hal_spi_begin>
        unlock();
   b77ac:	9801      	ldr	r0, [sp, #4]
    }
}
   b77ae:	b002      	add	sp, #8
   b77b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b77b4:	f7ff bfde 	b.w	b7774 <_ZN8SPIClass6unlockEv.isra.0>
   b77b8:	b002      	add	sp, #8
   b77ba:	bd10      	pop	{r4, pc}

000b77bc <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b77bc:	7800      	ldrb	r0, [r0, #0]
   b77be:	f7ff bfd9 	b.w	b7774 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b77c4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b77c4:	0840      	lsrs	r0, r0, #1
{
   b77c6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b77c8:	6018      	str	r0, [r3, #0]
   b77ca:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b77cc:	6818      	ldr	r0, [r3, #0]
   b77ce:	4288      	cmp	r0, r1
   b77d0:	b2e5      	uxtb	r5, r4
   b77d2:	d906      	bls.n	b77e2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b77d4:	3401      	adds	r4, #1
   b77d6:	2c08      	cmp	r4, #8
   b77d8:	d002      	beq.n	b77e0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b77da:	0840      	lsrs	r0, r0, #1
   b77dc:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b77de:	e7f5      	b.n	b77cc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b77e0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b77e2:	4b02      	ldr	r3, [pc, #8]	; (b77ec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b77e4:	5d5b      	ldrb	r3, [r3, r5]
   b77e6:	7013      	strb	r3, [r2, #0]
}
   b77e8:	bd30      	pop	{r4, r5, pc}
   b77ea:	bf00      	nop
   b77ec:	000b9c26 	.word	0x000b9c26

000b77f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b77f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b77f4:	4606      	mov	r6, r0
   b77f6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b77f8:	7800      	ldrb	r0, [r0, #0]
{
   b77fa:	460c      	mov	r4, r1
    CHECK(lock());
   b77fc:	f7ff ffbd 	bl	b777a <_ZN8SPIClass4lockEv.isra.0>
   b7800:	2800      	cmp	r0, #0
   b7802:	db1b      	blt.n	b783c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7804:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7806:	2214      	movs	r2, #20
   b7808:	2100      	movs	r1, #0
   b780a:	a809      	add	r0, sp, #36	; 0x24
   b780c:	f000 ffba 	bl	b8784 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7810:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7812:	2200      	movs	r2, #0
   b7814:	a909      	add	r1, sp, #36	; 0x24
   b7816:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7818:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b781c:	f7fe fd90 	bl	b6340 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7820:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7824:	b113      	cbz	r3, b782c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7826:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b782a:	b155      	cbz	r5, b7842 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b782c:	2700      	movs	r7, #0
   b782e:	46b9      	mov	r9, r7
   b7830:	46b8      	mov	r8, r7
   b7832:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7834:	7923      	ldrb	r3, [r4, #4]
   b7836:	b15d      	cbz	r5, b7850 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7838:	b1c3      	cbz	r3, b786c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b783a:	2000      	movs	r0, #0
}
   b783c:	b00f      	add	sp, #60	; 0x3c
   b783e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7842:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7846:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b784a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b784e:	e7f1      	b.n	b7834 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7850:	2b00      	cmp	r3, #0
   b7852:	d135      	bne.n	b78c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7854:	68a3      	ldr	r3, [r4, #8]
   b7856:	4543      	cmp	r3, r8
   b7858:	d108      	bne.n	b786c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b785a:	f88d 9020 	strb.w	r9, [sp, #32]
   b785e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7862:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7866:	89a3      	ldrh	r3, [r4, #12]
   b7868:	429a      	cmp	r2, r3
   b786a:	d0e6      	beq.n	b783a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b786c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b786e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7870:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7874:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7876:	ab04      	add	r3, sp, #16
   b7878:	f10d 020f 	add.w	r2, sp, #15
   b787c:	f7ff ffa2 	bl	b77c4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7880:	7921      	ldrb	r1, [r4, #4]
   b7882:	b985      	cbnz	r5, b78a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7884:	b989      	cbnz	r1, b78aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7886:	68a3      	ldr	r3, [r4, #8]
   b7888:	4543      	cmp	r3, r8
   b788a:	d30e      	bcc.n	b78aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b788c:	f88d 9020 	strb.w	r9, [sp, #32]
   b7890:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7894:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7898:	89a3      	ldrh	r3, [r4, #12]
   b789a:	429a      	cmp	r2, r3
   b789c:	d105      	bne.n	b78aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b789e:	9b04      	ldr	r3, [sp, #16]
   b78a0:	4543      	cmp	r3, r8
   b78a2:	d102      	bne.n	b78aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b78a4:	e7c9      	b.n	b783a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b78a6:	2900      	cmp	r1, #0
   b78a8:	d1f9      	bne.n	b789e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b78aa:	2300      	movs	r3, #0
   b78ac:	9301      	str	r3, [sp, #4]
   b78ae:	7b63      	ldrb	r3, [r4, #13]
   b78b0:	9300      	str	r3, [sp, #0]
   b78b2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b78b6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b78b8:	7830      	ldrb	r0, [r6, #0]
   b78ba:	f7fe fd49 	bl	b6350 <hal_spi_set_settings>
   b78be:	e7bc      	b.n	b783a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b78c0:	e9cd 5500 	strd	r5, r5, [sp]
   b78c4:	462b      	mov	r3, r5
   b78c6:	462a      	mov	r2, r5
   b78c8:	2101      	movs	r1, #1
   b78ca:	e7f5      	b.n	b78b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b78cc <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b78cc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b78ce:	7800      	ldrb	r0, [r0, #0]
   b78d0:	f7fe fd1e 	bl	b6310 <hal_spi_transfer>
}
   b78d4:	b2c0      	uxtb	r0, r0
   b78d6:	bd08      	pop	{r3, pc}

000b78d8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b78d8:	2200      	movs	r2, #0
   b78da:	6840      	ldr	r0, [r0, #4]
   b78dc:	4611      	mov	r1, r2
   b78de:	f7fe beb7 	b.w	b6650 <network_listening>

000b78e2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b78e2:	2200      	movs	r2, #0
   b78e4:	6840      	ldr	r0, [r0, #4]
   b78e6:	4611      	mov	r1, r2
   b78e8:	f7fe bec2 	b.w	b6670 <network_get_listen_timeout>

000b78ec <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b78ec:	6840      	ldr	r0, [r0, #4]
   b78ee:	2200      	movs	r2, #0
   b78f0:	f7fe beb6 	b.w	b6660 <network_set_listen_timeout>

000b78f4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b78f4:	6840      	ldr	r0, [r0, #4]
   b78f6:	2200      	movs	r2, #0
   b78f8:	f081 0101 	eor.w	r1, r1, #1
   b78fc:	f7fe bea0 	b.w	b6640 <network_listen>

000b7900 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7900:	2300      	movs	r3, #0
   b7902:	6840      	ldr	r0, [r0, #4]
   b7904:	461a      	mov	r2, r3
   b7906:	4619      	mov	r1, r3
   b7908:	f7fe be92 	b.w	b6630 <network_off>

000b790c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b790c:	2300      	movs	r3, #0
   b790e:	6840      	ldr	r0, [r0, #4]
   b7910:	461a      	mov	r2, r3
   b7912:	4619      	mov	r1, r3
   b7914:	f7fe be84 	b.w	b6620 <network_on>

000b7918 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7918:	2200      	movs	r2, #0
   b791a:	6840      	ldr	r0, [r0, #4]
   b791c:	4611      	mov	r1, r2
   b791e:	f7fe be77 	b.w	b6610 <network_ready>

000b7922 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7922:	2200      	movs	r2, #0
   b7924:	6840      	ldr	r0, [r0, #4]
   b7926:	4611      	mov	r1, r2
   b7928:	f7fe be62 	b.w	b65f0 <network_connecting>

000b792c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b792c:	6840      	ldr	r0, [r0, #4]
   b792e:	2200      	movs	r2, #0
   b7930:	2102      	movs	r1, #2
   b7932:	f7fe be65 	b.w	b6600 <network_disconnect>

000b7936 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7936:	2300      	movs	r3, #0
   b7938:	6840      	ldr	r0, [r0, #4]
   b793a:	461a      	mov	r2, r3
   b793c:	f7fe be50 	b.w	b65e0 <network_connect>

000b7940 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b7940:	4b02      	ldr	r3, [pc, #8]	; (b794c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7942:	2203      	movs	r2, #3
   b7944:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7946:	4a02      	ldr	r2, [pc, #8]	; (b7950 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7948:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b794a:	4770      	bx	lr
   b794c:	2003e720 	.word	0x2003e720
   b7950:	000b9c38 	.word	0x000b9c38

000b7954 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7954:	4770      	bx	lr
	...

000b7958 <_Z17acquireWireBufferv>:
{
   b7958:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b795a:	2520      	movs	r5, #32
   b795c:	2314      	movs	r3, #20
{
   b795e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7960:	6003      	str	r3, [r0, #0]
   b7962:	6085      	str	r5, [r0, #8]
   b7964:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7966:	4906      	ldr	r1, [pc, #24]	; (b7980 <_Z17acquireWireBufferv+0x28>)
   b7968:	4628      	mov	r0, r5
   b796a:	f000 f927 	bl	b7bbc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b796e:	4904      	ldr	r1, [pc, #16]	; (b7980 <_Z17acquireWireBufferv+0x28>)
	};
   b7970:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7972:	4628      	mov	r0, r5
   b7974:	f000 f922 	bl	b7bbc <_ZnajRKSt9nothrow_t>
	};
   b7978:	60e0      	str	r0, [r4, #12]
}
   b797a:	4620      	mov	r0, r4
   b797c:	bd38      	pop	{r3, r4, r5, pc}
   b797e:	bf00      	nop
   b7980:	000b9c6c 	.word	0x000b9c6c

000b7984 <_Z19__fetch_global_Wirev>:
{
   b7984:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7986:	4d0e      	ldr	r5, [pc, #56]	; (b79c0 <_Z19__fetch_global_Wirev+0x3c>)
   b7988:	7829      	ldrb	r1, [r5, #0]
   b798a:	f3bf 8f5b 	dmb	ish
   b798e:	f011 0401 	ands.w	r4, r1, #1
{
   b7992:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7994:	d111      	bne.n	b79ba <_Z19__fetch_global_Wirev+0x36>
   b7996:	4628      	mov	r0, r5
   b7998:	f7fc fb90 	bl	b40bc <__cxa_guard_acquire>
   b799c:	b168      	cbz	r0, b79ba <_Z19__fetch_global_Wirev+0x36>
   b799e:	a801      	add	r0, sp, #4
   b79a0:	f7ff ffda 	bl	b7958 <_Z17acquireWireBufferv>
   b79a4:	aa01      	add	r2, sp, #4
   b79a6:	4621      	mov	r1, r4
   b79a8:	4806      	ldr	r0, [pc, #24]	; (b79c4 <_Z19__fetch_global_Wirev+0x40>)
   b79aa:	f7ff fb3b 	bl	b7024 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b79ae:	4628      	mov	r0, r5
   b79b0:	f7fc fb89 	bl	b40c6 <__cxa_guard_release>
   b79b4:	4804      	ldr	r0, [pc, #16]	; (b79c8 <_Z19__fetch_global_Wirev+0x44>)
   b79b6:	f000 fec9 	bl	b874c <atexit>
	return wire;
}
   b79ba:	4802      	ldr	r0, [pc, #8]	; (b79c4 <_Z19__fetch_global_Wirev+0x40>)
   b79bc:	b007      	add	sp, #28
   b79be:	bd30      	pop	{r4, r5, pc}
   b79c0:	2003e728 	.word	0x2003e728
   b79c4:	2003e72c 	.word	0x2003e72c
   b79c8:	000b7955 	.word	0x000b7955

000b79cc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b79cc:	4770      	bx	lr
	...

000b79d0 <_Z20acquireSerial1Bufferv>:
{
   b79d0:	b538      	push	{r3, r4, r5, lr}
   b79d2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b79d4:	2514      	movs	r5, #20
   b79d6:	462a      	mov	r2, r5
   b79d8:	2100      	movs	r1, #0
   b79da:	f000 fed3 	bl	b8784 <memset>
   b79de:	8025      	strh	r5, [r4, #0]
   b79e0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79e2:	4907      	ldr	r1, [pc, #28]	; (b7a00 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b79e4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79e6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b79e8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79ea:	f000 f8e7 	bl	b7bbc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79ee:	4904      	ldr	r1, [pc, #16]	; (b7a00 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b79f0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79f2:	4628      	mov	r0, r5
   b79f4:	f000 f8e2 	bl	b7bbc <_ZnajRKSt9nothrow_t>
    };
   b79f8:	60e0      	str	r0, [r4, #12]
}
   b79fa:	4620      	mov	r0, r4
   b79fc:	bd38      	pop	{r3, r4, r5, pc}
   b79fe:	bf00      	nop
   b7a00:	000b9c6c 	.word	0x000b9c6c

000b7a04 <_Z22__fetch_global_Serial1v>:
{
   b7a04:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7a06:	4d0e      	ldr	r5, [pc, #56]	; (b7a40 <_Z22__fetch_global_Serial1v+0x3c>)
   b7a08:	7829      	ldrb	r1, [r5, #0]
   b7a0a:	f3bf 8f5b 	dmb	ish
   b7a0e:	f011 0401 	ands.w	r4, r1, #1
{
   b7a12:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7a14:	d111      	bne.n	b7a3a <_Z22__fetch_global_Serial1v+0x36>
   b7a16:	4628      	mov	r0, r5
   b7a18:	f7fc fb50 	bl	b40bc <__cxa_guard_acquire>
   b7a1c:	b168      	cbz	r0, b7a3a <_Z22__fetch_global_Serial1v+0x36>
   b7a1e:	a801      	add	r0, sp, #4
   b7a20:	f7ff ffd6 	bl	b79d0 <_Z20acquireSerial1Bufferv>
   b7a24:	aa01      	add	r2, sp, #4
   b7a26:	4621      	mov	r1, r4
   b7a28:	4806      	ldr	r0, [pc, #24]	; (b7a44 <_Z22__fetch_global_Serial1v+0x40>)
   b7a2a:	f7ff fabb 	bl	b6fa4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7a2e:	4628      	mov	r0, r5
   b7a30:	f7fc fb49 	bl	b40c6 <__cxa_guard_release>
   b7a34:	4804      	ldr	r0, [pc, #16]	; (b7a48 <_Z22__fetch_global_Serial1v+0x44>)
   b7a36:	f000 fe89 	bl	b874c <atexit>
    return serial1;
}
   b7a3a:	4802      	ldr	r0, [pc, #8]	; (b7a44 <_Z22__fetch_global_Serial1v+0x40>)
   b7a3c:	b007      	add	sp, #28
   b7a3e:	bd30      	pop	{r4, r5, pc}
   b7a40:	2003e744 	.word	0x2003e744
   b7a44:	2003e748 	.word	0x2003e748
   b7a48:	000b79cd 	.word	0x000b79cd

000b7a4c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7a4c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7a4e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7a50:	d902      	bls.n	b7a58 <pinAvailable+0xc>
    return false;
   b7a52:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7a54:	b002      	add	sp, #8
   b7a56:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7a58:	f1a0 030b 	sub.w	r3, r0, #11
   b7a5c:	2b02      	cmp	r3, #2
   b7a5e:	d81a      	bhi.n	b7a96 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7a60:	4c17      	ldr	r4, [pc, #92]	; (b7ac0 <pinAvailable+0x74>)
   b7a62:	7821      	ldrb	r1, [r4, #0]
   b7a64:	f3bf 8f5b 	dmb	ish
   b7a68:	f011 0101 	ands.w	r1, r1, #1
   b7a6c:	d10b      	bne.n	b7a86 <pinAvailable+0x3a>
   b7a6e:	4620      	mov	r0, r4
   b7a70:	9101      	str	r1, [sp, #4]
   b7a72:	f7fc fb23 	bl	b40bc <__cxa_guard_acquire>
   b7a76:	9901      	ldr	r1, [sp, #4]
   b7a78:	b128      	cbz	r0, b7a86 <pinAvailable+0x3a>
   b7a7a:	4812      	ldr	r0, [pc, #72]	; (b7ac4 <pinAvailable+0x78>)
   b7a7c:	f7ff fe80 	bl	b7780 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7a80:	4620      	mov	r0, r4
   b7a82:	f7fc fb20 	bl	b40c6 <__cxa_guard_release>
   b7a86:	4b0f      	ldr	r3, [pc, #60]	; (b7ac4 <pinAvailable+0x78>)
   b7a88:	7818      	ldrb	r0, [r3, #0]
   b7a8a:	f7fe fc51 	bl	b6330 <hal_spi_is_enabled>
   b7a8e:	2800      	cmp	r0, #0
   b7a90:	d1df      	bne.n	b7a52 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7a92:	2001      	movs	r0, #1
   b7a94:	e7de      	b.n	b7a54 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7a96:	2801      	cmp	r0, #1
   b7a98:	d809      	bhi.n	b7aae <pinAvailable+0x62>
   b7a9a:	f7ff ff73 	bl	b7984 <_Z19__fetch_global_Wirev>
   b7a9e:	2100      	movs	r1, #0
   b7aa0:	7c00      	ldrb	r0, [r0, #16]
   b7aa2:	f7fe fc1d 	bl	b62e0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7aa6:	f080 0001 	eor.w	r0, r0, #1
   b7aaa:	b2c0      	uxtb	r0, r0
   b7aac:	e7d2      	b.n	b7a54 <pinAvailable+0x8>
   b7aae:	3809      	subs	r0, #9
   b7ab0:	2801      	cmp	r0, #1
   b7ab2:	d8ee      	bhi.n	b7a92 <pinAvailable+0x46>
   b7ab4:	f7ff ffa6 	bl	b7a04 <_Z22__fetch_global_Serial1v>
   b7ab8:	7c00      	ldrb	r0, [r0, #16]
   b7aba:	f7fe fcb9 	bl	b6430 <hal_usart_is_enabled>
   b7abe:	e7f2      	b.n	b7aa6 <pinAvailable+0x5a>
   b7ac0:	2003e6b8 	.word	0x2003e6b8
   b7ac4:	2003e6bc 	.word	0x2003e6bc

000b7ac8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7ac8:	2823      	cmp	r0, #35	; 0x23
{
   b7aca:	b538      	push	{r3, r4, r5, lr}
   b7acc:	4604      	mov	r4, r0
   b7ace:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7ad0:	d80a      	bhi.n	b7ae8 <pinMode+0x20>
   b7ad2:	29ff      	cmp	r1, #255	; 0xff
   b7ad4:	d008      	beq.n	b7ae8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7ad6:	f7ff ffb9 	bl	b7a4c <pinAvailable>
   b7ada:	b128      	cbz	r0, b7ae8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7adc:	4629      	mov	r1, r5
   b7ade:	4620      	mov	r0, r4
}
   b7ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7ae4:	f7fe bd14 	b.w	b6510 <HAL_Pin_Mode>
}
   b7ae8:	bd38      	pop	{r3, r4, r5, pc}

000b7aea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7aea:	b538      	push	{r3, r4, r5, lr}
   b7aec:	4604      	mov	r4, r0
   b7aee:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7af0:	f7fe fd16 	bl	b6520 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7af4:	28ff      	cmp	r0, #255	; 0xff
   b7af6:	d010      	beq.n	b7b1a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7af8:	2806      	cmp	r0, #6
   b7afa:	d804      	bhi.n	b7b06 <digitalWrite+0x1c>
   b7afc:	234d      	movs	r3, #77	; 0x4d
   b7afe:	fa23 f000 	lsr.w	r0, r3, r0
   b7b02:	07c3      	lsls	r3, r0, #31
   b7b04:	d409      	bmi.n	b7b1a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7b06:	4620      	mov	r0, r4
   b7b08:	f7ff ffa0 	bl	b7a4c <pinAvailable>
   b7b0c:	b128      	cbz	r0, b7b1a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7b0e:	4629      	mov	r1, r5
   b7b10:	4620      	mov	r0, r4
}
   b7b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7b16:	f7fe bd0b 	b.w	b6530 <HAL_GPIO_Write>
}
   b7b1a:	bd38      	pop	{r3, r4, r5, pc}

000b7b1c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7b1c:	b510      	push	{r4, lr}
   b7b1e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7b20:	f7fe fcfe 	bl	b6520 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7b24:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7b26:	b2db      	uxtb	r3, r3
   b7b28:	2b01      	cmp	r3, #1
   b7b2a:	d908      	bls.n	b7b3e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7b2c:	4620      	mov	r0, r4
   b7b2e:	f7ff ff8d 	bl	b7a4c <pinAvailable>
   b7b32:	b120      	cbz	r0, b7b3e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7b34:	4620      	mov	r0, r4
}
   b7b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b7b3a:	f7fe bd01 	b.w	b6540 <HAL_GPIO_Read>
}
   b7b3e:	2000      	movs	r0, #0
   b7b40:	bd10      	pop	{r4, pc}

000b7b42 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b7b42:	280d      	cmp	r0, #13
{
   b7b44:	b510      	push	{r4, lr}
   b7b46:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b7b48:	bf9c      	itt	ls
   b7b4a:	340e      	addls	r4, #14
   b7b4c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b7b4e:	4620      	mov	r0, r4
   b7b50:	f7ff ff7c 	bl	b7a4c <pinAvailable>
   b7b54:	b150      	cbz	r0, b7b6c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b7b56:	2103      	movs	r1, #3
   b7b58:	4620      	mov	r0, r4
   b7b5a:	f7fe fcd1 	bl	b6500 <HAL_Validate_Pin_Function>
   b7b5e:	2803      	cmp	r0, #3
   b7b60:	d104      	bne.n	b7b6c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b7b62:	4620      	mov	r0, r4
}
   b7b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b7b68:	f7fe bcfa 	b.w	b6560 <hal_adc_read>
}
   b7b6c:	2000      	movs	r0, #0
   b7b6e:	bd10      	pop	{r4, pc}

000b7b70 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   b7b70:	b538      	push	{r3, r4, r5, lr}
   b7b72:	4604      	mov	r4, r0
   b7b74:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b7b76:	f7ff ff69 	bl	b7a4c <pinAvailable>
   b7b7a:	b1f0      	cbz	r0, b7bba <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   b7b7c:	2104      	movs	r1, #4
   b7b7e:	4620      	mov	r0, r4
   b7b80:	f7fe fcbe 	bl	b6500 <HAL_Validate_Pin_Function>
   b7b84:	2804      	cmp	r0, #4
   b7b86:	d105      	bne.n	b7b94 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b7b88:	b2a9      	uxth	r1, r5
   b7b8a:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b7b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b7b90:	f7fe bcde 	b.w	b6550 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   b7b94:	2102      	movs	r1, #2
   b7b96:	4620      	mov	r0, r4
   b7b98:	f7fe fcb2 	bl	b6500 <HAL_Validate_Pin_Function>
   b7b9c:	2802      	cmp	r0, #2
   b7b9e:	d10c      	bne.n	b7bba <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   b7ba0:	4620      	mov	r0, r4
   b7ba2:	f7fe fcbd 	bl	b6520 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b7ba6:	2801      	cmp	r0, #1
   b7ba8:	d001      	beq.n	b7bae <_Z11analogWritetm+0x3e>
   b7baa:	2804      	cmp	r0, #4
   b7bac:	d105      	bne.n	b7bba <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b7bae:	4629      	mov	r1, r5
   b7bb0:	4620      	mov	r0, r4
}
   b7bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b7bb6:	f7fe bcdb 	b.w	b6570 <hal_pwm_write_ext>
}
   b7bba:	bd38      	pop	{r3, r4, r5, pc}

000b7bbc <_ZnajRKSt9nothrow_t>:
   b7bbc:	f7fc ba6d 	b.w	b409a <_Znaj>

000b7bc0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7bc0:	4901      	ldr	r1, [pc, #4]	; (b7bc8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7bc2:	f000 b8f9 	b.w	b7db8 <_ZNKSt9type_infoeqERKS_>
   b7bc6:	bf00      	nop
   b7bc8:	000b9c88 	.word	0x000b9c88

000b7bcc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7bcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7bce:	2400      	movs	r4, #0
   b7bd0:	2310      	movs	r3, #16
   b7bd2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7bd6:	6803      	ldr	r3, [r0, #0]
   b7bd8:	4615      	mov	r5, r2
   b7bda:	699e      	ldr	r6, [r3, #24]
   b7bdc:	6812      	ldr	r2, [r2, #0]
   b7bde:	466b      	mov	r3, sp
   b7be0:	e9cd 4400 	strd	r4, r4, [sp]
   b7be4:	47b0      	blx	r6
   b7be6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7bea:	f003 0306 	and.w	r3, r3, #6
   b7bee:	2b06      	cmp	r3, #6
   b7bf0:	bf03      	ittte	eq
   b7bf2:	9b00      	ldreq	r3, [sp, #0]
   b7bf4:	602b      	streq	r3, [r5, #0]
   b7bf6:	2001      	moveq	r0, #1
   b7bf8:	4620      	movne	r0, r4
   b7bfa:	b004      	add	sp, #16
   b7bfc:	bd70      	pop	{r4, r5, r6, pc}

000b7bfe <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7bfe:	9800      	ldr	r0, [sp, #0]
   b7c00:	4290      	cmp	r0, r2
   b7c02:	bf14      	ite	ne
   b7c04:	2001      	movne	r0, #1
   b7c06:	2006      	moveq	r0, #6
   b7c08:	4770      	bx	lr
	...

000b7c0c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7c0c:	b510      	push	{r4, lr}
   b7c0e:	4b03      	ldr	r3, [pc, #12]	; (b7c1c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7c10:	6003      	str	r3, [r0, #0]
   b7c12:	4604      	mov	r4, r0
   b7c14:	f000 f8cd 	bl	b7db2 <_ZNSt9type_infoD1Ev>
   b7c18:	4620      	mov	r0, r4
   b7c1a:	bd10      	pop	{r4, pc}
   b7c1c:	000b9cc8 	.word	0x000b9cc8

000b7c20 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7c20:	b510      	push	{r4, lr}
   b7c22:	4604      	mov	r4, r0
   b7c24:	f7ff fff2 	bl	b7c0c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7c28:	4620      	mov	r0, r4
   b7c2a:	2108      	movs	r1, #8
   b7c2c:	f7fc fa37 	bl	b409e <_ZdlPvj>
   b7c30:	4620      	mov	r0, r4
   b7c32:	bd10      	pop	{r4, pc}

000b7c34 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7c38:	461f      	mov	r7, r3
   b7c3a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7c3e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7c42:	4598      	cmp	r8, r3
   b7c44:	4606      	mov	r6, r0
   b7c46:	4615      	mov	r5, r2
   b7c48:	d107      	bne.n	b7c5a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7c4a:	9907      	ldr	r1, [sp, #28]
   b7c4c:	f000 f8b4 	bl	b7db8 <_ZNKSt9type_infoeqERKS_>
   b7c50:	b118      	cbz	r0, b7c5a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7c52:	7165      	strb	r5, [r4, #5]
   b7c54:	2000      	movs	r0, #0
   b7c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7c5a:	4639      	mov	r1, r7
   b7c5c:	4630      	mov	r0, r6
   b7c5e:	f000 f8ab 	bl	b7db8 <_ZNKSt9type_infoeqERKS_>
   b7c62:	2800      	cmp	r0, #0
   b7c64:	d0f6      	beq.n	b7c54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7c66:	2301      	movs	r3, #1
   b7c68:	f8c4 8000 	str.w	r8, [r4]
   b7c6c:	7125      	strb	r5, [r4, #4]
   b7c6e:	71a3      	strb	r3, [r4, #6]
   b7c70:	e7f0      	b.n	b7c54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7c72 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7c72:	b538      	push	{r3, r4, r5, lr}
   b7c74:	4615      	mov	r5, r2
   b7c76:	461c      	mov	r4, r3
   b7c78:	f000 f89e 	bl	b7db8 <_ZNKSt9type_infoeqERKS_>
   b7c7c:	b120      	cbz	r0, b7c88 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7c7e:	2308      	movs	r3, #8
   b7c80:	60e3      	str	r3, [r4, #12]
   b7c82:	2306      	movs	r3, #6
   b7c84:	6025      	str	r5, [r4, #0]
   b7c86:	7123      	strb	r3, [r4, #4]
   b7c88:	bd38      	pop	{r3, r4, r5, pc}

000b7c8a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7c8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7c8c:	4605      	mov	r5, r0
   b7c8e:	460c      	mov	r4, r1
   b7c90:	9201      	str	r2, [sp, #4]
   b7c92:	461e      	mov	r6, r3
   b7c94:	f000 f890 	bl	b7db8 <_ZNKSt9type_infoeqERKS_>
   b7c98:	b950      	cbnz	r0, b7cb0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7c9a:	2e03      	cmp	r6, #3
   b7c9c:	d808      	bhi.n	b7cb0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7c9e:	6823      	ldr	r3, [r4, #0]
   b7ca0:	9a01      	ldr	r2, [sp, #4]
   b7ca2:	695b      	ldr	r3, [r3, #20]
   b7ca4:	4629      	mov	r1, r5
   b7ca6:	4620      	mov	r0, r4
   b7ca8:	b002      	add	sp, #8
   b7caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7cae:	4718      	bx	r3
   b7cb0:	b002      	add	sp, #8
   b7cb2:	bd70      	pop	{r4, r5, r6, pc}

000b7cb4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7cb4:	b510      	push	{r4, lr}
   b7cb6:	4b03      	ldr	r3, [pc, #12]	; (b7cc4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7cb8:	6003      	str	r3, [r0, #0]
   b7cba:	4604      	mov	r4, r0
   b7cbc:	f7ff ffa6 	bl	b7c0c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7cc0:	4620      	mov	r0, r4
   b7cc2:	bd10      	pop	{r4, pc}
   b7cc4:	000b9d28 	.word	0x000b9d28

000b7cc8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7cc8:	b510      	push	{r4, lr}
   b7cca:	4604      	mov	r4, r0
   b7ccc:	f7ff fff2 	bl	b7cb4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7cd0:	4620      	mov	r0, r4
   b7cd2:	210c      	movs	r1, #12
   b7cd4:	f7fc f9e3 	bl	b409e <_ZdlPvj>
   b7cd8:	4620      	mov	r0, r4
   b7cda:	bd10      	pop	{r4, pc}

000b7cdc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7cdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7cde:	9f08      	ldr	r7, [sp, #32]
   b7ce0:	4297      	cmp	r7, r2
   b7ce2:	4605      	mov	r5, r0
   b7ce4:	460e      	mov	r6, r1
   b7ce6:	4614      	mov	r4, r2
   b7ce8:	d00a      	beq.n	b7d00 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7cea:	68a8      	ldr	r0, [r5, #8]
   b7cec:	6802      	ldr	r2, [r0, #0]
   b7cee:	9708      	str	r7, [sp, #32]
   b7cf0:	6a15      	ldr	r5, [r2, #32]
   b7cf2:	4631      	mov	r1, r6
   b7cf4:	4622      	mov	r2, r4
   b7cf6:	46ac      	mov	ip, r5
   b7cf8:	b003      	add	sp, #12
   b7cfa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7cfe:	4760      	bx	ip
   b7d00:	4619      	mov	r1, r3
   b7d02:	9301      	str	r3, [sp, #4]
   b7d04:	f000 f858 	bl	b7db8 <_ZNKSt9type_infoeqERKS_>
   b7d08:	9b01      	ldr	r3, [sp, #4]
   b7d0a:	2800      	cmp	r0, #0
   b7d0c:	d0ed      	beq.n	b7cea <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7d0e:	2006      	movs	r0, #6
   b7d10:	b003      	add	sp, #12
   b7d12:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7d14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7d14:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7d18:	460d      	mov	r5, r1
   b7d1a:	4619      	mov	r1, r3
   b7d1c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7d20:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7d24:	4681      	mov	r9, r0
   b7d26:	4617      	mov	r7, r2
   b7d28:	4698      	mov	r8, r3
   b7d2a:	f000 f845 	bl	b7db8 <_ZNKSt9type_infoeqERKS_>
   b7d2e:	b190      	cbz	r0, b7d56 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7d30:	2d00      	cmp	r5, #0
   b7d32:	6034      	str	r4, [r6, #0]
   b7d34:	7137      	strb	r7, [r6, #4]
   b7d36:	db09      	blt.n	b7d4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7d38:	1961      	adds	r1, r4, r5
   b7d3a:	458a      	cmp	sl, r1
   b7d3c:	bf0c      	ite	eq
   b7d3e:	2106      	moveq	r1, #6
   b7d40:	2101      	movne	r1, #1
   b7d42:	71b1      	strb	r1, [r6, #6]
   b7d44:	2000      	movs	r0, #0
   b7d46:	b001      	add	sp, #4
   b7d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7d4c:	3502      	adds	r5, #2
   b7d4e:	d1f9      	bne.n	b7d44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7d50:	2301      	movs	r3, #1
   b7d52:	71b3      	strb	r3, [r6, #6]
   b7d54:	e7f6      	b.n	b7d44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7d56:	4554      	cmp	r4, sl
   b7d58:	d106      	bne.n	b7d68 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7d5a:	4659      	mov	r1, fp
   b7d5c:	4648      	mov	r0, r9
   b7d5e:	f000 f82b 	bl	b7db8 <_ZNKSt9type_infoeqERKS_>
   b7d62:	b108      	cbz	r0, b7d68 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7d64:	7177      	strb	r7, [r6, #5]
   b7d66:	e7ed      	b.n	b7d44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7d68:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7d6c:	6803      	ldr	r3, [r0, #0]
   b7d6e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7d72:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7d76:	69dc      	ldr	r4, [r3, #28]
   b7d78:	463a      	mov	r2, r7
   b7d7a:	4643      	mov	r3, r8
   b7d7c:	4629      	mov	r1, r5
   b7d7e:	46a4      	mov	ip, r4
   b7d80:	b001      	add	sp, #4
   b7d82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7d86:	4760      	bx	ip

000b7d88 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7d8c:	4607      	mov	r7, r0
   b7d8e:	460c      	mov	r4, r1
   b7d90:	4615      	mov	r5, r2
   b7d92:	461e      	mov	r6, r3
   b7d94:	f7ff ff6d 	bl	b7c72 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7d98:	b948      	cbnz	r0, b7dae <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7d9a:	68b8      	ldr	r0, [r7, #8]
   b7d9c:	6803      	ldr	r3, [r0, #0]
   b7d9e:	699f      	ldr	r7, [r3, #24]
   b7da0:	462a      	mov	r2, r5
   b7da2:	4633      	mov	r3, r6
   b7da4:	4621      	mov	r1, r4
   b7da6:	46bc      	mov	ip, r7
   b7da8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7dac:	4760      	bx	ip
   b7dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7db2 <_ZNSt9type_infoD1Ev>:
   b7db2:	4770      	bx	lr

000b7db4 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7db4:	2000      	movs	r0, #0
   b7db6:	4770      	bx	lr

000b7db8 <_ZNKSt9type_infoeqERKS_>:
   b7db8:	4281      	cmp	r1, r0
   b7dba:	b508      	push	{r3, lr}
   b7dbc:	d00e      	beq.n	b7ddc <_ZNKSt9type_infoeqERKS_+0x24>
   b7dbe:	6840      	ldr	r0, [r0, #4]
   b7dc0:	7803      	ldrb	r3, [r0, #0]
   b7dc2:	2b2a      	cmp	r3, #42	; 0x2a
   b7dc4:	d00c      	beq.n	b7de0 <_ZNKSt9type_infoeqERKS_+0x28>
   b7dc6:	6849      	ldr	r1, [r1, #4]
   b7dc8:	780b      	ldrb	r3, [r1, #0]
   b7dca:	2b2a      	cmp	r3, #42	; 0x2a
   b7dcc:	bf08      	it	eq
   b7dce:	3101      	addeq	r1, #1
   b7dd0:	f000 fd0e 	bl	b87f0 <strcmp>
   b7dd4:	fab0 f080 	clz	r0, r0
   b7dd8:	0940      	lsrs	r0, r0, #5
   b7dda:	bd08      	pop	{r3, pc}
   b7ddc:	2001      	movs	r0, #1
   b7dde:	e7fc      	b.n	b7dda <_ZNKSt9type_infoeqERKS_+0x22>
   b7de0:	2000      	movs	r0, #0
   b7de2:	e7fa      	b.n	b7dda <_ZNKSt9type_infoeqERKS_+0x22>

000b7de4 <__aeabi_drsub>:
   b7de4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7de8:	e002      	b.n	b7df0 <__adddf3>
   b7dea:	bf00      	nop

000b7dec <__aeabi_dsub>:
   b7dec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7df0 <__adddf3>:
   b7df0:	b530      	push	{r4, r5, lr}
   b7df2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7df6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7dfa:	ea94 0f05 	teq	r4, r5
   b7dfe:	bf08      	it	eq
   b7e00:	ea90 0f02 	teqeq	r0, r2
   b7e04:	bf1f      	itttt	ne
   b7e06:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7e0a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7e0e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7e12:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7e16:	f000 80e2 	beq.w	b7fde <__adddf3+0x1ee>
   b7e1a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7e1e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7e22:	bfb8      	it	lt
   b7e24:	426d      	neglt	r5, r5
   b7e26:	dd0c      	ble.n	b7e42 <__adddf3+0x52>
   b7e28:	442c      	add	r4, r5
   b7e2a:	ea80 0202 	eor.w	r2, r0, r2
   b7e2e:	ea81 0303 	eor.w	r3, r1, r3
   b7e32:	ea82 0000 	eor.w	r0, r2, r0
   b7e36:	ea83 0101 	eor.w	r1, r3, r1
   b7e3a:	ea80 0202 	eor.w	r2, r0, r2
   b7e3e:	ea81 0303 	eor.w	r3, r1, r3
   b7e42:	2d36      	cmp	r5, #54	; 0x36
   b7e44:	bf88      	it	hi
   b7e46:	bd30      	pophi	{r4, r5, pc}
   b7e48:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7e4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7e50:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7e54:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7e58:	d002      	beq.n	b7e60 <__adddf3+0x70>
   b7e5a:	4240      	negs	r0, r0
   b7e5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7e60:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7e64:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7e68:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7e6c:	d002      	beq.n	b7e74 <__adddf3+0x84>
   b7e6e:	4252      	negs	r2, r2
   b7e70:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7e74:	ea94 0f05 	teq	r4, r5
   b7e78:	f000 80a7 	beq.w	b7fca <__adddf3+0x1da>
   b7e7c:	f1a4 0401 	sub.w	r4, r4, #1
   b7e80:	f1d5 0e20 	rsbs	lr, r5, #32
   b7e84:	db0d      	blt.n	b7ea2 <__adddf3+0xb2>
   b7e86:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7e8a:	fa22 f205 	lsr.w	r2, r2, r5
   b7e8e:	1880      	adds	r0, r0, r2
   b7e90:	f141 0100 	adc.w	r1, r1, #0
   b7e94:	fa03 f20e 	lsl.w	r2, r3, lr
   b7e98:	1880      	adds	r0, r0, r2
   b7e9a:	fa43 f305 	asr.w	r3, r3, r5
   b7e9e:	4159      	adcs	r1, r3
   b7ea0:	e00e      	b.n	b7ec0 <__adddf3+0xd0>
   b7ea2:	f1a5 0520 	sub.w	r5, r5, #32
   b7ea6:	f10e 0e20 	add.w	lr, lr, #32
   b7eaa:	2a01      	cmp	r2, #1
   b7eac:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7eb0:	bf28      	it	cs
   b7eb2:	f04c 0c02 	orrcs.w	ip, ip, #2
   b7eb6:	fa43 f305 	asr.w	r3, r3, r5
   b7eba:	18c0      	adds	r0, r0, r3
   b7ebc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7ec0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7ec4:	d507      	bpl.n	b7ed6 <__adddf3+0xe6>
   b7ec6:	f04f 0e00 	mov.w	lr, #0
   b7eca:	f1dc 0c00 	rsbs	ip, ip, #0
   b7ece:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7ed2:	eb6e 0101 	sbc.w	r1, lr, r1
   b7ed6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7eda:	d31b      	bcc.n	b7f14 <__adddf3+0x124>
   b7edc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7ee0:	d30c      	bcc.n	b7efc <__adddf3+0x10c>
   b7ee2:	0849      	lsrs	r1, r1, #1
   b7ee4:	ea5f 0030 	movs.w	r0, r0, rrx
   b7ee8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7eec:	f104 0401 	add.w	r4, r4, #1
   b7ef0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7ef4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7ef8:	f080 809a 	bcs.w	b8030 <__adddf3+0x240>
   b7efc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7f00:	bf08      	it	eq
   b7f02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7f06:	f150 0000 	adcs.w	r0, r0, #0
   b7f0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7f0e:	ea41 0105 	orr.w	r1, r1, r5
   b7f12:	bd30      	pop	{r4, r5, pc}
   b7f14:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7f18:	4140      	adcs	r0, r0
   b7f1a:	eb41 0101 	adc.w	r1, r1, r1
   b7f1e:	3c01      	subs	r4, #1
   b7f20:	bf28      	it	cs
   b7f22:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7f26:	d2e9      	bcs.n	b7efc <__adddf3+0x10c>
   b7f28:	f091 0f00 	teq	r1, #0
   b7f2c:	bf04      	itt	eq
   b7f2e:	4601      	moveq	r1, r0
   b7f30:	2000      	moveq	r0, #0
   b7f32:	fab1 f381 	clz	r3, r1
   b7f36:	bf08      	it	eq
   b7f38:	3320      	addeq	r3, #32
   b7f3a:	f1a3 030b 	sub.w	r3, r3, #11
   b7f3e:	f1b3 0220 	subs.w	r2, r3, #32
   b7f42:	da0c      	bge.n	b7f5e <__adddf3+0x16e>
   b7f44:	320c      	adds	r2, #12
   b7f46:	dd08      	ble.n	b7f5a <__adddf3+0x16a>
   b7f48:	f102 0c14 	add.w	ip, r2, #20
   b7f4c:	f1c2 020c 	rsb	r2, r2, #12
   b7f50:	fa01 f00c 	lsl.w	r0, r1, ip
   b7f54:	fa21 f102 	lsr.w	r1, r1, r2
   b7f58:	e00c      	b.n	b7f74 <__adddf3+0x184>
   b7f5a:	f102 0214 	add.w	r2, r2, #20
   b7f5e:	bfd8      	it	le
   b7f60:	f1c2 0c20 	rsble	ip, r2, #32
   b7f64:	fa01 f102 	lsl.w	r1, r1, r2
   b7f68:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7f6c:	bfdc      	itt	le
   b7f6e:	ea41 010c 	orrle.w	r1, r1, ip
   b7f72:	4090      	lslle	r0, r2
   b7f74:	1ae4      	subs	r4, r4, r3
   b7f76:	bfa2      	ittt	ge
   b7f78:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7f7c:	4329      	orrge	r1, r5
   b7f7e:	bd30      	popge	{r4, r5, pc}
   b7f80:	ea6f 0404 	mvn.w	r4, r4
   b7f84:	3c1f      	subs	r4, #31
   b7f86:	da1c      	bge.n	b7fc2 <__adddf3+0x1d2>
   b7f88:	340c      	adds	r4, #12
   b7f8a:	dc0e      	bgt.n	b7faa <__adddf3+0x1ba>
   b7f8c:	f104 0414 	add.w	r4, r4, #20
   b7f90:	f1c4 0220 	rsb	r2, r4, #32
   b7f94:	fa20 f004 	lsr.w	r0, r0, r4
   b7f98:	fa01 f302 	lsl.w	r3, r1, r2
   b7f9c:	ea40 0003 	orr.w	r0, r0, r3
   b7fa0:	fa21 f304 	lsr.w	r3, r1, r4
   b7fa4:	ea45 0103 	orr.w	r1, r5, r3
   b7fa8:	bd30      	pop	{r4, r5, pc}
   b7faa:	f1c4 040c 	rsb	r4, r4, #12
   b7fae:	f1c4 0220 	rsb	r2, r4, #32
   b7fb2:	fa20 f002 	lsr.w	r0, r0, r2
   b7fb6:	fa01 f304 	lsl.w	r3, r1, r4
   b7fba:	ea40 0003 	orr.w	r0, r0, r3
   b7fbe:	4629      	mov	r1, r5
   b7fc0:	bd30      	pop	{r4, r5, pc}
   b7fc2:	fa21 f004 	lsr.w	r0, r1, r4
   b7fc6:	4629      	mov	r1, r5
   b7fc8:	bd30      	pop	{r4, r5, pc}
   b7fca:	f094 0f00 	teq	r4, #0
   b7fce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b7fd2:	bf06      	itte	eq
   b7fd4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7fd8:	3401      	addeq	r4, #1
   b7fda:	3d01      	subne	r5, #1
   b7fdc:	e74e      	b.n	b7e7c <__adddf3+0x8c>
   b7fde:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7fe2:	bf18      	it	ne
   b7fe4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7fe8:	d029      	beq.n	b803e <__adddf3+0x24e>
   b7fea:	ea94 0f05 	teq	r4, r5
   b7fee:	bf08      	it	eq
   b7ff0:	ea90 0f02 	teqeq	r0, r2
   b7ff4:	d005      	beq.n	b8002 <__adddf3+0x212>
   b7ff6:	ea54 0c00 	orrs.w	ip, r4, r0
   b7ffa:	bf04      	itt	eq
   b7ffc:	4619      	moveq	r1, r3
   b7ffe:	4610      	moveq	r0, r2
   b8000:	bd30      	pop	{r4, r5, pc}
   b8002:	ea91 0f03 	teq	r1, r3
   b8006:	bf1e      	ittt	ne
   b8008:	2100      	movne	r1, #0
   b800a:	2000      	movne	r0, #0
   b800c:	bd30      	popne	{r4, r5, pc}
   b800e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b8012:	d105      	bne.n	b8020 <__adddf3+0x230>
   b8014:	0040      	lsls	r0, r0, #1
   b8016:	4149      	adcs	r1, r1
   b8018:	bf28      	it	cs
   b801a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b801e:	bd30      	pop	{r4, r5, pc}
   b8020:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b8024:	bf3c      	itt	cc
   b8026:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b802a:	bd30      	popcc	{r4, r5, pc}
   b802c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8030:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b8034:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8038:	f04f 0000 	mov.w	r0, #0
   b803c:	bd30      	pop	{r4, r5, pc}
   b803e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8042:	bf1a      	itte	ne
   b8044:	4619      	movne	r1, r3
   b8046:	4610      	movne	r0, r2
   b8048:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b804c:	bf1c      	itt	ne
   b804e:	460b      	movne	r3, r1
   b8050:	4602      	movne	r2, r0
   b8052:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8056:	bf06      	itte	eq
   b8058:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b805c:	ea91 0f03 	teqeq	r1, r3
   b8060:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b8064:	bd30      	pop	{r4, r5, pc}
   b8066:	bf00      	nop

000b8068 <__aeabi_ui2d>:
   b8068:	f090 0f00 	teq	r0, #0
   b806c:	bf04      	itt	eq
   b806e:	2100      	moveq	r1, #0
   b8070:	4770      	bxeq	lr
   b8072:	b530      	push	{r4, r5, lr}
   b8074:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8078:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b807c:	f04f 0500 	mov.w	r5, #0
   b8080:	f04f 0100 	mov.w	r1, #0
   b8084:	e750      	b.n	b7f28 <__adddf3+0x138>
   b8086:	bf00      	nop

000b8088 <__aeabi_i2d>:
   b8088:	f090 0f00 	teq	r0, #0
   b808c:	bf04      	itt	eq
   b808e:	2100      	moveq	r1, #0
   b8090:	4770      	bxeq	lr
   b8092:	b530      	push	{r4, r5, lr}
   b8094:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8098:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b809c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b80a0:	bf48      	it	mi
   b80a2:	4240      	negmi	r0, r0
   b80a4:	f04f 0100 	mov.w	r1, #0
   b80a8:	e73e      	b.n	b7f28 <__adddf3+0x138>
   b80aa:	bf00      	nop

000b80ac <__aeabi_f2d>:
   b80ac:	0042      	lsls	r2, r0, #1
   b80ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b80b2:	ea4f 0131 	mov.w	r1, r1, rrx
   b80b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b80ba:	bf1f      	itttt	ne
   b80bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b80c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b80c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b80c8:	4770      	bxne	lr
   b80ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b80ce:	bf08      	it	eq
   b80d0:	4770      	bxeq	lr
   b80d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b80d6:	bf04      	itt	eq
   b80d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b80dc:	4770      	bxeq	lr
   b80de:	b530      	push	{r4, r5, lr}
   b80e0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b80e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b80e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b80ec:	e71c      	b.n	b7f28 <__adddf3+0x138>
   b80ee:	bf00      	nop

000b80f0 <__aeabi_ul2d>:
   b80f0:	ea50 0201 	orrs.w	r2, r0, r1
   b80f4:	bf08      	it	eq
   b80f6:	4770      	bxeq	lr
   b80f8:	b530      	push	{r4, r5, lr}
   b80fa:	f04f 0500 	mov.w	r5, #0
   b80fe:	e00a      	b.n	b8116 <__aeabi_l2d+0x16>

000b8100 <__aeabi_l2d>:
   b8100:	ea50 0201 	orrs.w	r2, r0, r1
   b8104:	bf08      	it	eq
   b8106:	4770      	bxeq	lr
   b8108:	b530      	push	{r4, r5, lr}
   b810a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b810e:	d502      	bpl.n	b8116 <__aeabi_l2d+0x16>
   b8110:	4240      	negs	r0, r0
   b8112:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8116:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b811a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b811e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b8122:	f43f aed8 	beq.w	b7ed6 <__adddf3+0xe6>
   b8126:	f04f 0203 	mov.w	r2, #3
   b812a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b812e:	bf18      	it	ne
   b8130:	3203      	addne	r2, #3
   b8132:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8136:	bf18      	it	ne
   b8138:	3203      	addne	r2, #3
   b813a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b813e:	f1c2 0320 	rsb	r3, r2, #32
   b8142:	fa00 fc03 	lsl.w	ip, r0, r3
   b8146:	fa20 f002 	lsr.w	r0, r0, r2
   b814a:	fa01 fe03 	lsl.w	lr, r1, r3
   b814e:	ea40 000e 	orr.w	r0, r0, lr
   b8152:	fa21 f102 	lsr.w	r1, r1, r2
   b8156:	4414      	add	r4, r2
   b8158:	e6bd      	b.n	b7ed6 <__adddf3+0xe6>
   b815a:	bf00      	nop

000b815c <__aeabi_dmul>:
   b815c:	b570      	push	{r4, r5, r6, lr}
   b815e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8162:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8166:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b816a:	bf1d      	ittte	ne
   b816c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8170:	ea94 0f0c 	teqne	r4, ip
   b8174:	ea95 0f0c 	teqne	r5, ip
   b8178:	f000 f8de 	bleq	b8338 <__aeabi_dmul+0x1dc>
   b817c:	442c      	add	r4, r5
   b817e:	ea81 0603 	eor.w	r6, r1, r3
   b8182:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b8186:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b818a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b818e:	bf18      	it	ne
   b8190:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b8194:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b819c:	d038      	beq.n	b8210 <__aeabi_dmul+0xb4>
   b819e:	fba0 ce02 	umull	ip, lr, r0, r2
   b81a2:	f04f 0500 	mov.w	r5, #0
   b81a6:	fbe1 e502 	umlal	lr, r5, r1, r2
   b81aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b81ae:	fbe0 e503 	umlal	lr, r5, r0, r3
   b81b2:	f04f 0600 	mov.w	r6, #0
   b81b6:	fbe1 5603 	umlal	r5, r6, r1, r3
   b81ba:	f09c 0f00 	teq	ip, #0
   b81be:	bf18      	it	ne
   b81c0:	f04e 0e01 	orrne.w	lr, lr, #1
   b81c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b81c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b81cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b81d0:	d204      	bcs.n	b81dc <__aeabi_dmul+0x80>
   b81d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b81d6:	416d      	adcs	r5, r5
   b81d8:	eb46 0606 	adc.w	r6, r6, r6
   b81dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b81e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b81e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b81e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b81ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b81f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b81f4:	bf88      	it	hi
   b81f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b81fa:	d81e      	bhi.n	b823a <__aeabi_dmul+0xde>
   b81fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b8200:	bf08      	it	eq
   b8202:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b8206:	f150 0000 	adcs.w	r0, r0, #0
   b820a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b820e:	bd70      	pop	{r4, r5, r6, pc}
   b8210:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b8214:	ea46 0101 	orr.w	r1, r6, r1
   b8218:	ea40 0002 	orr.w	r0, r0, r2
   b821c:	ea81 0103 	eor.w	r1, r1, r3
   b8220:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b8224:	bfc2      	ittt	gt
   b8226:	ebd4 050c 	rsbsgt	r5, r4, ip
   b822a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b822e:	bd70      	popgt	{r4, r5, r6, pc}
   b8230:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8234:	f04f 0e00 	mov.w	lr, #0
   b8238:	3c01      	subs	r4, #1
   b823a:	f300 80ab 	bgt.w	b8394 <__aeabi_dmul+0x238>
   b823e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b8242:	bfde      	ittt	le
   b8244:	2000      	movle	r0, #0
   b8246:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b824a:	bd70      	pople	{r4, r5, r6, pc}
   b824c:	f1c4 0400 	rsb	r4, r4, #0
   b8250:	3c20      	subs	r4, #32
   b8252:	da35      	bge.n	b82c0 <__aeabi_dmul+0x164>
   b8254:	340c      	adds	r4, #12
   b8256:	dc1b      	bgt.n	b8290 <__aeabi_dmul+0x134>
   b8258:	f104 0414 	add.w	r4, r4, #20
   b825c:	f1c4 0520 	rsb	r5, r4, #32
   b8260:	fa00 f305 	lsl.w	r3, r0, r5
   b8264:	fa20 f004 	lsr.w	r0, r0, r4
   b8268:	fa01 f205 	lsl.w	r2, r1, r5
   b826c:	ea40 0002 	orr.w	r0, r0, r2
   b8270:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b8274:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8278:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b827c:	fa21 f604 	lsr.w	r6, r1, r4
   b8280:	eb42 0106 	adc.w	r1, r2, r6
   b8284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8288:	bf08      	it	eq
   b828a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b828e:	bd70      	pop	{r4, r5, r6, pc}
   b8290:	f1c4 040c 	rsb	r4, r4, #12
   b8294:	f1c4 0520 	rsb	r5, r4, #32
   b8298:	fa00 f304 	lsl.w	r3, r0, r4
   b829c:	fa20 f005 	lsr.w	r0, r0, r5
   b82a0:	fa01 f204 	lsl.w	r2, r1, r4
   b82a4:	ea40 0002 	orr.w	r0, r0, r2
   b82a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b82ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b82b0:	f141 0100 	adc.w	r1, r1, #0
   b82b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b82b8:	bf08      	it	eq
   b82ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b82be:	bd70      	pop	{r4, r5, r6, pc}
   b82c0:	f1c4 0520 	rsb	r5, r4, #32
   b82c4:	fa00 f205 	lsl.w	r2, r0, r5
   b82c8:	ea4e 0e02 	orr.w	lr, lr, r2
   b82cc:	fa20 f304 	lsr.w	r3, r0, r4
   b82d0:	fa01 f205 	lsl.w	r2, r1, r5
   b82d4:	ea43 0302 	orr.w	r3, r3, r2
   b82d8:	fa21 f004 	lsr.w	r0, r1, r4
   b82dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b82e0:	fa21 f204 	lsr.w	r2, r1, r4
   b82e4:	ea20 0002 	bic.w	r0, r0, r2
   b82e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b82ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b82f0:	bf08      	it	eq
   b82f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b82f6:	bd70      	pop	{r4, r5, r6, pc}
   b82f8:	f094 0f00 	teq	r4, #0
   b82fc:	d10f      	bne.n	b831e <__aeabi_dmul+0x1c2>
   b82fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b8302:	0040      	lsls	r0, r0, #1
   b8304:	eb41 0101 	adc.w	r1, r1, r1
   b8308:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b830c:	bf08      	it	eq
   b830e:	3c01      	subeq	r4, #1
   b8310:	d0f7      	beq.n	b8302 <__aeabi_dmul+0x1a6>
   b8312:	ea41 0106 	orr.w	r1, r1, r6
   b8316:	f095 0f00 	teq	r5, #0
   b831a:	bf18      	it	ne
   b831c:	4770      	bxne	lr
   b831e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b8322:	0052      	lsls	r2, r2, #1
   b8324:	eb43 0303 	adc.w	r3, r3, r3
   b8328:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b832c:	bf08      	it	eq
   b832e:	3d01      	subeq	r5, #1
   b8330:	d0f7      	beq.n	b8322 <__aeabi_dmul+0x1c6>
   b8332:	ea43 0306 	orr.w	r3, r3, r6
   b8336:	4770      	bx	lr
   b8338:	ea94 0f0c 	teq	r4, ip
   b833c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8340:	bf18      	it	ne
   b8342:	ea95 0f0c 	teqne	r5, ip
   b8346:	d00c      	beq.n	b8362 <__aeabi_dmul+0x206>
   b8348:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b834c:	bf18      	it	ne
   b834e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8352:	d1d1      	bne.n	b82f8 <__aeabi_dmul+0x19c>
   b8354:	ea81 0103 	eor.w	r1, r1, r3
   b8358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b835c:	f04f 0000 	mov.w	r0, #0
   b8360:	bd70      	pop	{r4, r5, r6, pc}
   b8362:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8366:	bf06      	itte	eq
   b8368:	4610      	moveq	r0, r2
   b836a:	4619      	moveq	r1, r3
   b836c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8370:	d019      	beq.n	b83a6 <__aeabi_dmul+0x24a>
   b8372:	ea94 0f0c 	teq	r4, ip
   b8376:	d102      	bne.n	b837e <__aeabi_dmul+0x222>
   b8378:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b837c:	d113      	bne.n	b83a6 <__aeabi_dmul+0x24a>
   b837e:	ea95 0f0c 	teq	r5, ip
   b8382:	d105      	bne.n	b8390 <__aeabi_dmul+0x234>
   b8384:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8388:	bf1c      	itt	ne
   b838a:	4610      	movne	r0, r2
   b838c:	4619      	movne	r1, r3
   b838e:	d10a      	bne.n	b83a6 <__aeabi_dmul+0x24a>
   b8390:	ea81 0103 	eor.w	r1, r1, r3
   b8394:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8398:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b839c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b83a0:	f04f 0000 	mov.w	r0, #0
   b83a4:	bd70      	pop	{r4, r5, r6, pc}
   b83a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b83aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b83ae:	bd70      	pop	{r4, r5, r6, pc}

000b83b0 <__aeabi_ddiv>:
   b83b0:	b570      	push	{r4, r5, r6, lr}
   b83b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b83b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b83ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b83be:	bf1d      	ittte	ne
   b83c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b83c4:	ea94 0f0c 	teqne	r4, ip
   b83c8:	ea95 0f0c 	teqne	r5, ip
   b83cc:	f000 f8a7 	bleq	b851e <__aeabi_ddiv+0x16e>
   b83d0:	eba4 0405 	sub.w	r4, r4, r5
   b83d4:	ea81 0e03 	eor.w	lr, r1, r3
   b83d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b83dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b83e0:	f000 8088 	beq.w	b84f4 <__aeabi_ddiv+0x144>
   b83e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b83e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b83ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b83f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b83f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b83f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b83fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b8400:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b8404:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b8408:	429d      	cmp	r5, r3
   b840a:	bf08      	it	eq
   b840c:	4296      	cmpeq	r6, r2
   b840e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b8412:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b8416:	d202      	bcs.n	b841e <__aeabi_ddiv+0x6e>
   b8418:	085b      	lsrs	r3, r3, #1
   b841a:	ea4f 0232 	mov.w	r2, r2, rrx
   b841e:	1ab6      	subs	r6, r6, r2
   b8420:	eb65 0503 	sbc.w	r5, r5, r3
   b8424:	085b      	lsrs	r3, r3, #1
   b8426:	ea4f 0232 	mov.w	r2, r2, rrx
   b842a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b842e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b8432:	ebb6 0e02 	subs.w	lr, r6, r2
   b8436:	eb75 0e03 	sbcs.w	lr, r5, r3
   b843a:	bf22      	ittt	cs
   b843c:	1ab6      	subcs	r6, r6, r2
   b843e:	4675      	movcs	r5, lr
   b8440:	ea40 000c 	orrcs.w	r0, r0, ip
   b8444:	085b      	lsrs	r3, r3, #1
   b8446:	ea4f 0232 	mov.w	r2, r2, rrx
   b844a:	ebb6 0e02 	subs.w	lr, r6, r2
   b844e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8452:	bf22      	ittt	cs
   b8454:	1ab6      	subcs	r6, r6, r2
   b8456:	4675      	movcs	r5, lr
   b8458:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b845c:	085b      	lsrs	r3, r3, #1
   b845e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8462:	ebb6 0e02 	subs.w	lr, r6, r2
   b8466:	eb75 0e03 	sbcs.w	lr, r5, r3
   b846a:	bf22      	ittt	cs
   b846c:	1ab6      	subcs	r6, r6, r2
   b846e:	4675      	movcs	r5, lr
   b8470:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b8474:	085b      	lsrs	r3, r3, #1
   b8476:	ea4f 0232 	mov.w	r2, r2, rrx
   b847a:	ebb6 0e02 	subs.w	lr, r6, r2
   b847e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8482:	bf22      	ittt	cs
   b8484:	1ab6      	subcs	r6, r6, r2
   b8486:	4675      	movcs	r5, lr
   b8488:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b848c:	ea55 0e06 	orrs.w	lr, r5, r6
   b8490:	d018      	beq.n	b84c4 <__aeabi_ddiv+0x114>
   b8492:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b8496:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b849a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b849e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b84a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b84a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b84aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b84ae:	d1c0      	bne.n	b8432 <__aeabi_ddiv+0x82>
   b84b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b84b4:	d10b      	bne.n	b84ce <__aeabi_ddiv+0x11e>
   b84b6:	ea41 0100 	orr.w	r1, r1, r0
   b84ba:	f04f 0000 	mov.w	r0, #0
   b84be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b84c2:	e7b6      	b.n	b8432 <__aeabi_ddiv+0x82>
   b84c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b84c8:	bf04      	itt	eq
   b84ca:	4301      	orreq	r1, r0
   b84cc:	2000      	moveq	r0, #0
   b84ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b84d2:	bf88      	it	hi
   b84d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b84d8:	f63f aeaf 	bhi.w	b823a <__aeabi_dmul+0xde>
   b84dc:	ebb5 0c03 	subs.w	ip, r5, r3
   b84e0:	bf04      	itt	eq
   b84e2:	ebb6 0c02 	subseq.w	ip, r6, r2
   b84e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b84ea:	f150 0000 	adcs.w	r0, r0, #0
   b84ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b84f2:	bd70      	pop	{r4, r5, r6, pc}
   b84f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b84f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b84fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b8500:	bfc2      	ittt	gt
   b8502:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8506:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b850a:	bd70      	popgt	{r4, r5, r6, pc}
   b850c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8510:	f04f 0e00 	mov.w	lr, #0
   b8514:	3c01      	subs	r4, #1
   b8516:	e690      	b.n	b823a <__aeabi_dmul+0xde>
   b8518:	ea45 0e06 	orr.w	lr, r5, r6
   b851c:	e68d      	b.n	b823a <__aeabi_dmul+0xde>
   b851e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8522:	ea94 0f0c 	teq	r4, ip
   b8526:	bf08      	it	eq
   b8528:	ea95 0f0c 	teqeq	r5, ip
   b852c:	f43f af3b 	beq.w	b83a6 <__aeabi_dmul+0x24a>
   b8530:	ea94 0f0c 	teq	r4, ip
   b8534:	d10a      	bne.n	b854c <__aeabi_ddiv+0x19c>
   b8536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b853a:	f47f af34 	bne.w	b83a6 <__aeabi_dmul+0x24a>
   b853e:	ea95 0f0c 	teq	r5, ip
   b8542:	f47f af25 	bne.w	b8390 <__aeabi_dmul+0x234>
   b8546:	4610      	mov	r0, r2
   b8548:	4619      	mov	r1, r3
   b854a:	e72c      	b.n	b83a6 <__aeabi_dmul+0x24a>
   b854c:	ea95 0f0c 	teq	r5, ip
   b8550:	d106      	bne.n	b8560 <__aeabi_ddiv+0x1b0>
   b8552:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8556:	f43f aefd 	beq.w	b8354 <__aeabi_dmul+0x1f8>
   b855a:	4610      	mov	r0, r2
   b855c:	4619      	mov	r1, r3
   b855e:	e722      	b.n	b83a6 <__aeabi_dmul+0x24a>
   b8560:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8564:	bf18      	it	ne
   b8566:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b856a:	f47f aec5 	bne.w	b82f8 <__aeabi_dmul+0x19c>
   b856e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b8572:	f47f af0d 	bne.w	b8390 <__aeabi_dmul+0x234>
   b8576:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b857a:	f47f aeeb 	bne.w	b8354 <__aeabi_dmul+0x1f8>
   b857e:	e712      	b.n	b83a6 <__aeabi_dmul+0x24a>

000b8580 <__gedf2>:
   b8580:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8584:	e006      	b.n	b8594 <__cmpdf2+0x4>
   b8586:	bf00      	nop

000b8588 <__ledf2>:
   b8588:	f04f 0c01 	mov.w	ip, #1
   b858c:	e002      	b.n	b8594 <__cmpdf2+0x4>
   b858e:	bf00      	nop

000b8590 <__cmpdf2>:
   b8590:	f04f 0c01 	mov.w	ip, #1
   b8594:	f84d cd04 	str.w	ip, [sp, #-4]!
   b8598:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b859c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b85a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b85a4:	bf18      	it	ne
   b85a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b85aa:	d01b      	beq.n	b85e4 <__cmpdf2+0x54>
   b85ac:	b001      	add	sp, #4
   b85ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b85b2:	bf0c      	ite	eq
   b85b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b85b8:	ea91 0f03 	teqne	r1, r3
   b85bc:	bf02      	ittt	eq
   b85be:	ea90 0f02 	teqeq	r0, r2
   b85c2:	2000      	moveq	r0, #0
   b85c4:	4770      	bxeq	lr
   b85c6:	f110 0f00 	cmn.w	r0, #0
   b85ca:	ea91 0f03 	teq	r1, r3
   b85ce:	bf58      	it	pl
   b85d0:	4299      	cmppl	r1, r3
   b85d2:	bf08      	it	eq
   b85d4:	4290      	cmpeq	r0, r2
   b85d6:	bf2c      	ite	cs
   b85d8:	17d8      	asrcs	r0, r3, #31
   b85da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b85de:	f040 0001 	orr.w	r0, r0, #1
   b85e2:	4770      	bx	lr
   b85e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b85e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b85ec:	d102      	bne.n	b85f4 <__cmpdf2+0x64>
   b85ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b85f2:	d107      	bne.n	b8604 <__cmpdf2+0x74>
   b85f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b85f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b85fc:	d1d6      	bne.n	b85ac <__cmpdf2+0x1c>
   b85fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b8602:	d0d3      	beq.n	b85ac <__cmpdf2+0x1c>
   b8604:	f85d 0b04 	ldr.w	r0, [sp], #4
   b8608:	4770      	bx	lr
   b860a:	bf00      	nop

000b860c <__aeabi_cdrcmple>:
   b860c:	4684      	mov	ip, r0
   b860e:	4610      	mov	r0, r2
   b8610:	4662      	mov	r2, ip
   b8612:	468c      	mov	ip, r1
   b8614:	4619      	mov	r1, r3
   b8616:	4663      	mov	r3, ip
   b8618:	e000      	b.n	b861c <__aeabi_cdcmpeq>
   b861a:	bf00      	nop

000b861c <__aeabi_cdcmpeq>:
   b861c:	b501      	push	{r0, lr}
   b861e:	f7ff ffb7 	bl	b8590 <__cmpdf2>
   b8622:	2800      	cmp	r0, #0
   b8624:	bf48      	it	mi
   b8626:	f110 0f00 	cmnmi.w	r0, #0
   b862a:	bd01      	pop	{r0, pc}

000b862c <__aeabi_dcmpeq>:
   b862c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8630:	f7ff fff4 	bl	b861c <__aeabi_cdcmpeq>
   b8634:	bf0c      	ite	eq
   b8636:	2001      	moveq	r0, #1
   b8638:	2000      	movne	r0, #0
   b863a:	f85d fb08 	ldr.w	pc, [sp], #8
   b863e:	bf00      	nop

000b8640 <__aeabi_dcmplt>:
   b8640:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8644:	f7ff ffea 	bl	b861c <__aeabi_cdcmpeq>
   b8648:	bf34      	ite	cc
   b864a:	2001      	movcc	r0, #1
   b864c:	2000      	movcs	r0, #0
   b864e:	f85d fb08 	ldr.w	pc, [sp], #8
   b8652:	bf00      	nop

000b8654 <__aeabi_dcmple>:
   b8654:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8658:	f7ff ffe0 	bl	b861c <__aeabi_cdcmpeq>
   b865c:	bf94      	ite	ls
   b865e:	2001      	movls	r0, #1
   b8660:	2000      	movhi	r0, #0
   b8662:	f85d fb08 	ldr.w	pc, [sp], #8
   b8666:	bf00      	nop

000b8668 <__aeabi_dcmpge>:
   b8668:	f84d ed08 	str.w	lr, [sp, #-8]!
   b866c:	f7ff ffce 	bl	b860c <__aeabi_cdrcmple>
   b8670:	bf94      	ite	ls
   b8672:	2001      	movls	r0, #1
   b8674:	2000      	movhi	r0, #0
   b8676:	f85d fb08 	ldr.w	pc, [sp], #8
   b867a:	bf00      	nop

000b867c <__aeabi_dcmpgt>:
   b867c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8680:	f7ff ffc4 	bl	b860c <__aeabi_cdrcmple>
   b8684:	bf34      	ite	cc
   b8686:	2001      	movcc	r0, #1
   b8688:	2000      	movcs	r0, #0
   b868a:	f85d fb08 	ldr.w	pc, [sp], #8
   b868e:	bf00      	nop

000b8690 <__aeabi_dcmpun>:
   b8690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8698:	d102      	bne.n	b86a0 <__aeabi_dcmpun+0x10>
   b869a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b869e:	d10a      	bne.n	b86b6 <__aeabi_dcmpun+0x26>
   b86a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b86a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b86a8:	d102      	bne.n	b86b0 <__aeabi_dcmpun+0x20>
   b86aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b86ae:	d102      	bne.n	b86b6 <__aeabi_dcmpun+0x26>
   b86b0:	f04f 0000 	mov.w	r0, #0
   b86b4:	4770      	bx	lr
   b86b6:	f04f 0001 	mov.w	r0, #1
   b86ba:	4770      	bx	lr

000b86bc <__aeabi_d2iz>:
   b86bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b86c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b86c4:	d215      	bcs.n	b86f2 <__aeabi_d2iz+0x36>
   b86c6:	d511      	bpl.n	b86ec <__aeabi_d2iz+0x30>
   b86c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b86cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b86d0:	d912      	bls.n	b86f8 <__aeabi_d2iz+0x3c>
   b86d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b86d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b86da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b86de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b86e2:	fa23 f002 	lsr.w	r0, r3, r2
   b86e6:	bf18      	it	ne
   b86e8:	4240      	negne	r0, r0
   b86ea:	4770      	bx	lr
   b86ec:	f04f 0000 	mov.w	r0, #0
   b86f0:	4770      	bx	lr
   b86f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b86f6:	d105      	bne.n	b8704 <__aeabi_d2iz+0x48>
   b86f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b86fc:	bf08      	it	eq
   b86fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b8702:	4770      	bx	lr
   b8704:	f04f 0000 	mov.w	r0, #0
   b8708:	4770      	bx	lr
   b870a:	bf00      	nop

000b870c <__aeabi_d2uiz>:
   b870c:	004a      	lsls	r2, r1, #1
   b870e:	d211      	bcs.n	b8734 <__aeabi_d2uiz+0x28>
   b8710:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b8714:	d211      	bcs.n	b873a <__aeabi_d2uiz+0x2e>
   b8716:	d50d      	bpl.n	b8734 <__aeabi_d2uiz+0x28>
   b8718:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b871c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8720:	d40e      	bmi.n	b8740 <__aeabi_d2uiz+0x34>
   b8722:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8726:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b872a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b872e:	fa23 f002 	lsr.w	r0, r3, r2
   b8732:	4770      	bx	lr
   b8734:	f04f 0000 	mov.w	r0, #0
   b8738:	4770      	bx	lr
   b873a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b873e:	d102      	bne.n	b8746 <__aeabi_d2uiz+0x3a>
   b8740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8744:	4770      	bx	lr
   b8746:	f04f 0000 	mov.w	r0, #0
   b874a:	4770      	bx	lr

000b874c <atexit>:
   b874c:	2300      	movs	r3, #0
   b874e:	4601      	mov	r1, r0
   b8750:	461a      	mov	r2, r3
   b8752:	4618      	mov	r0, r3
   b8754:	f000 b8fe 	b.w	b8954 <__register_exitproc>

000b8758 <atoi>:
   b8758:	220a      	movs	r2, #10
   b875a:	2100      	movs	r1, #0
   b875c:	f000 b8f0 	b.w	b8940 <strtol>

000b8760 <atol>:
   b8760:	220a      	movs	r2, #10
   b8762:	2100      	movs	r1, #0
   b8764:	f000 b8ec 	b.w	b8940 <strtol>

000b8768 <memcpy>:
   b8768:	440a      	add	r2, r1
   b876a:	4291      	cmp	r1, r2
   b876c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8770:	d100      	bne.n	b8774 <memcpy+0xc>
   b8772:	4770      	bx	lr
   b8774:	b510      	push	{r4, lr}
   b8776:	f811 4b01 	ldrb.w	r4, [r1], #1
   b877a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b877e:	4291      	cmp	r1, r2
   b8780:	d1f9      	bne.n	b8776 <memcpy+0xe>
   b8782:	bd10      	pop	{r4, pc}

000b8784 <memset>:
   b8784:	4402      	add	r2, r0
   b8786:	4603      	mov	r3, r0
   b8788:	4293      	cmp	r3, r2
   b878a:	d100      	bne.n	b878e <memset+0xa>
   b878c:	4770      	bx	lr
   b878e:	f803 1b01 	strb.w	r1, [r3], #1
   b8792:	e7f9      	b.n	b8788 <memset+0x4>

000b8794 <srand>:
   b8794:	b538      	push	{r3, r4, r5, lr}
   b8796:	4b10      	ldr	r3, [pc, #64]	; (b87d8 <srand+0x44>)
   b8798:	681d      	ldr	r5, [r3, #0]
   b879a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b879c:	4604      	mov	r4, r0
   b879e:	b9b3      	cbnz	r3, b87ce <srand+0x3a>
   b87a0:	2018      	movs	r0, #24
   b87a2:	f7fd ffa9 	bl	b66f8 <malloc>
   b87a6:	4602      	mov	r2, r0
   b87a8:	63a8      	str	r0, [r5, #56]	; 0x38
   b87aa:	b920      	cbnz	r0, b87b6 <srand+0x22>
   b87ac:	4b0b      	ldr	r3, [pc, #44]	; (b87dc <srand+0x48>)
   b87ae:	480c      	ldr	r0, [pc, #48]	; (b87e0 <srand+0x4c>)
   b87b0:	2142      	movs	r1, #66	; 0x42
   b87b2:	f7fd ffc9 	bl	b6748 <__assert_func>
   b87b6:	490b      	ldr	r1, [pc, #44]	; (b87e4 <srand+0x50>)
   b87b8:	4b0b      	ldr	r3, [pc, #44]	; (b87e8 <srand+0x54>)
   b87ba:	e9c0 1300 	strd	r1, r3, [r0]
   b87be:	4b0b      	ldr	r3, [pc, #44]	; (b87ec <srand+0x58>)
   b87c0:	6083      	str	r3, [r0, #8]
   b87c2:	230b      	movs	r3, #11
   b87c4:	8183      	strh	r3, [r0, #12]
   b87c6:	2100      	movs	r1, #0
   b87c8:	2001      	movs	r0, #1
   b87ca:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b87ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b87d0:	2200      	movs	r2, #0
   b87d2:	611c      	str	r4, [r3, #16]
   b87d4:	615a      	str	r2, [r3, #20]
   b87d6:	bd38      	pop	{r3, r4, r5, pc}
   b87d8:	2003e560 	.word	0x2003e560
   b87dc:	000b9d61 	.word	0x000b9d61
   b87e0:	000b9d78 	.word	0x000b9d78
   b87e4:	abcd330e 	.word	0xabcd330e
   b87e8:	e66d1234 	.word	0xe66d1234
   b87ec:	0005deec 	.word	0x0005deec

000b87f0 <strcmp>:
   b87f0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b87f4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b87f8:	2a01      	cmp	r2, #1
   b87fa:	bf28      	it	cs
   b87fc:	429a      	cmpcs	r2, r3
   b87fe:	d0f7      	beq.n	b87f0 <strcmp>
   b8800:	1ad0      	subs	r0, r2, r3
   b8802:	4770      	bx	lr

000b8804 <strlen>:
   b8804:	4603      	mov	r3, r0
   b8806:	f813 2b01 	ldrb.w	r2, [r3], #1
   b880a:	2a00      	cmp	r2, #0
   b880c:	d1fb      	bne.n	b8806 <strlen+0x2>
   b880e:	1a18      	subs	r0, r3, r0
   b8810:	3801      	subs	r0, #1
   b8812:	4770      	bx	lr

000b8814 <strncpy>:
   b8814:	b510      	push	{r4, lr}
   b8816:	3901      	subs	r1, #1
   b8818:	4603      	mov	r3, r0
   b881a:	b132      	cbz	r2, b882a <strncpy+0x16>
   b881c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8820:	f803 4b01 	strb.w	r4, [r3], #1
   b8824:	3a01      	subs	r2, #1
   b8826:	2c00      	cmp	r4, #0
   b8828:	d1f7      	bne.n	b881a <strncpy+0x6>
   b882a:	441a      	add	r2, r3
   b882c:	2100      	movs	r1, #0
   b882e:	4293      	cmp	r3, r2
   b8830:	d100      	bne.n	b8834 <strncpy+0x20>
   b8832:	bd10      	pop	{r4, pc}
   b8834:	f803 1b01 	strb.w	r1, [r3], #1
   b8838:	e7f9      	b.n	b882e <strncpy+0x1a>
	...

000b883c <_strtol_l.constprop.0>:
   b883c:	2b01      	cmp	r3, #1
   b883e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8842:	d001      	beq.n	b8848 <_strtol_l.constprop.0+0xc>
   b8844:	2b24      	cmp	r3, #36	; 0x24
   b8846:	d906      	bls.n	b8856 <_strtol_l.constprop.0+0x1a>
   b8848:	f7fd ff76 	bl	b6738 <__errno>
   b884c:	2316      	movs	r3, #22
   b884e:	6003      	str	r3, [r0, #0]
   b8850:	2000      	movs	r0, #0
   b8852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8856:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b893c <_strtol_l.constprop.0+0x100>
   b885a:	460d      	mov	r5, r1
   b885c:	462e      	mov	r6, r5
   b885e:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8862:	f814 700c 	ldrb.w	r7, [r4, ip]
   b8866:	f017 0708 	ands.w	r7, r7, #8
   b886a:	d1f7      	bne.n	b885c <_strtol_l.constprop.0+0x20>
   b886c:	2c2d      	cmp	r4, #45	; 0x2d
   b886e:	d132      	bne.n	b88d6 <_strtol_l.constprop.0+0x9a>
   b8870:	782c      	ldrb	r4, [r5, #0]
   b8872:	2701      	movs	r7, #1
   b8874:	1cb5      	adds	r5, r6, #2
   b8876:	2b00      	cmp	r3, #0
   b8878:	d05b      	beq.n	b8932 <_strtol_l.constprop.0+0xf6>
   b887a:	2b10      	cmp	r3, #16
   b887c:	d109      	bne.n	b8892 <_strtol_l.constprop.0+0x56>
   b887e:	2c30      	cmp	r4, #48	; 0x30
   b8880:	d107      	bne.n	b8892 <_strtol_l.constprop.0+0x56>
   b8882:	782c      	ldrb	r4, [r5, #0]
   b8884:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8888:	2c58      	cmp	r4, #88	; 0x58
   b888a:	d14d      	bne.n	b8928 <_strtol_l.constprop.0+0xec>
   b888c:	786c      	ldrb	r4, [r5, #1]
   b888e:	2310      	movs	r3, #16
   b8890:	3502      	adds	r5, #2
   b8892:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b8896:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b889a:	f04f 0c00 	mov.w	ip, #0
   b889e:	fbb8 f9f3 	udiv	r9, r8, r3
   b88a2:	4666      	mov	r6, ip
   b88a4:	fb03 8a19 	mls	sl, r3, r9, r8
   b88a8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b88ac:	f1be 0f09 	cmp.w	lr, #9
   b88b0:	d816      	bhi.n	b88e0 <_strtol_l.constprop.0+0xa4>
   b88b2:	4674      	mov	r4, lr
   b88b4:	42a3      	cmp	r3, r4
   b88b6:	dd24      	ble.n	b8902 <_strtol_l.constprop.0+0xc6>
   b88b8:	f1bc 0f00 	cmp.w	ip, #0
   b88bc:	db1e      	blt.n	b88fc <_strtol_l.constprop.0+0xc0>
   b88be:	45b1      	cmp	r9, r6
   b88c0:	d31c      	bcc.n	b88fc <_strtol_l.constprop.0+0xc0>
   b88c2:	d101      	bne.n	b88c8 <_strtol_l.constprop.0+0x8c>
   b88c4:	45a2      	cmp	sl, r4
   b88c6:	db19      	blt.n	b88fc <_strtol_l.constprop.0+0xc0>
   b88c8:	fb06 4603 	mla	r6, r6, r3, r4
   b88cc:	f04f 0c01 	mov.w	ip, #1
   b88d0:	f815 4b01 	ldrb.w	r4, [r5], #1
   b88d4:	e7e8      	b.n	b88a8 <_strtol_l.constprop.0+0x6c>
   b88d6:	2c2b      	cmp	r4, #43	; 0x2b
   b88d8:	bf04      	itt	eq
   b88da:	782c      	ldrbeq	r4, [r5, #0]
   b88dc:	1cb5      	addeq	r5, r6, #2
   b88de:	e7ca      	b.n	b8876 <_strtol_l.constprop.0+0x3a>
   b88e0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b88e4:	f1be 0f19 	cmp.w	lr, #25
   b88e8:	d801      	bhi.n	b88ee <_strtol_l.constprop.0+0xb2>
   b88ea:	3c37      	subs	r4, #55	; 0x37
   b88ec:	e7e2      	b.n	b88b4 <_strtol_l.constprop.0+0x78>
   b88ee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b88f2:	f1be 0f19 	cmp.w	lr, #25
   b88f6:	d804      	bhi.n	b8902 <_strtol_l.constprop.0+0xc6>
   b88f8:	3c57      	subs	r4, #87	; 0x57
   b88fa:	e7db      	b.n	b88b4 <_strtol_l.constprop.0+0x78>
   b88fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8900:	e7e6      	b.n	b88d0 <_strtol_l.constprop.0+0x94>
   b8902:	f1bc 0f00 	cmp.w	ip, #0
   b8906:	da05      	bge.n	b8914 <_strtol_l.constprop.0+0xd8>
   b8908:	2322      	movs	r3, #34	; 0x22
   b890a:	6003      	str	r3, [r0, #0]
   b890c:	4646      	mov	r6, r8
   b890e:	b942      	cbnz	r2, b8922 <_strtol_l.constprop.0+0xe6>
   b8910:	4630      	mov	r0, r6
   b8912:	e79e      	b.n	b8852 <_strtol_l.constprop.0+0x16>
   b8914:	b107      	cbz	r7, b8918 <_strtol_l.constprop.0+0xdc>
   b8916:	4276      	negs	r6, r6
   b8918:	2a00      	cmp	r2, #0
   b891a:	d0f9      	beq.n	b8910 <_strtol_l.constprop.0+0xd4>
   b891c:	f1bc 0f00 	cmp.w	ip, #0
   b8920:	d000      	beq.n	b8924 <_strtol_l.constprop.0+0xe8>
   b8922:	1e69      	subs	r1, r5, #1
   b8924:	6011      	str	r1, [r2, #0]
   b8926:	e7f3      	b.n	b8910 <_strtol_l.constprop.0+0xd4>
   b8928:	2430      	movs	r4, #48	; 0x30
   b892a:	2b00      	cmp	r3, #0
   b892c:	d1b1      	bne.n	b8892 <_strtol_l.constprop.0+0x56>
   b892e:	2308      	movs	r3, #8
   b8930:	e7af      	b.n	b8892 <_strtol_l.constprop.0+0x56>
   b8932:	2c30      	cmp	r4, #48	; 0x30
   b8934:	d0a5      	beq.n	b8882 <_strtol_l.constprop.0+0x46>
   b8936:	230a      	movs	r3, #10
   b8938:	e7ab      	b.n	b8892 <_strtol_l.constprop.0+0x56>
   b893a:	bf00      	nop
   b893c:	000b9df6 	.word	0x000b9df6

000b8940 <strtol>:
   b8940:	4613      	mov	r3, r2
   b8942:	460a      	mov	r2, r1
   b8944:	4601      	mov	r1, r0
   b8946:	4802      	ldr	r0, [pc, #8]	; (b8950 <strtol+0x10>)
   b8948:	6800      	ldr	r0, [r0, #0]
   b894a:	f7ff bf77 	b.w	b883c <_strtol_l.constprop.0>
   b894e:	bf00      	nop
   b8950:	2003e560 	.word	0x2003e560

000b8954 <__register_exitproc>:
   b8954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8958:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8a14 <__register_exitproc+0xc0>
   b895c:	4606      	mov	r6, r0
   b895e:	f8d8 0000 	ldr.w	r0, [r8]
   b8962:	461f      	mov	r7, r3
   b8964:	460d      	mov	r5, r1
   b8966:	4691      	mov	r9, r2
   b8968:	f000 f856 	bl	b8a18 <__retarget_lock_acquire_recursive>
   b896c:	4b25      	ldr	r3, [pc, #148]	; (b8a04 <__register_exitproc+0xb0>)
   b896e:	681c      	ldr	r4, [r3, #0]
   b8970:	b934      	cbnz	r4, b8980 <__register_exitproc+0x2c>
   b8972:	4c25      	ldr	r4, [pc, #148]	; (b8a08 <__register_exitproc+0xb4>)
   b8974:	601c      	str	r4, [r3, #0]
   b8976:	4b25      	ldr	r3, [pc, #148]	; (b8a0c <__register_exitproc+0xb8>)
   b8978:	b113      	cbz	r3, b8980 <__register_exitproc+0x2c>
   b897a:	681b      	ldr	r3, [r3, #0]
   b897c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8980:	6863      	ldr	r3, [r4, #4]
   b8982:	2b1f      	cmp	r3, #31
   b8984:	dd07      	ble.n	b8996 <__register_exitproc+0x42>
   b8986:	f8d8 0000 	ldr.w	r0, [r8]
   b898a:	f000 f847 	bl	b8a1c <__retarget_lock_release_recursive>
   b898e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8996:	b34e      	cbz	r6, b89ec <__register_exitproc+0x98>
   b8998:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b899c:	b988      	cbnz	r0, b89c2 <__register_exitproc+0x6e>
   b899e:	4b1c      	ldr	r3, [pc, #112]	; (b8a10 <__register_exitproc+0xbc>)
   b89a0:	b923      	cbnz	r3, b89ac <__register_exitproc+0x58>
   b89a2:	f8d8 0000 	ldr.w	r0, [r8]
   b89a6:	f000 f838 	bl	b8a1a <__retarget_lock_release>
   b89aa:	e7f0      	b.n	b898e <__register_exitproc+0x3a>
   b89ac:	f44f 7084 	mov.w	r0, #264	; 0x108
   b89b0:	f7fd fea2 	bl	b66f8 <malloc>
   b89b4:	2800      	cmp	r0, #0
   b89b6:	d0f4      	beq.n	b89a2 <__register_exitproc+0x4e>
   b89b8:	2300      	movs	r3, #0
   b89ba:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b89be:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b89c2:	6863      	ldr	r3, [r4, #4]
   b89c4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b89c8:	2201      	movs	r2, #1
   b89ca:	409a      	lsls	r2, r3
   b89cc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b89d0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b89d4:	4313      	orrs	r3, r2
   b89d6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b89da:	2e02      	cmp	r6, #2
   b89dc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b89e0:	bf02      	ittt	eq
   b89e2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b89e6:	4313      	orreq	r3, r2
   b89e8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b89ec:	6863      	ldr	r3, [r4, #4]
   b89ee:	f8d8 0000 	ldr.w	r0, [r8]
   b89f2:	1c5a      	adds	r2, r3, #1
   b89f4:	3302      	adds	r3, #2
   b89f6:	6062      	str	r2, [r4, #4]
   b89f8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b89fc:	f000 f80e 	bl	b8a1c <__retarget_lock_release_recursive>
   b8a00:	2000      	movs	r0, #0
   b8a02:	e7c6      	b.n	b8992 <__register_exitproc+0x3e>
   b8a04:	2003e7e8 	.word	0x2003e7e8
   b8a08:	2003e75c 	.word	0x2003e75c
   b8a0c:	00000000 	.word	0x00000000
   b8a10:	000b66f9 	.word	0x000b66f9
   b8a14:	2003e5c4 	.word	0x2003e5c4

000b8a18 <__retarget_lock_acquire_recursive>:
   b8a18:	4770      	bx	lr

000b8a1a <__retarget_lock_release>:
   b8a1a:	4770      	bx	lr

000b8a1c <__retarget_lock_release_recursive>:
   b8a1c:	4770      	bx	lr

000b8a1e <link_code_end>:
	...

000b8a20 <dynalib_user>:
   b8a20:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b8a30:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8a40:	7620 7269 7574 6c61 2500 0069 6c25 0069      virtual.%i.%li.
   b8a50:	6e69 6f00 7475 7000 6d77 6400 0077 7761     in.out.pwm.dw.aw
   b8a60:	5100 416e 7877 5862 7445 4155 4a58 705f     .QnAwxbXEtUAXJ_p
   b8a70:	6b48 624f 6b54 614d 6967 6b4c 3565 4d7a     HkObTkMagiLke5zM
   b8a80:	005a 7542 7474 6e6f 5420 7061 6570 0064     Z.Button Tapped.
   b8a90:	6548 2c79 4220 796c 6b6e 7020 7375 2068     Hey, Blynk push 
   b8aa0:	6568 6572 0021 5550 4853 5300 4e45 0054     here!.PUSH.SENT.
   b8ab0:	4854 5349 4920 2053 2041 5550 4853 4e20     THIS IS A PUSH N
   b8ac0:	544f 4649 4349 5441 4f49 004e               OTIFICATION.

000b8acc <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   b8acc:	6c62 6b6e 6e69 0066 6576 0072 2e31 2e31     blnkinf.ver.1.1.
   b8adc:	0030 2d68 6562 7461 3400 0035 7562 6666     0.h-beat.45.buff
   b8aec:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   b8afc:	6974 6c63 2065 7241 6f67 006e 7562 6c69     ticle Argon.buil
   b8b0c:	0064 754a 206e 3932 3220 3230 2032 3431     d.Jun 29 2022 14
   b8b1c:	343a 3a32 3133 0000 0000 0000               :42:31......

000b8b28 <_ZL22BlynkReadHandlerVector>:
   b8b28:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8b38:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8b48:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8b58:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8b68:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8b78:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8b88:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8b98:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8ba8:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8bb8:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8bc8:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8bd8:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8be8:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8bf8:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8c08:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8c18:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8c28:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8c38:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8c48:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8c58:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8c68:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8c78:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8c88:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8c98:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8ca8:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8cb8:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8cc8:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8cd8:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8ce8:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8cf8:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8d08:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..
   b8d18:	4ec5 000b 4ec5 000b 4ec5 000b 4ec5 000b     .N...N...N...N..

000b8d28 <_ZL23BlynkWriteHandlerVector>:
   b8d28:	4a2d 000b 4ec7 000b 4ec7 000b 4ec7 000b     -J...N...N...N..
   b8d38:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8d48:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8d58:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8d68:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8d78:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8d88:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8d98:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8da8:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8db8:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8dc8:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8dd8:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8de8:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8df8:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8e08:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8e18:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8e28:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8e38:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8e48:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8e58:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8e68:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8e78:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8e88:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8e98:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8ea8:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8eb8:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8ec8:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8ed8:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8ee8:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8ef8:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8f08:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8f18:	4ec7 000b 4ec7 000b 4ec7 000b 4ec7 000b     .N...N...N...N..
   b8f28:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   b8f38:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   b8f48:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   b8f58:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   b8f68:	7525 003e                                   %u>.

000b8f6c <_ZTVN8particle11SPISettingsE>:
	...
   b8f74:	5019 000b 4efd 000b 4eff 000b               .P...N...N..

000b8f80 <_ZL12splash1_data>:
   b8f80:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b8f90:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b8fa0:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b8fb0:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b8fc0:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b8fd0:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b8fe8:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b8ff8:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b9008:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b9018:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b9028:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b9038:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b9048:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b9058:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b9068:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b9078:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b9088:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b9098:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b90a8:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b90b8:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b90c8:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b90d8:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b90e8:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b90f8:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b9110:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b9128:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b9138:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b9148:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b9158:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b9168:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b9178:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b9188:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b9198:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b91a8:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b91b8:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b91c8:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b91d8:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b91e8:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b91f8:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b9208:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b9218:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b9228:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b9238:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b9240 <_ZL12splash2_data>:
   b9240:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b9250:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b9260:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b927c:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b928c:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b929c:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b92ac:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b92bc:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b92cc:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b92dc:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b92ec:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b92fc:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b930c:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b931c:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b932c:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b933c:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b934c:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b935c:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b936c:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b937c:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b938c:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b939c:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b93ac:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b93bc:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b93d4:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b93e4:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b93f4:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b9404:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b9414:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b9420 <_ZTV16Adafruit_SSD1306>:
	...
   b9428:	4f0d 000b 4f25 000b 60e1 000b 7471 000b     .O..%O...`..qt..
   b9438:	4f39 000b 5ae7 000b 5ae9 000b 5b1b 000b     9O...Z...Z...[..
   b9448:	5af7 000b 5b09 000b 5a29 000b 5ae7 000b     .Z...[..)Z...Z..
   b9458:	5d13 000b 5147 000b 56ef 000b 56a1 000b     .]..GQ...V...V..
   b9468:	5bab 000b 5bf1 000b 5c0d 000b 5c91 000b     .[...[...\...\..

000b9478 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b9478:	8000 e0c0 f8f0 fefc                         ........

000b9480 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b9480:	0100 0703 1f0f 7f3f                         ......?.

000b9488 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b9488:	d5ae a880                                   ....

000b948c <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b948c:	00d3 8d40                                   ..@.

000b9490 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b9490:	0020 c8a1                                    ...

000b9494 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b9494:	40db a6a4 af2e                              .@....

000b949a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b949a:	02da 8f81                                   ....

000b949e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b949e:	12da                                         ...

000b94a1 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b94a1:	02da                                         ...

000b94a4 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b94a4:	0022 21ff 0000 0000                         "..!....

000b94ac <_ZTV16OledWingAdafruit>:
	...
   b94b4:	5915 000b 5935 000b 60e1 000b 7471 000b     .Y..5Y...`..qt..
   b94c4:	4f39 000b 5ae7 000b 5ae9 000b 5b1b 000b     9O...Z...Z...[..
   b94d4:	5af7 000b 5b09 000b 5a29 000b 5ae7 000b     .Z...[..)Z...Z..
   b94e4:	5d13 000b 5147 000b 56ef 000b 56a1 000b     .]..GQ...V...V..
   b94f4:	5bab 000b 5bf1 000b 5c0d 000b 5c91 000b     .[...[...\...\..

000b9504 <_ZL4font>:
   b9504:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b9514:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b9524:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b9534:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b9544:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b9554:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b9564:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b9574:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b9584:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b9594:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b95a4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b95b4:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b95c4:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b95d4:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b95e4:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b95f4:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b9604:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b9614:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b9624:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b9634:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b9644:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b9654:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b9664:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b9674:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b9684:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b9694:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b96a4:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b96b4:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b96c4:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b96d4:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b96e4:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b96f4:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b9704:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b9714:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b9724:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b9734:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b9744:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b9754:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b9764:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b9774:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b9784:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b9794:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b97a4:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b97b4:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b97c4:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b97d4:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b97e4:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b97f4:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b9804:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b9814:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b9824:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b9834:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b9844:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b9854:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b9864:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b9874:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b9884:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b9894:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b98a4:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b98b4:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b98c4:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b98d4:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b98e4:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b98f4:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b9904:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b9914:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b9924:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b9934:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b9944:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b9954:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b9964:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b9974:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b9984:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b9994:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b99a4:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b99b4:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b99c4:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b99d4:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b99e4:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b99f4:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000b9a04 <_ZTV12Adafruit_GFX>:
	...
   b9a14:	60e1 000b 7471 000b 40a5 000b 5ae7 000b     .`..qt...@...Z..
   b9a24:	5ae9 000b 5b1b 000b 5af7 000b 5b09 000b     .Z...[...Z...[..
   b9a34:	5a29 000b 5ae7 000b 5d13 000b 5d11 000b     )Z...Z...]...]..
   b9a44:	5b33 000b 5b71 000b 5bab 000b 5bf1 000b     3[..q[...[...[..
   b9a54:	5c0d 000b 5c91 000b                         .\...\..

000b9a5c <_ZTVN5spark12NetworkClassE>:
	...
   b9a64:	6769 000b 6773 000b 677d 000b 6787 000b     ig..sg..}g...g..
   b9a74:	6791 000b 679d 000b 67a9 000b 67b1 000b     .g...g...g...g..
   b9a84:	67b9 000b 67c5 000b 67cd 000b 67d7 000b     .g...g...g...g..
   b9a94:	67e1 000b                                   .g..

000b9a98 <_ZTVN5spark9WiFiClassE>:
	...
   b9aa0:	692b 000b 6921 000b 6917 000b 68cd 000b     +i..!i...i...h..
   b9ab0:	690b 000b 68ff 000b 67a9 000b 67b1 000b     .i...h...g...g..
   b9ac0:	68f3 000b 68eb 000b 68e1 000b 68d7 000b     .h...h...h...h..
   b9ad0:	67e1 000b 6977 6972 676e 7200 6365 2076     .g..wiring.recv 
   b9ae0:	7265 6f72 2072 203d 6425 0000               error = %d..

000b9aec <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9af4:	69cd 000b 69f1 000b 6f23 000b 69ff 000b     .i...i..#o...i..
   b9b04:	69d1 000b                                   .i..

000b9b08 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b9b10 <_ZTV9TCPClient>:
	...
   b9b18:	6a7d 000b 6ab1 000b 6949 000b 6963 000b     }j...j..Ii..ci..
   b9b28:	6db9 000b 698d 000b 6c2f 000b 69c1 000b     .m...i../l...i..
   b9b38:	6cc1 000b 6b01 000b 6c5d 000b 6e6d 000b     .l...k..]l..mn..
   b9b48:	6bfd 000b 69c3 000b 6975 000b 6a05 000b     .k...i..ui...j..
   b9b58:	6ae1 000b                                   .j..

000b9b5c <_ZTV11USARTSerial>:
	...
   b9b64:	6f29 000b 6f95 000b 6f6d 000b 7471 000b     )o...o..mo..qt..
   b9b74:	6f3d 000b 6f59 000b 6f4b 000b 6f67 000b     =o..Yo..Ko..go..
   b9b84:	6f2b 000b 6f2f 000b                         +o../o..

000b9b8c <_ZTV7TwoWire>:
	...
   b9b94:	6fcd 000b 7017 000b 6fef 000b 6fcf 000b     .o...p...o...o..
   b9ba4:	6ff7 000b 6fff 000b 7007 000b 700f 000b     .o...o...p...p..

000b9bb4 <_ZTV9USBSerial>:
	...
   b9bbc:	707f 000b 70e7 000b 70bd 000b 7471 000b     .p...p...p..qt..
   b9bcc:	70af 000b 7081 000b 7091 000b 70e1 000b     .p...p...p...p..
   b9bdc:	70a1 000b 7079 000b                         .p..yp..

000b9be4 <_ZTV9IPAddress>:
	...
   b9bec:	7189 000b 7179 000b 717b 000b 5925 252d     .q..yq..{q..%Y-%
   b9bfc:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b9c0c:	7361 7463 6d69 0065 7061 0070 616e 006e     asctime.app.nan.
   b9c1c:	6e69 0066 766f 0066 002e                    inf.ovf...

000b9c26 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9c26:	0800 1810 2820 3830 0000                    .... (08..

000b9c30 <_ZTVN5spark13EthernetClassE>:
	...
   b9c38:	7937 000b 792d 000b 7923 000b 7919 000b     7y..-y..#y...y..
   b9c48:	790d 000b 7901 000b 67a9 000b 67b1 000b     .y...y...g...g..
   b9c58:	78f5 000b 78ed 000b 78e3 000b 78d9 000b     .x...x...x...x..
   b9c68:	67e1 000b                                   .g..

000b9c6c <_ZSt7nothrow>:
	...

000b9c6d <_ZTSSt19_Sp_make_shared_tag>:
   b9c6d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b9c7d:	6572 5f64 6174 0067 0000                     red_tag....

000b9c88 <_ZTISt19_Sp_make_shared_tag>:
   b9c88:	9cc8 000b 9c6d 000b                         ....m...

000b9c90 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b9c90:	9d28 000b 9c9c 000b 9d4c 000b               (.......L...

000b9c9c <_ZTSN10__cxxabiv117__class_type_infoE>:
   b9c9c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b9cac:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b9cbc:	0045 0000                                   E...

000b9cc0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b9cc0:	0000 0000 9c90 000b 7c0d 000b 7c21 000b     .........|..!|..
   b9cd0:	7db5 000b 7db5 000b 7c8b 000b 7bcd 000b     .}...}...|...{..
   b9ce0:	7c73 000b 7c35 000b 7bff 000b               s|..5|...{..

000b9cec <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b9cec:	9d28 000b 9cf8 000b 9c90 000b               (...........

000b9cf8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b9cf8:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b9d08:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b9d18:	666e 456f 0000 0000                         nfoE....

000b9d20 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b9d20:	0000 0000 9cec 000b 7cb5 000b 7cc9 000b     .........|...|..
   b9d30:	7db5 000b 7db5 000b 7c8b 000b 7bcd 000b     .}...}...|...{..
   b9d40:	7d89 000b 7d15 000b 7cdd 000b               .}...}...|..

000b9d4c <_ZTISt9type_info>:
   b9d4c:	9cc8 000b 9d54 000b                         ....T...

000b9d54 <_ZTSSt9type_info>:
   b9d54:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b9d64:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b9d74:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b9d84:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b9d94:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b9da4:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b9db4:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b9dc4:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b9dd4:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b9de4:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b9df5 <_ctype_>:
   b9df5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b9e05:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b9e15:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b9e25:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b9e35:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b9e45:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b9e55:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b9e65:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b9e75:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b9ef6 <link_const_variable_data_end>:
	...

000b9ef8 <link_constructors_location>:
   b9ef8:	000b4ab9 	.word	0x000b4ab9
   b9efc:	000b68b9 	.word	0x000b68b9
   b9f00:	000b6935 	.word	0x000b6935
   b9f04:	000b73ed 	.word	0x000b73ed
   b9f08:	000b73f9 	.word	0x000b73f9
   b9f0c:	000b7461 	.word	0x000b7461
   b9f10:	000b7741 	.word	0x000b7741
   b9f14:	000b7751 	.word	0x000b7751
   b9f18:	000b7941 	.word	0x000b7941

000b9f1c <link_constructors_end>:
   b9f1c:	00000000 	.word	0x00000000
